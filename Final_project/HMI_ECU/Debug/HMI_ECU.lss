
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003812  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009c  00800060  00003812  000038a6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  008000fc  008000fc  00003942  2**0
                  ALLOC
  3 .stab         00003300  00000000  00000000  00003944  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000127a  00000000  00000000  00006c44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007ebe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007ffe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000816e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009db7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000aca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ba50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000be3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c60b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 3f 06 	jmp	0xc7e	; 0xc7e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 0c 06 	jmp	0xc18	; 0xc18 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 30       	cpi	r26, 0x03	; 3
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 10 	call	0x20ca	; 0x20ca <main>
      8a:	0c 94 07 1c 	jmp	0x380e	; 0x380e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ee       	ldi	r26, 0xEA	; 234
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a7 1b 	jmp	0x374e	; 0x374e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8b 1b 	jmp	0x3716	; 0x3716 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ee       	ldi	r24, 0xEA	; 234
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a7 1b 	jmp	0x374e	; 0x374e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 97 1b 	jmp	0x372e	; 0x372e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9b 1b 	jmp	0x3736	; 0x3736 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer1_init>:
#include "avr/interrupt.h"

static volatile void (*g_ptr)(void) = NULL_PTR;

void Timer1_init(const Timer1_configType* config_ptr)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer1_init+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01
	TCCR1A = (1 << FOC1A) | (1 << FOC1B);
     b54:	ef e4       	ldi	r30, 0x4F	; 79
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	8c e0       	ldi	r24, 0x0C	; 12
     b5a:	80 83       	st	Z, r24
	TCCR1B = (TCCR1B & 0xF8) | ( (config_ptr -> prescaler) & 0x07);
     b5c:	ae e4       	ldi	r26, 0x4E	; 78
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	ee e4       	ldi	r30, 0x4E	; 78
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	98 2f       	mov	r25, r24
     b68:	98 7f       	andi	r25, 0xF8	; 248
     b6a:	e9 81       	ldd	r30, Y+1	; 0x01
     b6c:	fa 81       	ldd	r31, Y+2	; 0x02
     b6e:	84 81       	ldd	r24, Z+4	; 0x04
     b70:	87 70       	andi	r24, 0x07	; 7
     b72:	89 2b       	or	r24, r25
     b74:	8c 93       	st	X, r24
	TCNT1 = config_ptr -> initial_val;
     b76:	ac e4       	ldi	r26, 0x4C	; 76
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	e9 81       	ldd	r30, Y+1	; 0x01
     b7c:	fa 81       	ldd	r31, Y+2	; 0x02
     b7e:	80 81       	ld	r24, Z
     b80:	91 81       	ldd	r25, Z+1	; 0x01
     b82:	11 96       	adiw	r26, 0x01	; 1
     b84:	9c 93       	st	X, r25
     b86:	8e 93       	st	-X, r24
	TIMSK |= (1 << TOIE1);
     b88:	a9 e5       	ldi	r26, 0x59	; 89
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e9 e5       	ldi	r30, 0x59	; 89
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	84 60       	ori	r24, 0x04	; 4
     b94:	8c 93       	st	X, r24

	if(config_ptr -> mode == CTC_MODE)
     b96:	e9 81       	ldd	r30, Y+1	; 0x01
     b98:	fa 81       	ldd	r31, Y+2	; 0x02
     b9a:	85 81       	ldd	r24, Z+5	; 0x05
     b9c:	81 30       	cpi	r24, 0x01	; 1
     b9e:	81 f4       	brne	.+32     	; 0xbc0 <Timer1_init+0x7a>
	{
		TCCR1B |= (1 << WGM12);
     ba0:	ae e4       	ldi	r26, 0x4E	; 78
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	ee e4       	ldi	r30, 0x4E	; 78
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	88 60       	ori	r24, 0x08	; 8
     bac:	8c 93       	st	X, r24
		OCR1A = config_ptr -> compare_val;
     bae:	aa e4       	ldi	r26, 0x4A	; 74
     bb0:	b0 e0       	ldi	r27, 0x00	; 0
     bb2:	e9 81       	ldd	r30, Y+1	; 0x01
     bb4:	fa 81       	ldd	r31, Y+2	; 0x02
     bb6:	82 81       	ldd	r24, Z+2	; 0x02
     bb8:	93 81       	ldd	r25, Z+3	; 0x03
     bba:	11 96       	adiw	r26, 0x01	; 1
     bbc:	9c 93       	st	X, r25
     bbe:	8e 93       	st	-X, r24
	}

}
     bc0:	0f 90       	pop	r0
     bc2:	0f 90       	pop	r0
     bc4:	cf 91       	pop	r28
     bc6:	df 91       	pop	r29
     bc8:	08 95       	ret

00000bca <Timer1_deinit>:

void Timer1_deinit()
{
     bca:	df 93       	push	r29
     bcc:	cf 93       	push	r28
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
     bd2:	ef e4       	ldi	r30, 0x4F	; 79
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	10 82       	st	Z, r1
	TCCR1B = 0;
     bd8:	ee e4       	ldi	r30, 0x4E	; 78
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	10 82       	st	Z, r1
	TCNT1 = 0;
     bde:	ec e4       	ldi	r30, 0x4C	; 76
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	11 82       	std	Z+1, r1	; 0x01
     be4:	10 82       	st	Z, r1
	OCR1A = 0;
     be6:	ea e4       	ldi	r30, 0x4A	; 74
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	11 82       	std	Z+1, r1	; 0x01
     bec:	10 82       	st	Z, r1
}
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	00 d0       	rcall	.+0      	; 0xbfa <Timer1_setCallBack+0x6>
     bfa:	cd b7       	in	r28, 0x3d	; 61
     bfc:	de b7       	in	r29, 0x3e	; 62
     bfe:	9a 83       	std	Y+2, r25	; 0x02
     c00:	89 83       	std	Y+1, r24	; 0x01
	g_ptr = a_ptr;
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	9a 81       	ldd	r25, Y+2	; 0x02
     c06:	90 93 fd 00 	sts	0x00FD, r25
     c0a:	80 93 fc 00 	sts	0x00FC, r24
}
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <__vector_9>:

ISR(TIMER1_OVF_vect)
{
     c18:	1f 92       	push	r1
     c1a:	0f 92       	push	r0
     c1c:	0f b6       	in	r0, 0x3f	; 63
     c1e:	0f 92       	push	r0
     c20:	11 24       	eor	r1, r1
     c22:	2f 93       	push	r18
     c24:	3f 93       	push	r19
     c26:	4f 93       	push	r20
     c28:	5f 93       	push	r21
     c2a:	6f 93       	push	r22
     c2c:	7f 93       	push	r23
     c2e:	8f 93       	push	r24
     c30:	9f 93       	push	r25
     c32:	af 93       	push	r26
     c34:	bf 93       	push	r27
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	cd b7       	in	r28, 0x3d	; 61
     c40:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr != NULL_PTR)
     c42:	80 91 fc 00 	lds	r24, 0x00FC
     c46:	90 91 fd 00 	lds	r25, 0x00FD
     c4a:	00 97       	sbiw	r24, 0x00	; 0
     c4c:	29 f0       	breq	.+10     	; 0xc58 <__vector_9+0x40>
	{
		(*g_ptr)();
     c4e:	e0 91 fc 00 	lds	r30, 0x00FC
     c52:	f0 91 fd 00 	lds	r31, 0x00FD
     c56:	09 95       	icall
	}
}
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	ff 91       	pop	r31
     c5e:	ef 91       	pop	r30
     c60:	bf 91       	pop	r27
     c62:	af 91       	pop	r26
     c64:	9f 91       	pop	r25
     c66:	8f 91       	pop	r24
     c68:	7f 91       	pop	r23
     c6a:	6f 91       	pop	r22
     c6c:	5f 91       	pop	r21
     c6e:	4f 91       	pop	r20
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_7>:

ISR(TIMER1_COMPA_vect)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	2f 93       	push	r18
     c8a:	3f 93       	push	r19
     c8c:	4f 93       	push	r20
     c8e:	5f 93       	push	r21
     c90:	6f 93       	push	r22
     c92:	7f 93       	push	r23
     c94:	8f 93       	push	r24
     c96:	9f 93       	push	r25
     c98:	af 93       	push	r26
     c9a:	bf 93       	push	r27
     c9c:	ef 93       	push	r30
     c9e:	ff 93       	push	r31
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	if(g_ptr != NULL_PTR)
     ca8:	80 91 fc 00 	lds	r24, 0x00FC
     cac:	90 91 fd 00 	lds	r25, 0x00FD
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	29 f0       	breq	.+10     	; 0xcbe <__vector_7+0x40>
	{
		(*g_ptr)();
     cb4:	e0 91 fc 00 	lds	r30, 0x00FC
     cb8:	f0 91 fd 00 	lds	r31, 0x00FD
     cbc:	09 95       	icall
	}
}
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	ff 91       	pop	r31
     cc4:	ef 91       	pop	r30
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     ce4:	df 93       	push	r29
     ce6:	cf 93       	push	r28
     ce8:	00 d0       	rcall	.+0      	; 0xcea <GPIO_setupPinDirection+0x6>
     cea:	00 d0       	rcall	.+0      	; 0xcec <GPIO_setupPinDirection+0x8>
     cec:	0f 92       	push	r0
     cee:	cd b7       	in	r28, 0x3d	; 61
     cf0:	de b7       	in	r29, 0x3e	; 62
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	6a 83       	std	Y+2, r22	; 0x02
     cf6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     cf8:	8a 81       	ldd	r24, Y+2	; 0x02
     cfa:	88 30       	cpi	r24, 0x08	; 8
     cfc:	08 f0       	brcs	.+2      	; 0xd00 <GPIO_setupPinDirection+0x1c>
     cfe:	d5 c0       	rjmp	.+426    	; 0xeaa <GPIO_setupPinDirection+0x1c6>
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	84 30       	cpi	r24, 0x04	; 4
     d04:	08 f0       	brcs	.+2      	; 0xd08 <GPIO_setupPinDirection+0x24>
     d06:	d1 c0       	rjmp	.+418    	; 0xeaa <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	28 2f       	mov	r18, r24
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	3d 83       	std	Y+5, r19	; 0x05
     d10:	2c 83       	std	Y+4, r18	; 0x04
     d12:	8c 81       	ldd	r24, Y+4	; 0x04
     d14:	9d 81       	ldd	r25, Y+5	; 0x05
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	91 05       	cpc	r25, r1
     d1a:	09 f4       	brne	.+2      	; 0xd1e <GPIO_setupPinDirection+0x3a>
     d1c:	43 c0       	rjmp	.+134    	; 0xda4 <GPIO_setupPinDirection+0xc0>
     d1e:	2c 81       	ldd	r18, Y+4	; 0x04
     d20:	3d 81       	ldd	r19, Y+5	; 0x05
     d22:	22 30       	cpi	r18, 0x02	; 2
     d24:	31 05       	cpc	r19, r1
     d26:	2c f4       	brge	.+10     	; 0xd32 <GPIO_setupPinDirection+0x4e>
     d28:	8c 81       	ldd	r24, Y+4	; 0x04
     d2a:	9d 81       	ldd	r25, Y+5	; 0x05
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	71 f0       	breq	.+28     	; 0xd4c <GPIO_setupPinDirection+0x68>
     d30:	bc c0       	rjmp	.+376    	; 0xeaa <GPIO_setupPinDirection+0x1c6>
     d32:	2c 81       	ldd	r18, Y+4	; 0x04
     d34:	3d 81       	ldd	r19, Y+5	; 0x05
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	09 f4       	brne	.+2      	; 0xd3e <GPIO_setupPinDirection+0x5a>
     d3c:	5f c0       	rjmp	.+190    	; 0xdfc <GPIO_setupPinDirection+0x118>
     d3e:	8c 81       	ldd	r24, Y+4	; 0x04
     d40:	9d 81       	ldd	r25, Y+5	; 0x05
     d42:	83 30       	cpi	r24, 0x03	; 3
     d44:	91 05       	cpc	r25, r1
     d46:	09 f4       	brne	.+2      	; 0xd4a <GPIO_setupPinDirection+0x66>
     d48:	85 c0       	rjmp	.+266    	; 0xe54 <GPIO_setupPinDirection+0x170>
     d4a:	af c0       	rjmp	.+350    	; 0xeaa <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d4c:	8b 81       	ldd	r24, Y+3	; 0x03
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	a1 f4       	brne	.+40     	; 0xd7a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d52:	aa e3       	ldi	r26, 0x3A	; 58
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	ea e3       	ldi	r30, 0x3A	; 58
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	48 2f       	mov	r20, r24
     d5e:	8a 81       	ldd	r24, Y+2	; 0x02
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 2e       	mov	r0, r18
     d6a:	02 c0       	rjmp	.+4      	; 0xd70 <GPIO_setupPinDirection+0x8c>
     d6c:	88 0f       	add	r24, r24
     d6e:	99 1f       	adc	r25, r25
     d70:	0a 94       	dec	r0
     d72:	e2 f7       	brpl	.-8      	; 0xd6c <GPIO_setupPinDirection+0x88>
     d74:	84 2b       	or	r24, r20
     d76:	8c 93       	st	X, r24
     d78:	98 c0       	rjmp	.+304    	; 0xeaa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d7a:	aa e3       	ldi	r26, 0x3A	; 58
     d7c:	b0 e0       	ldi	r27, 0x00	; 0
     d7e:	ea e3       	ldi	r30, 0x3A	; 58
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	80 81       	ld	r24, Z
     d84:	48 2f       	mov	r20, r24
     d86:	8a 81       	ldd	r24, Y+2	; 0x02
     d88:	28 2f       	mov	r18, r24
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	02 2e       	mov	r0, r18
     d92:	02 c0       	rjmp	.+4      	; 0xd98 <GPIO_setupPinDirection+0xb4>
     d94:	88 0f       	add	r24, r24
     d96:	99 1f       	adc	r25, r25
     d98:	0a 94       	dec	r0
     d9a:	e2 f7       	brpl	.-8      	; 0xd94 <GPIO_setupPinDirection+0xb0>
     d9c:	80 95       	com	r24
     d9e:	84 23       	and	r24, r20
     da0:	8c 93       	st	X, r24
     da2:	83 c0       	rjmp	.+262    	; 0xeaa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     da4:	8b 81       	ldd	r24, Y+3	; 0x03
     da6:	81 30       	cpi	r24, 0x01	; 1
     da8:	a1 f4       	brne	.+40     	; 0xdd2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     daa:	a7 e3       	ldi	r26, 0x37	; 55
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	e7 e3       	ldi	r30, 0x37	; 55
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <GPIO_setupPinDirection+0xe4>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <GPIO_setupPinDirection+0xe0>
     dcc:	84 2b       	or	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	6c c0       	rjmp	.+216    	; 0xeaa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     dd2:	a7 e3       	ldi	r26, 0x37	; 55
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e7 e3       	ldi	r30, 0x37	; 55
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <GPIO_setupPinDirection+0x10c>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <GPIO_setupPinDirection+0x108>
     df4:	80 95       	com	r24
     df6:	84 23       	and	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	57 c0       	rjmp	.+174    	; 0xeaa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	81 30       	cpi	r24, 0x01	; 1
     e00:	a1 f4       	brne	.+40     	; 0xe2a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e02:	a4 e3       	ldi	r26, 0x34	; 52
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e4 e3       	ldi	r30, 0x34	; 52
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	48 2f       	mov	r20, r24
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	28 2f       	mov	r18, r24
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	81 e0       	ldi	r24, 0x01	; 1
     e16:	90 e0       	ldi	r25, 0x00	; 0
     e18:	02 2e       	mov	r0, r18
     e1a:	02 c0       	rjmp	.+4      	; 0xe20 <GPIO_setupPinDirection+0x13c>
     e1c:	88 0f       	add	r24, r24
     e1e:	99 1f       	adc	r25, r25
     e20:	0a 94       	dec	r0
     e22:	e2 f7       	brpl	.-8      	; 0xe1c <GPIO_setupPinDirection+0x138>
     e24:	84 2b       	or	r24, r20
     e26:	8c 93       	st	X, r24
     e28:	40 c0       	rjmp	.+128    	; 0xeaa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e2a:	a4 e3       	ldi	r26, 0x34	; 52
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	e4 e3       	ldi	r30, 0x34	; 52
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	48 2f       	mov	r20, r24
     e36:	8a 81       	ldd	r24, Y+2	; 0x02
     e38:	28 2f       	mov	r18, r24
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	02 2e       	mov	r0, r18
     e42:	02 c0       	rjmp	.+4      	; 0xe48 <GPIO_setupPinDirection+0x164>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	0a 94       	dec	r0
     e4a:	e2 f7       	brpl	.-8      	; 0xe44 <GPIO_setupPinDirection+0x160>
     e4c:	80 95       	com	r24
     e4e:	84 23       	and	r24, r20
     e50:	8c 93       	st	X, r24
     e52:	2b c0       	rjmp	.+86     	; 0xeaa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e54:	8b 81       	ldd	r24, Y+3	; 0x03
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	a1 f4       	brne	.+40     	; 0xe82 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e5a:	a1 e3       	ldi	r26, 0x31	; 49
     e5c:	b0 e0       	ldi	r27, 0x00	; 0
     e5e:	e1 e3       	ldi	r30, 0x31	; 49
     e60:	f0 e0       	ldi	r31, 0x00	; 0
     e62:	80 81       	ld	r24, Z
     e64:	48 2f       	mov	r20, r24
     e66:	8a 81       	ldd	r24, Y+2	; 0x02
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	02 2e       	mov	r0, r18
     e72:	02 c0       	rjmp	.+4      	; 0xe78 <GPIO_setupPinDirection+0x194>
     e74:	88 0f       	add	r24, r24
     e76:	99 1f       	adc	r25, r25
     e78:	0a 94       	dec	r0
     e7a:	e2 f7       	brpl	.-8      	; 0xe74 <GPIO_setupPinDirection+0x190>
     e7c:	84 2b       	or	r24, r20
     e7e:	8c 93       	st	X, r24
     e80:	14 c0       	rjmp	.+40     	; 0xeaa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e82:	a1 e3       	ldi	r26, 0x31	; 49
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e1 e3       	ldi	r30, 0x31	; 49
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <GPIO_setupPinDirection+0x1bc>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <GPIO_setupPinDirection+0x1b8>
     ea4:	80 95       	com	r24
     ea6:	84 23       	and	r24, r20
     ea8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	08 95       	ret

00000eba <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     eba:	df 93       	push	r29
     ebc:	cf 93       	push	r28
     ebe:	00 d0       	rcall	.+0      	; 0xec0 <GPIO_writePin+0x6>
     ec0:	00 d0       	rcall	.+0      	; 0xec2 <GPIO_writePin+0x8>
     ec2:	0f 92       	push	r0
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
     ec8:	89 83       	std	Y+1, r24	; 0x01
     eca:	6a 83       	std	Y+2, r22	; 0x02
     ecc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ece:	8a 81       	ldd	r24, Y+2	; 0x02
     ed0:	88 30       	cpi	r24, 0x08	; 8
     ed2:	08 f0       	brcs	.+2      	; 0xed6 <GPIO_writePin+0x1c>
     ed4:	d5 c0       	rjmp	.+426    	; 0x1080 <GPIO_writePin+0x1c6>
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	84 30       	cpi	r24, 0x04	; 4
     eda:	08 f0       	brcs	.+2      	; 0xede <GPIO_writePin+0x24>
     edc:	d1 c0       	rjmp	.+418    	; 0x1080 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	28 2f       	mov	r18, r24
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	3d 83       	std	Y+5, r19	; 0x05
     ee6:	2c 83       	std	Y+4, r18	; 0x04
     ee8:	8c 81       	ldd	r24, Y+4	; 0x04
     eea:	9d 81       	ldd	r25, Y+5	; 0x05
     eec:	81 30       	cpi	r24, 0x01	; 1
     eee:	91 05       	cpc	r25, r1
     ef0:	09 f4       	brne	.+2      	; 0xef4 <GPIO_writePin+0x3a>
     ef2:	43 c0       	rjmp	.+134    	; 0xf7a <GPIO_writePin+0xc0>
     ef4:	2c 81       	ldd	r18, Y+4	; 0x04
     ef6:	3d 81       	ldd	r19, Y+5	; 0x05
     ef8:	22 30       	cpi	r18, 0x02	; 2
     efa:	31 05       	cpc	r19, r1
     efc:	2c f4       	brge	.+10     	; 0xf08 <GPIO_writePin+0x4e>
     efe:	8c 81       	ldd	r24, Y+4	; 0x04
     f00:	9d 81       	ldd	r25, Y+5	; 0x05
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	71 f0       	breq	.+28     	; 0xf22 <GPIO_writePin+0x68>
     f06:	bc c0       	rjmp	.+376    	; 0x1080 <GPIO_writePin+0x1c6>
     f08:	2c 81       	ldd	r18, Y+4	; 0x04
     f0a:	3d 81       	ldd	r19, Y+5	; 0x05
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	09 f4       	brne	.+2      	; 0xf14 <GPIO_writePin+0x5a>
     f12:	5f c0       	rjmp	.+190    	; 0xfd2 <GPIO_writePin+0x118>
     f14:	8c 81       	ldd	r24, Y+4	; 0x04
     f16:	9d 81       	ldd	r25, Y+5	; 0x05
     f18:	83 30       	cpi	r24, 0x03	; 3
     f1a:	91 05       	cpc	r25, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <GPIO_writePin+0x66>
     f1e:	85 c0       	rjmp	.+266    	; 0x102a <GPIO_writePin+0x170>
     f20:	af c0       	rjmp	.+350    	; 0x1080 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f22:	8b 81       	ldd	r24, Y+3	; 0x03
     f24:	81 30       	cpi	r24, 0x01	; 1
     f26:	a1 f4       	brne	.+40     	; 0xf50 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f28:	ab e3       	ldi	r26, 0x3B	; 59
     f2a:	b0 e0       	ldi	r27, 0x00	; 0
     f2c:	eb e3       	ldi	r30, 0x3B	; 59
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	80 81       	ld	r24, Z
     f32:	48 2f       	mov	r20, r24
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	28 2f       	mov	r18, r24
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	02 2e       	mov	r0, r18
     f40:	02 c0       	rjmp	.+4      	; 0xf46 <GPIO_writePin+0x8c>
     f42:	88 0f       	add	r24, r24
     f44:	99 1f       	adc	r25, r25
     f46:	0a 94       	dec	r0
     f48:	e2 f7       	brpl	.-8      	; 0xf42 <GPIO_writePin+0x88>
     f4a:	84 2b       	or	r24, r20
     f4c:	8c 93       	st	X, r24
     f4e:	98 c0       	rjmp	.+304    	; 0x1080 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f50:	ab e3       	ldi	r26, 0x3B	; 59
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	eb e3       	ldi	r30, 0x3B	; 59
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	48 2f       	mov	r20, r24
     f5c:	8a 81       	ldd	r24, Y+2	; 0x02
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	02 2e       	mov	r0, r18
     f68:	02 c0       	rjmp	.+4      	; 0xf6e <GPIO_writePin+0xb4>
     f6a:	88 0f       	add	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	0a 94       	dec	r0
     f70:	e2 f7       	brpl	.-8      	; 0xf6a <GPIO_writePin+0xb0>
     f72:	80 95       	com	r24
     f74:	84 23       	and	r24, r20
     f76:	8c 93       	st	X, r24
     f78:	83 c0       	rjmp	.+262    	; 0x1080 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f7a:	8b 81       	ldd	r24, Y+3	; 0x03
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	a1 f4       	brne	.+40     	; 0xfa8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f80:	a8 e3       	ldi	r26, 0x38	; 56
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e8 e3       	ldi	r30, 0x38	; 56
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	8a 81       	ldd	r24, Y+2	; 0x02
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 2e       	mov	r0, r18
     f98:	02 c0       	rjmp	.+4      	; 0xf9e <GPIO_writePin+0xe4>
     f9a:	88 0f       	add	r24, r24
     f9c:	99 1f       	adc	r25, r25
     f9e:	0a 94       	dec	r0
     fa0:	e2 f7       	brpl	.-8      	; 0xf9a <GPIO_writePin+0xe0>
     fa2:	84 2b       	or	r24, r20
     fa4:	8c 93       	st	X, r24
     fa6:	6c c0       	rjmp	.+216    	; 0x1080 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     fa8:	a8 e3       	ldi	r26, 0x38	; 56
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e8 e3       	ldi	r30, 0x38	; 56
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	28 2f       	mov	r18, r24
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	02 2e       	mov	r0, r18
     fc0:	02 c0       	rjmp	.+4      	; 0xfc6 <GPIO_writePin+0x10c>
     fc2:	88 0f       	add	r24, r24
     fc4:	99 1f       	adc	r25, r25
     fc6:	0a 94       	dec	r0
     fc8:	e2 f7       	brpl	.-8      	; 0xfc2 <GPIO_writePin+0x108>
     fca:	80 95       	com	r24
     fcc:	84 23       	and	r24, r20
     fce:	8c 93       	st	X, r24
     fd0:	57 c0       	rjmp	.+174    	; 0x1080 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     fd2:	8b 81       	ldd	r24, Y+3	; 0x03
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	a1 f4       	brne	.+40     	; 0x1000 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     fd8:	a5 e3       	ldi	r26, 0x35	; 53
     fda:	b0 e0       	ldi	r27, 0x00	; 0
     fdc:	e5 e3       	ldi	r30, 0x35	; 53
     fde:	f0 e0       	ldi	r31, 0x00	; 0
     fe0:	80 81       	ld	r24, Z
     fe2:	48 2f       	mov	r20, r24
     fe4:	8a 81       	ldd	r24, Y+2	; 0x02
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	81 e0       	ldi	r24, 0x01	; 1
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	02 2e       	mov	r0, r18
     ff0:	02 c0       	rjmp	.+4      	; 0xff6 <GPIO_writePin+0x13c>
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	0a 94       	dec	r0
     ff8:	e2 f7       	brpl	.-8      	; 0xff2 <GPIO_writePin+0x138>
     ffa:	84 2b       	or	r24, r20
     ffc:	8c 93       	st	X, r24
     ffe:	40 c0       	rjmp	.+128    	; 0x1080 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1000:	a5 e3       	ldi	r26, 0x35	; 53
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e5 e3       	ldi	r30, 0x35	; 53
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	80 81       	ld	r24, Z
    100a:	48 2f       	mov	r20, r24
    100c:	8a 81       	ldd	r24, Y+2	; 0x02
    100e:	28 2f       	mov	r18, r24
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	02 2e       	mov	r0, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <GPIO_writePin+0x164>
    101a:	88 0f       	add	r24, r24
    101c:	99 1f       	adc	r25, r25
    101e:	0a 94       	dec	r0
    1020:	e2 f7       	brpl	.-8      	; 0x101a <GPIO_writePin+0x160>
    1022:	80 95       	com	r24
    1024:	84 23       	and	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	2b c0       	rjmp	.+86     	; 0x1080 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    102a:	8b 81       	ldd	r24, Y+3	; 0x03
    102c:	81 30       	cpi	r24, 0x01	; 1
    102e:	a1 f4       	brne	.+40     	; 0x1058 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1030:	a2 e3       	ldi	r26, 0x32	; 50
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e2 e3       	ldi	r30, 0x32	; 50
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	8a 81       	ldd	r24, Y+2	; 0x02
    103e:	28 2f       	mov	r18, r24
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	02 2e       	mov	r0, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_writePin+0x194>
    104a:	88 0f       	add	r24, r24
    104c:	99 1f       	adc	r25, r25
    104e:	0a 94       	dec	r0
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_writePin+0x190>
    1052:	84 2b       	or	r24, r20
    1054:	8c 93       	st	X, r24
    1056:	14 c0       	rjmp	.+40     	; 0x1080 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1058:	a2 e3       	ldi	r26, 0x32	; 50
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	e2 e3       	ldi	r30, 0x32	; 50
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	48 2f       	mov	r20, r24
    1064:	8a 81       	ldd	r24, Y+2	; 0x02
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	02 2e       	mov	r0, r18
    1070:	02 c0       	rjmp	.+4      	; 0x1076 <GPIO_writePin+0x1bc>
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	0a 94       	dec	r0
    1078:	e2 f7       	brpl	.-8      	; 0x1072 <GPIO_writePin+0x1b8>
    107a:	80 95       	com	r24
    107c:	84 23       	and	r24, r20
    107e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <GPIO_readPin+0x6>
    1096:	00 d0       	rcall	.+0      	; 0x1098 <GPIO_readPin+0x8>
    1098:	0f 92       	push	r0
    109a:	cd b7       	in	r28, 0x3d	; 61
    109c:	de b7       	in	r29, 0x3e	; 62
    109e:	8a 83       	std	Y+2, r24	; 0x02
    10a0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    10a2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10a4:	8b 81       	ldd	r24, Y+3	; 0x03
    10a6:	88 30       	cpi	r24, 0x08	; 8
    10a8:	08 f0       	brcs	.+2      	; 0x10ac <GPIO_readPin+0x1c>
    10aa:	84 c0       	rjmp	.+264    	; 0x11b4 <GPIO_readPin+0x124>
    10ac:	8a 81       	ldd	r24, Y+2	; 0x02
    10ae:	84 30       	cpi	r24, 0x04	; 4
    10b0:	08 f0       	brcs	.+2      	; 0x10b4 <GPIO_readPin+0x24>
    10b2:	80 c0       	rjmp	.+256    	; 0x11b4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    10b4:	8a 81       	ldd	r24, Y+2	; 0x02
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	3d 83       	std	Y+5, r19	; 0x05
    10bc:	2c 83       	std	Y+4, r18	; 0x04
    10be:	4c 81       	ldd	r20, Y+4	; 0x04
    10c0:	5d 81       	ldd	r21, Y+5	; 0x05
    10c2:	41 30       	cpi	r20, 0x01	; 1
    10c4:	51 05       	cpc	r21, r1
    10c6:	79 f1       	breq	.+94     	; 0x1126 <GPIO_readPin+0x96>
    10c8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ca:	9d 81       	ldd	r25, Y+5	; 0x05
    10cc:	82 30       	cpi	r24, 0x02	; 2
    10ce:	91 05       	cpc	r25, r1
    10d0:	34 f4       	brge	.+12     	; 0x10de <GPIO_readPin+0x4e>
    10d2:	2c 81       	ldd	r18, Y+4	; 0x04
    10d4:	3d 81       	ldd	r19, Y+5	; 0x05
    10d6:	21 15       	cp	r18, r1
    10d8:	31 05       	cpc	r19, r1
    10da:	69 f0       	breq	.+26     	; 0x10f6 <GPIO_readPin+0x66>
    10dc:	6b c0       	rjmp	.+214    	; 0x11b4 <GPIO_readPin+0x124>
    10de:	4c 81       	ldd	r20, Y+4	; 0x04
    10e0:	5d 81       	ldd	r21, Y+5	; 0x05
    10e2:	42 30       	cpi	r20, 0x02	; 2
    10e4:	51 05       	cpc	r21, r1
    10e6:	b9 f1       	breq	.+110    	; 0x1156 <GPIO_readPin+0xc6>
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	9d 81       	ldd	r25, Y+5	; 0x05
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	91 05       	cpc	r25, r1
    10f0:	09 f4       	brne	.+2      	; 0x10f4 <GPIO_readPin+0x64>
    10f2:	49 c0       	rjmp	.+146    	; 0x1186 <GPIO_readPin+0xf6>
    10f4:	5f c0       	rjmp	.+190    	; 0x11b4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    10f6:	e9 e3       	ldi	r30, 0x39	; 57
    10f8:	f0 e0       	ldi	r31, 0x00	; 0
    10fa:	80 81       	ld	r24, Z
    10fc:	28 2f       	mov	r18, r24
    10fe:	30 e0       	ldi	r19, 0x00	; 0
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	88 2f       	mov	r24, r24
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	a9 01       	movw	r20, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <GPIO_readPin+0x7e>
    110a:	55 95       	asr	r21
    110c:	47 95       	ror	r20
    110e:	8a 95       	dec	r24
    1110:	e2 f7       	brpl	.-8      	; 0x110a <GPIO_readPin+0x7a>
    1112:	ca 01       	movw	r24, r20
    1114:	81 70       	andi	r24, 0x01	; 1
    1116:	90 70       	andi	r25, 0x00	; 0
    1118:	88 23       	and	r24, r24
    111a:	19 f0       	breq	.+6      	; 0x1122 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	89 83       	std	Y+1, r24	; 0x01
    1120:	49 c0       	rjmp	.+146    	; 0x11b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1122:	19 82       	std	Y+1, r1	; 0x01
    1124:	47 c0       	rjmp	.+142    	; 0x11b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1126:	e6 e3       	ldi	r30, 0x36	; 54
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	8b 81       	ldd	r24, Y+3	; 0x03
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <GPIO_readPin+0xae>
    113a:	55 95       	asr	r21
    113c:	47 95       	ror	r20
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <GPIO_readPin+0xaa>
    1142:	ca 01       	movw	r24, r20
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	90 70       	andi	r25, 0x00	; 0
    1148:	88 23       	and	r24, r24
    114a:	19 f0       	breq	.+6      	; 0x1152 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	31 c0       	rjmp	.+98     	; 0x11b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1152:	19 82       	std	Y+1, r1	; 0x01
    1154:	2f c0       	rjmp	.+94     	; 0x11b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1156:	e3 e3       	ldi	r30, 0x33	; 51
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	80 81       	ld	r24, Z
    115c:	28 2f       	mov	r18, r24
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	88 2f       	mov	r24, r24
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	a9 01       	movw	r20, r18
    1168:	02 c0       	rjmp	.+4      	; 0x116e <GPIO_readPin+0xde>
    116a:	55 95       	asr	r21
    116c:	47 95       	ror	r20
    116e:	8a 95       	dec	r24
    1170:	e2 f7       	brpl	.-8      	; 0x116a <GPIO_readPin+0xda>
    1172:	ca 01       	movw	r24, r20
    1174:	81 70       	andi	r24, 0x01	; 1
    1176:	90 70       	andi	r25, 0x00	; 0
    1178:	88 23       	and	r24, r24
    117a:	19 f0       	breq	.+6      	; 0x1182 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	89 83       	std	Y+1, r24	; 0x01
    1180:	19 c0       	rjmp	.+50     	; 0x11b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1182:	19 82       	std	Y+1, r1	; 0x01
    1184:	17 c0       	rjmp	.+46     	; 0x11b4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1186:	e0 e3       	ldi	r30, 0x30	; 48
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	80 81       	ld	r24, Z
    118c:	28 2f       	mov	r18, r24
    118e:	30 e0       	ldi	r19, 0x00	; 0
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	88 2f       	mov	r24, r24
    1194:	90 e0       	ldi	r25, 0x00	; 0
    1196:	a9 01       	movw	r20, r18
    1198:	02 c0       	rjmp	.+4      	; 0x119e <GPIO_readPin+0x10e>
    119a:	55 95       	asr	r21
    119c:	47 95       	ror	r20
    119e:	8a 95       	dec	r24
    11a0:	e2 f7       	brpl	.-8      	; 0x119a <GPIO_readPin+0x10a>
    11a2:	ca 01       	movw	r24, r20
    11a4:	81 70       	andi	r24, 0x01	; 1
    11a6:	90 70       	andi	r25, 0x00	; 0
    11a8:	88 23       	and	r24, r24
    11aa:	19 f0       	breq	.+6      	; 0x11b2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	89 83       	std	Y+1, r24	; 0x01
    11b0:	01 c0       	rjmp	.+2      	; 0x11b4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11b2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	0f 90       	pop	r0
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	00 d0       	rcall	.+0      	; 0x11cc <GPIO_setupPortDirection+0x6>
    11cc:	00 d0       	rcall	.+0      	; 0x11ce <GPIO_setupPortDirection+0x8>
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
    11d2:	89 83       	std	Y+1, r24	; 0x01
    11d4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	90 f5       	brcc	.+100    	; 0x1240 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    11dc:	89 81       	ldd	r24, Y+1	; 0x01
    11de:	28 2f       	mov	r18, r24
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	3c 83       	std	Y+4, r19	; 0x04
    11e4:	2b 83       	std	Y+3, r18	; 0x03
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	91 05       	cpc	r25, r1
    11ee:	d1 f0       	breq	.+52     	; 0x1224 <GPIO_setupPortDirection+0x5e>
    11f0:	2b 81       	ldd	r18, Y+3	; 0x03
    11f2:	3c 81       	ldd	r19, Y+4	; 0x04
    11f4:	22 30       	cpi	r18, 0x02	; 2
    11f6:	31 05       	cpc	r19, r1
    11f8:	2c f4       	brge	.+10     	; 0x1204 <GPIO_setupPortDirection+0x3e>
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	61 f0       	breq	.+24     	; 0x121a <GPIO_setupPortDirection+0x54>
    1202:	1e c0       	rjmp	.+60     	; 0x1240 <GPIO_setupPortDirection+0x7a>
    1204:	2b 81       	ldd	r18, Y+3	; 0x03
    1206:	3c 81       	ldd	r19, Y+4	; 0x04
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	81 f0       	breq	.+32     	; 0x122e <GPIO_setupPortDirection+0x68>
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	83 30       	cpi	r24, 0x03	; 3
    1214:	91 05       	cpc	r25, r1
    1216:	81 f0       	breq	.+32     	; 0x1238 <GPIO_setupPortDirection+0x72>
    1218:	13 c0       	rjmp	.+38     	; 0x1240 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    121a:	ea e3       	ldi	r30, 0x3A	; 58
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	80 83       	st	Z, r24
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1224:	e7 e3       	ldi	r30, 0x37	; 55
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	8a 81       	ldd	r24, Y+2	; 0x02
    122a:	80 83       	st	Z, r24
    122c:	09 c0       	rjmp	.+18     	; 0x1240 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    122e:	e4 e3       	ldi	r30, 0x34	; 52
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	80 83       	st	Z, r24
    1236:	04 c0       	rjmp	.+8      	; 0x1240 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1238:	e1 e3       	ldi	r30, 0x31	; 49
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	00 d0       	rcall	.+0      	; 0x1254 <GPIO_writePort+0x6>
    1254:	00 d0       	rcall	.+0      	; 0x1256 <GPIO_writePort+0x8>
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    125e:	89 81       	ldd	r24, Y+1	; 0x01
    1260:	84 30       	cpi	r24, 0x04	; 4
    1262:	90 f5       	brcc	.+100    	; 0x12c8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3c 83       	std	Y+4, r19	; 0x04
    126c:	2b 83       	std	Y+3, r18	; 0x03
    126e:	8b 81       	ldd	r24, Y+3	; 0x03
    1270:	9c 81       	ldd	r25, Y+4	; 0x04
    1272:	81 30       	cpi	r24, 0x01	; 1
    1274:	91 05       	cpc	r25, r1
    1276:	d1 f0       	breq	.+52     	; 0x12ac <GPIO_writePort+0x5e>
    1278:	2b 81       	ldd	r18, Y+3	; 0x03
    127a:	3c 81       	ldd	r19, Y+4	; 0x04
    127c:	22 30       	cpi	r18, 0x02	; 2
    127e:	31 05       	cpc	r19, r1
    1280:	2c f4       	brge	.+10     	; 0x128c <GPIO_writePort+0x3e>
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	61 f0       	breq	.+24     	; 0x12a2 <GPIO_writePort+0x54>
    128a:	1e c0       	rjmp	.+60     	; 0x12c8 <GPIO_writePort+0x7a>
    128c:	2b 81       	ldd	r18, Y+3	; 0x03
    128e:	3c 81       	ldd	r19, Y+4	; 0x04
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	81 f0       	breq	.+32     	; 0x12b6 <GPIO_writePort+0x68>
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	83 30       	cpi	r24, 0x03	; 3
    129c:	91 05       	cpc	r25, r1
    129e:	81 f0       	breq	.+32     	; 0x12c0 <GPIO_writePort+0x72>
    12a0:	13 c0       	rjmp	.+38     	; 0x12c8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    12a2:	eb e3       	ldi	r30, 0x3B	; 59
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	80 83       	st	Z, r24
    12aa:	0e c0       	rjmp	.+28     	; 0x12c8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    12ac:	e8 e3       	ldi	r30, 0x38	; 56
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	8a 81       	ldd	r24, Y+2	; 0x02
    12b2:	80 83       	st	Z, r24
    12b4:	09 c0       	rjmp	.+18     	; 0x12c8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    12b6:	e5 e3       	ldi	r30, 0x35	; 53
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	80 83       	st	Z, r24
    12be:	04 c0       	rjmp	.+8      	; 0x12c8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    12c0:	e2 e3       	ldi	r30, 0x32	; 50
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	80 83       	st	Z, r24
			break;
		}
	}
}
    12c8:	0f 90       	pop	r0
    12ca:	0f 90       	pop	r0
    12cc:	0f 90       	pop	r0
    12ce:	0f 90       	pop	r0
    12d0:	cf 91       	pop	r28
    12d2:	df 91       	pop	r29
    12d4:	08 95       	ret

000012d6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    12d6:	df 93       	push	r29
    12d8:	cf 93       	push	r28
    12da:	00 d0       	rcall	.+0      	; 0x12dc <GPIO_readPort+0x6>
    12dc:	00 d0       	rcall	.+0      	; 0x12de <GPIO_readPort+0x8>
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    12e4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12e6:	8a 81       	ldd	r24, Y+2	; 0x02
    12e8:	84 30       	cpi	r24, 0x04	; 4
    12ea:	90 f5       	brcc	.+100    	; 0x1350 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	3c 83       	std	Y+4, r19	; 0x04
    12f4:	2b 83       	std	Y+3, r18	; 0x03
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	81 30       	cpi	r24, 0x01	; 1
    12fc:	91 05       	cpc	r25, r1
    12fe:	d1 f0       	breq	.+52     	; 0x1334 <GPIO_readPort+0x5e>
    1300:	2b 81       	ldd	r18, Y+3	; 0x03
    1302:	3c 81       	ldd	r19, Y+4	; 0x04
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	31 05       	cpc	r19, r1
    1308:	2c f4       	brge	.+10     	; 0x1314 <GPIO_readPort+0x3e>
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	61 f0       	breq	.+24     	; 0x132a <GPIO_readPort+0x54>
    1312:	1e c0       	rjmp	.+60     	; 0x1350 <GPIO_readPort+0x7a>
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	81 f0       	breq	.+32     	; 0x133e <GPIO_readPort+0x68>
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	83 30       	cpi	r24, 0x03	; 3
    1324:	91 05       	cpc	r25, r1
    1326:	81 f0       	breq	.+32     	; 0x1348 <GPIO_readPort+0x72>
    1328:	13 c0       	rjmp	.+38     	; 0x1350 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    132a:	e9 e3       	ldi	r30, 0x39	; 57
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	89 83       	std	Y+1, r24	; 0x01
    1332:	0e c0       	rjmp	.+28     	; 0x1350 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1334:	e6 e3       	ldi	r30, 0x36	; 54
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	09 c0       	rjmp	.+18     	; 0x1350 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    133e:	e3 e3       	ldi	r30, 0x33	; 51
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1348:	e0 e3       	ldi	r30, 0x30	; 48
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1350:	89 81       	ldd	r24, Y+1	; 0x01
}
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	60 97       	sbiw	r28, 0x10	; 16
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1374:	82 e0       	ldi	r24, 0x02	; 2
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	40 e0       	ldi	r20, 0x00	; 0
    137a:	0e 94 72 06 	call	0xce4	; 0xce4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    137e:	82 e0       	ldi	r24, 0x02	; 2
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	40 e0       	ldi	r20, 0x00	; 0
    1384:	0e 94 72 06 	call	0xce4	; 0xce4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1388:	82 e0       	ldi	r24, 0x02	; 2
    138a:	62 e0       	ldi	r22, 0x02	; 2
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	0e 94 72 06 	call	0xce4	; 0xce4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1392:	82 e0       	ldi	r24, 0x02	; 2
    1394:	63 e0       	ldi	r22, 0x03	; 3
    1396:	40 e0       	ldi	r20, 0x00	; 0
    1398:	0e 94 72 06 	call	0xce4	; 0xce4 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    139c:	82 e0       	ldi	r24, 0x02	; 2
    139e:	64 e0       	ldi	r22, 0x04	; 4
    13a0:	40 e0       	ldi	r20, 0x00	; 0
    13a2:	0e 94 72 06 	call	0xce4	; 0xce4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    13a6:	82 e0       	ldi	r24, 0x02	; 2
    13a8:	65 e0       	ldi	r22, 0x05	; 5
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	0e 94 72 06 	call	0xce4	; 0xce4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    13b0:	82 e0       	ldi	r24, 0x02	; 2
    13b2:	66 e0       	ldi	r22, 0x06	; 6
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	0e 94 72 06 	call	0xce4	; 0xce4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    13ba:	82 e0       	ldi	r24, 0x02	; 2
    13bc:	67 e0       	ldi	r22, 0x07	; 7
    13be:	40 e0       	ldi	r20, 0x00	; 0
    13c0:	0e 94 72 06 	call	0xce4	; 0xce4 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    13c4:	1f 86       	std	Y+15, r1	; 0x0f
    13c6:	39 c0       	rjmp	.+114    	; 0x143a <KEYPAD_getPressedKey+0xda>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    13c8:	82 e0       	ldi	r24, 0x02	; 2
    13ca:	6f 85       	ldd	r22, Y+15	; 0x0f
    13cc:	41 e0       	ldi	r20, 0x01	; 1
    13ce:	0e 94 72 06 	call	0xce4	; 0xce4 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    13d2:	82 e0       	ldi	r24, 0x02	; 2
    13d4:	6f 85       	ldd	r22, Y+15	; 0x0f
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    13dc:	18 8a       	std	Y+16, r1	; 0x10
    13de:	22 c0       	rjmp	.+68     	; 0x1424 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    13e0:	88 89       	ldd	r24, Y+16	; 0x10
    13e2:	98 2f       	mov	r25, r24
    13e4:	9c 5f       	subi	r25, 0xFC	; 252
    13e6:	82 e0       	ldi	r24, 0x02	; 2
    13e8:	69 2f       	mov	r22, r25
    13ea:	0e 94 48 08 	call	0x1090	; 0x1090 <GPIO_readPin>
    13ee:	88 23       	and	r24, r24
    13f0:	b1 f4       	brne	.+44     	; 0x141e <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    13f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13f4:	88 2f       	mov	r24, r24
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	88 0f       	add	r24, r24
    13fe:	99 1f       	adc	r25, r25
    1400:	98 2f       	mov	r25, r24
    1402:	88 89       	ldd	r24, Y+16	; 0x10
    1404:	89 0f       	add	r24, r25
    1406:	8f 5f       	subi	r24, 0xFF	; 255
    1408:	0e 94 93 0a 	call	0x1526	; 0x1526 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
		_delay_ms(50);
	}	
}
    140c:	60 96       	adiw	r28, 0x10	; 16
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	cf 91       	pop	r28
    141a:	df 91       	pop	r29
    141c:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    141e:	88 89       	ldd	r24, Y+16	; 0x10
    1420:	8f 5f       	subi	r24, 0xFF	; 255
    1422:	88 8b       	std	Y+16, r24	; 0x10
    1424:	88 89       	ldd	r24, Y+16	; 0x10
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	d8 f2       	brcs	.-74     	; 0x13e0 <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    142a:	82 e0       	ldi	r24, 0x02	; 2
    142c:	6f 85       	ldd	r22, Y+15	; 0x0f
    142e:	40 e0       	ldi	r20, 0x00	; 0
    1430:	0e 94 72 06 	call	0xce4	; 0xce4 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1434:	8f 85       	ldd	r24, Y+15	; 0x0f
    1436:	8f 5f       	subi	r24, 0xFF	; 255
    1438:	8f 87       	std	Y+15, r24	; 0x0f
    143a:	8f 85       	ldd	r24, Y+15	; 0x0f
    143c:	84 30       	cpi	r24, 0x04	; 4
    143e:	20 f2       	brcs	.-120    	; 0x13c8 <KEYPAD_getPressedKey+0x68>
    1440:	80 e0       	ldi	r24, 0x00	; 0
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	a8 e4       	ldi	r26, 0x48	; 72
    1446:	b2 e4       	ldi	r27, 0x42	; 66
    1448:	8b 87       	std	Y+11, r24	; 0x0b
    144a:	9c 87       	std	Y+12, r25	; 0x0c
    144c:	ad 87       	std	Y+13, r26	; 0x0d
    144e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1450:	6b 85       	ldd	r22, Y+11	; 0x0b
    1452:	7c 85       	ldd	r23, Y+12	; 0x0c
    1454:	8d 85       	ldd	r24, Y+13	; 0x0d
    1456:	9e 85       	ldd	r25, Y+14	; 0x0e
    1458:	20 e0       	ldi	r18, 0x00	; 0
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	4a ef       	ldi	r20, 0xFA	; 250
    145e:	54 e4       	ldi	r21, 0x44	; 68
    1460:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	8f 83       	std	Y+7, r24	; 0x07
    146a:	98 87       	std	Y+8, r25	; 0x08
    146c:	a9 87       	std	Y+9, r26	; 0x09
    146e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1470:	6f 81       	ldd	r22, Y+7	; 0x07
    1472:	78 85       	ldd	r23, Y+8	; 0x08
    1474:	89 85       	ldd	r24, Y+9	; 0x09
    1476:	9a 85       	ldd	r25, Y+10	; 0x0a
    1478:	20 e0       	ldi	r18, 0x00	; 0
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	40 e8       	ldi	r20, 0x80	; 128
    147e:	5f e3       	ldi	r21, 0x3F	; 63
    1480:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1484:	88 23       	and	r24, r24
    1486:	2c f4       	brge	.+10     	; 0x1492 <KEYPAD_getPressedKey+0x132>
		__ticks = 1;
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	9e 83       	std	Y+6, r25	; 0x06
    148e:	8d 83       	std	Y+5, r24	; 0x05
    1490:	3f c0       	rjmp	.+126    	; 0x1510 <KEYPAD_getPressedKey+0x1b0>
	else if (__tmp > 65535)
    1492:	6f 81       	ldd	r22, Y+7	; 0x07
    1494:	78 85       	ldd	r23, Y+8	; 0x08
    1496:	89 85       	ldd	r24, Y+9	; 0x09
    1498:	9a 85       	ldd	r25, Y+10	; 0x0a
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	3f ef       	ldi	r19, 0xFF	; 255
    149e:	4f e7       	ldi	r20, 0x7F	; 127
    14a0:	57 e4       	ldi	r21, 0x47	; 71
    14a2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14a6:	18 16       	cp	r1, r24
    14a8:	4c f5       	brge	.+82     	; 0x14fc <KEYPAD_getPressedKey+0x19c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    14ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    14ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b2:	20 e0       	ldi	r18, 0x00	; 0
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e2       	ldi	r20, 0x20	; 32
    14b8:	51 e4       	ldi	r21, 0x41	; 65
    14ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	bc 01       	movw	r22, r24
    14c4:	cd 01       	movw	r24, r26
    14c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ca:	dc 01       	movw	r26, r24
    14cc:	cb 01       	movw	r24, r22
    14ce:	9e 83       	std	Y+6, r25	; 0x06
    14d0:	8d 83       	std	Y+5, r24	; 0x05
    14d2:	0f c0       	rjmp	.+30     	; 0x14f2 <KEYPAD_getPressedKey+0x192>
    14d4:	88 ec       	ldi	r24, 0xC8	; 200
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	9c 83       	std	Y+4, r25	; 0x04
    14da:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	f1 f7       	brne	.-4      	; 0x14e0 <KEYPAD_getPressedKey+0x180>
    14e4:	9c 83       	std	Y+4, r25	; 0x04
    14e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14e8:	8d 81       	ldd	r24, Y+5	; 0x05
    14ea:	9e 81       	ldd	r25, Y+6	; 0x06
    14ec:	01 97       	sbiw	r24, 0x01	; 1
    14ee:	9e 83       	std	Y+6, r25	; 0x06
    14f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	69 f7       	brne	.-38     	; 0x14d4 <KEYPAD_getPressedKey+0x174>
    14fa:	64 cf       	rjmp	.-312    	; 0x13c4 <KEYPAD_getPressedKey+0x64>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14fc:	6f 81       	ldd	r22, Y+7	; 0x07
    14fe:	78 85       	ldd	r23, Y+8	; 0x08
    1500:	89 85       	ldd	r24, Y+9	; 0x09
    1502:	9a 85       	ldd	r25, Y+10	; 0x0a
    1504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1508:	dc 01       	movw	r26, r24
    150a:	cb 01       	movw	r24, r22
    150c:	9e 83       	std	Y+6, r25	; 0x06
    150e:	8d 83       	std	Y+5, r24	; 0x05
    1510:	8d 81       	ldd	r24, Y+5	; 0x05
    1512:	9e 81       	ldd	r25, Y+6	; 0x06
    1514:	9a 83       	std	Y+2, r25	; 0x02
    1516:	89 83       	std	Y+1, r24	; 0x01
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	f1 f7       	brne	.-4      	; 0x151c <KEYPAD_getPressedKey+0x1bc>
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	89 83       	std	Y+1, r24	; 0x01
    1524:	4f cf       	rjmp	.-354    	; 0x13c4 <KEYPAD_getPressedKey+0x64>

00001526 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1526:	df 93       	push	r29
    1528:	cf 93       	push	r28
    152a:	00 d0       	rcall	.+0      	; 0x152c <KEYPAD_4x4_adjustKeyNumber+0x6>
    152c:	00 d0       	rcall	.+0      	; 0x152e <KEYPAD_4x4_adjustKeyNumber+0x8>
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1534:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1536:	8a 81       	ldd	r24, Y+2	; 0x02
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3c 83       	std	Y+4, r19	; 0x04
    153e:	2b 83       	std	Y+3, r18	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	88 30       	cpi	r24, 0x08	; 8
    1546:	91 05       	cpc	r25, r1
    1548:	09 f4       	brne	.+2      	; 0x154c <KEYPAD_4x4_adjustKeyNumber+0x26>
    154a:	70 c0       	rjmp	.+224    	; 0x162c <KEYPAD_4x4_adjustKeyNumber+0x106>
    154c:	2b 81       	ldd	r18, Y+3	; 0x03
    154e:	3c 81       	ldd	r19, Y+4	; 0x04
    1550:	29 30       	cpi	r18, 0x09	; 9
    1552:	31 05       	cpc	r19, r1
    1554:	5c f5       	brge	.+86     	; 0x15ac <KEYPAD_4x4_adjustKeyNumber+0x86>
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	9c 81       	ldd	r25, Y+4	; 0x04
    155a:	84 30       	cpi	r24, 0x04	; 4
    155c:	91 05       	cpc	r25, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1560:	59 c0       	rjmp	.+178    	; 0x1614 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1562:	2b 81       	ldd	r18, Y+3	; 0x03
    1564:	3c 81       	ldd	r19, Y+4	; 0x04
    1566:	25 30       	cpi	r18, 0x05	; 5
    1568:	31 05       	cpc	r19, r1
    156a:	9c f4       	brge	.+38     	; 0x1592 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    156c:	8b 81       	ldd	r24, Y+3	; 0x03
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	82 30       	cpi	r24, 0x02	; 2
    1572:	91 05       	cpc	r25, r1
    1574:	09 f4       	brne	.+2      	; 0x1578 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1576:	48 c0       	rjmp	.+144    	; 0x1608 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1578:	2b 81       	ldd	r18, Y+3	; 0x03
    157a:	3c 81       	ldd	r19, Y+4	; 0x04
    157c:	23 30       	cpi	r18, 0x03	; 3
    157e:	31 05       	cpc	r19, r1
    1580:	0c f0       	brlt	.+2      	; 0x1584 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1582:	45 c0       	rjmp	.+138    	; 0x160e <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1584:	8b 81       	ldd	r24, Y+3	; 0x03
    1586:	9c 81       	ldd	r25, Y+4	; 0x04
    1588:	81 30       	cpi	r24, 0x01	; 1
    158a:	91 05       	cpc	r25, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    158e:	39 c0       	rjmp	.+114    	; 0x1602 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1590:	67 c0       	rjmp	.+206    	; 0x1660 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1592:	2b 81       	ldd	r18, Y+3	; 0x03
    1594:	3c 81       	ldd	r19, Y+4	; 0x04
    1596:	26 30       	cpi	r18, 0x06	; 6
    1598:	31 05       	cpc	r19, r1
    159a:	09 f4       	brne	.+2      	; 0x159e <KEYPAD_4x4_adjustKeyNumber+0x78>
    159c:	41 c0       	rjmp	.+130    	; 0x1620 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	87 30       	cpi	r24, 0x07	; 7
    15a4:	91 05       	cpc	r25, r1
    15a6:	0c f0       	brlt	.+2      	; 0x15aa <KEYPAD_4x4_adjustKeyNumber+0x84>
    15a8:	3e c0       	rjmp	.+124    	; 0x1626 <KEYPAD_4x4_adjustKeyNumber+0x100>
    15aa:	37 c0       	rjmp	.+110    	; 0x161a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    15ac:	2b 81       	ldd	r18, Y+3	; 0x03
    15ae:	3c 81       	ldd	r19, Y+4	; 0x04
    15b0:	2c 30       	cpi	r18, 0x0C	; 12
    15b2:	31 05       	cpc	r19, r1
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    15b6:	46 c0       	rjmp	.+140    	; 0x1644 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    15b8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ba:	9c 81       	ldd	r25, Y+4	; 0x04
    15bc:	8d 30       	cpi	r24, 0x0D	; 13
    15be:	91 05       	cpc	r25, r1
    15c0:	5c f4       	brge	.+22     	; 0x15d8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    15c2:	2b 81       	ldd	r18, Y+3	; 0x03
    15c4:	3c 81       	ldd	r19, Y+4	; 0x04
    15c6:	2a 30       	cpi	r18, 0x0A	; 10
    15c8:	31 05       	cpc	r19, r1
    15ca:	b1 f1       	breq	.+108    	; 0x1638 <KEYPAD_4x4_adjustKeyNumber+0x112>
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	9c 81       	ldd	r25, Y+4	; 0x04
    15d0:	8b 30       	cpi	r24, 0x0B	; 11
    15d2:	91 05       	cpc	r25, r1
    15d4:	a4 f5       	brge	.+104    	; 0x163e <KEYPAD_4x4_adjustKeyNumber+0x118>
    15d6:	2d c0       	rjmp	.+90     	; 0x1632 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    15d8:	2b 81       	ldd	r18, Y+3	; 0x03
    15da:	3c 81       	ldd	r19, Y+4	; 0x04
    15dc:	2e 30       	cpi	r18, 0x0E	; 14
    15de:	31 05       	cpc	r19, r1
    15e0:	b9 f1       	breq	.+110    	; 0x1650 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    15e2:	8b 81       	ldd	r24, Y+3	; 0x03
    15e4:	9c 81       	ldd	r25, Y+4	; 0x04
    15e6:	8e 30       	cpi	r24, 0x0E	; 14
    15e8:	91 05       	cpc	r25, r1
    15ea:	7c f1       	brlt	.+94     	; 0x164a <KEYPAD_4x4_adjustKeyNumber+0x124>
    15ec:	2b 81       	ldd	r18, Y+3	; 0x03
    15ee:	3c 81       	ldd	r19, Y+4	; 0x04
    15f0:	2f 30       	cpi	r18, 0x0F	; 15
    15f2:	31 05       	cpc	r19, r1
    15f4:	79 f1       	breq	.+94     	; 0x1654 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	9c 81       	ldd	r25, Y+4	; 0x04
    15fa:	80 31       	cpi	r24, 0x10	; 16
    15fc:	91 05       	cpc	r25, r1
    15fe:	69 f1       	breq	.+90     	; 0x165a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1600:	2f c0       	rjmp	.+94     	; 0x1660 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1602:	87 e0       	ldi	r24, 0x07	; 7
    1604:	89 83       	std	Y+1, r24	; 0x01
    1606:	2e c0       	rjmp	.+92     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1608:	88 e0       	ldi	r24, 0x08	; 8
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	2b c0       	rjmp	.+86     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    160e:	89 e0       	ldi	r24, 0x09	; 9
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	28 c0       	rjmp	.+80     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1614:	85 e2       	ldi	r24, 0x25	; 37
    1616:	89 83       	std	Y+1, r24	; 0x01
    1618:	25 c0       	rjmp	.+74     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    161a:	84 e0       	ldi	r24, 0x04	; 4
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	22 c0       	rjmp	.+68     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1620:	85 e0       	ldi	r24, 0x05	; 5
    1622:	89 83       	std	Y+1, r24	; 0x01
    1624:	1f c0       	rjmp	.+62     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1626:	86 e0       	ldi	r24, 0x06	; 6
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	1c c0       	rjmp	.+56     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    162c:	8a e2       	ldi	r24, 0x2A	; 42
    162e:	89 83       	std	Y+1, r24	; 0x01
    1630:	19 c0       	rjmp	.+50     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	89 83       	std	Y+1, r24	; 0x01
    1636:	16 c0       	rjmp	.+44     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1638:	82 e0       	ldi	r24, 0x02	; 2
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	13 c0       	rjmp	.+38     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    163e:	83 e0       	ldi	r24, 0x03	; 3
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	10 c0       	rjmp	.+32     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1644:	8d e2       	ldi	r24, 0x2D	; 45
    1646:	89 83       	std	Y+1, r24	; 0x01
    1648:	0d c0       	rjmp	.+26     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    164a:	8d e0       	ldi	r24, 0x0D	; 13
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	0a c0       	rjmp	.+20     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1650:	19 82       	std	Y+1, r1	; 0x01
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1654:	8d e3       	ldi	r24, 0x3D	; 61
    1656:	89 83       	std	Y+1, r24	; 0x01
    1658:	05 c0       	rjmp	.+10     	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    165a:	8b e2       	ldi	r24, 0x2B	; 43
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1664:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1674:	df 93       	push	r29
    1676:	cf 93       	push	r28
    1678:	cd b7       	in	r28, 0x3d	; 61
    167a:	de b7       	in	r29, 0x3e	; 62
    167c:	2e 97       	sbiw	r28, 0x0e	; 14
    167e:	0f b6       	in	r0, 0x3f	; 63
    1680:	f8 94       	cli
    1682:	de bf       	out	0x3e, r29	; 62
    1684:	0f be       	out	0x3f, r0	; 63
    1686:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	0e 94 72 06 	call	0xce4	; 0xce4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	41 e0       	ldi	r20, 0x01	; 1
    1698:	0e 94 72 06 	call	0xce4	; 0xce4 <GPIO_setupPinDirection>
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	a0 ea       	ldi	r26, 0xA0	; 160
    16a2:	b1 e4       	ldi	r27, 0x41	; 65
    16a4:	8b 87       	std	Y+11, r24	; 0x0b
    16a6:	9c 87       	std	Y+12, r25	; 0x0c
    16a8:	ad 87       	std	Y+13, r26	; 0x0d
    16aa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ac:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ae:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	4a ef       	ldi	r20, 0xFA	; 250
    16ba:	54 e4       	ldi	r21, 0x44	; 68
    16bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	8f 83       	std	Y+7, r24	; 0x07
    16c6:	98 87       	std	Y+8, r25	; 0x08
    16c8:	a9 87       	std	Y+9, r26	; 0x09
    16ca:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16cc:	6f 81       	ldd	r22, Y+7	; 0x07
    16ce:	78 85       	ldd	r23, Y+8	; 0x08
    16d0:	89 85       	ldd	r24, Y+9	; 0x09
    16d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d4:	20 e0       	ldi	r18, 0x00	; 0
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	40 e8       	ldi	r20, 0x80	; 128
    16da:	5f e3       	ldi	r21, 0x3F	; 63
    16dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e0:	88 23       	and	r24, r24
    16e2:	2c f4       	brge	.+10     	; 0x16ee <LCD_init+0x7a>
		__ticks = 1;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	8d 83       	std	Y+5, r24	; 0x05
    16ec:	3f c0       	rjmp	.+126    	; 0x176c <LCD_init+0xf8>
	else if (__tmp > 65535)
    16ee:	6f 81       	ldd	r22, Y+7	; 0x07
    16f0:	78 85       	ldd	r23, Y+8	; 0x08
    16f2:	89 85       	ldd	r24, Y+9	; 0x09
    16f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f6:	20 e0       	ldi	r18, 0x00	; 0
    16f8:	3f ef       	ldi	r19, 0xFF	; 255
    16fa:	4f e7       	ldi	r20, 0x7F	; 127
    16fc:	57 e4       	ldi	r21, 0x47	; 71
    16fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1702:	18 16       	cp	r1, r24
    1704:	4c f5       	brge	.+82     	; 0x1758 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1706:	6b 85       	ldd	r22, Y+11	; 0x0b
    1708:	7c 85       	ldd	r23, Y+12	; 0x0c
    170a:	8d 85       	ldd	r24, Y+13	; 0x0d
    170c:	9e 85       	ldd	r25, Y+14	; 0x0e
    170e:	20 e0       	ldi	r18, 0x00	; 0
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e2       	ldi	r20, 0x20	; 32
    1714:	51 e4       	ldi	r21, 0x41	; 65
    1716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171a:	dc 01       	movw	r26, r24
    171c:	cb 01       	movw	r24, r22
    171e:	bc 01       	movw	r22, r24
    1720:	cd 01       	movw	r24, r26
    1722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	9e 83       	std	Y+6, r25	; 0x06
    172c:	8d 83       	std	Y+5, r24	; 0x05
    172e:	0f c0       	rjmp	.+30     	; 0x174e <LCD_init+0xda>
    1730:	88 ec       	ldi	r24, 0xC8	; 200
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	9c 83       	std	Y+4, r25	; 0x04
    1736:	8b 83       	std	Y+3, r24	; 0x03
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	9c 81       	ldd	r25, Y+4	; 0x04
    173c:	01 97       	sbiw	r24, 0x01	; 1
    173e:	f1 f7       	brne	.-4      	; 0x173c <LCD_init+0xc8>
    1740:	9c 83       	std	Y+4, r25	; 0x04
    1742:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1744:	8d 81       	ldd	r24, Y+5	; 0x05
    1746:	9e 81       	ldd	r25, Y+6	; 0x06
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	9e 83       	std	Y+6, r25	; 0x06
    174c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    174e:	8d 81       	ldd	r24, Y+5	; 0x05
    1750:	9e 81       	ldd	r25, Y+6	; 0x06
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	69 f7       	brne	.-38     	; 0x1730 <LCD_init+0xbc>
    1756:	14 c0       	rjmp	.+40     	; 0x1780 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1758:	6f 81       	ldd	r22, Y+7	; 0x07
    175a:	78 85       	ldd	r23, Y+8	; 0x08
    175c:	89 85       	ldd	r24, Y+9	; 0x09
    175e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1764:	dc 01       	movw	r26, r24
    1766:	cb 01       	movw	r24, r22
    1768:	9e 83       	std	Y+6, r25	; 0x06
    176a:	8d 83       	std	Y+5, r24	; 0x05
    176c:	8d 81       	ldd	r24, Y+5	; 0x05
    176e:	9e 81       	ldd	r25, Y+6	; 0x06
    1770:	9a 83       	std	Y+2, r25	; 0x02
    1772:	89 83       	std	Y+1, r24	; 0x01
    1774:	89 81       	ldd	r24, Y+1	; 0x01
    1776:	9a 81       	ldd	r25, Y+2	; 0x02
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	f1 f7       	brne	.-4      	; 0x1778 <LCD_init+0x104>
    177c:	9a 83       	std	Y+2, r25	; 0x02
    177e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	6f ef       	ldi	r22, 0xFF	; 255
    1784:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1788:	88 e3       	ldi	r24, 0x38	; 56
    178a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    178e:	8c e0       	ldi	r24, 0x0C	; 12
    1790:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_sendCommand>
}
    179a:	2e 96       	adiw	r28, 0x0e	; 14
    179c:	0f b6       	in	r0, 0x3f	; 63
    179e:	f8 94       	cli
    17a0:	de bf       	out	0x3e, r29	; 62
    17a2:	0f be       	out	0x3f, r0	; 63
    17a4:	cd bf       	out	0x3d, r28	; 61
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	e9 97       	sbiw	r28, 0x39	; 57
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	f8 94       	cli
    17ba:	de bf       	out	0x3e, r29	; 62
    17bc:	0f be       	out	0x3f, r0	; 63
    17be:	cd bf       	out	0x3d, r28	; 61
    17c0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	61 e0       	ldi	r22, 0x01	; 1
    17c6:	40 e0       	ldi	r20, 0x00	; 0
    17c8:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_writePin>
    17cc:	80 e0       	ldi	r24, 0x00	; 0
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	a0 e8       	ldi	r26, 0x80	; 128
    17d2:	bf e3       	ldi	r27, 0x3F	; 63
    17d4:	8d ab       	std	Y+53, r24	; 0x35
    17d6:	9e ab       	std	Y+54, r25	; 0x36
    17d8:	af ab       	std	Y+55, r26	; 0x37
    17da:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17dc:	6d a9       	ldd	r22, Y+53	; 0x35
    17de:	7e a9       	ldd	r23, Y+54	; 0x36
    17e0:	8f a9       	ldd	r24, Y+55	; 0x37
    17e2:	98 ad       	ldd	r25, Y+56	; 0x38
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	4a ef       	ldi	r20, 0xFA	; 250
    17ea:	54 e4       	ldi	r21, 0x44	; 68
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	89 ab       	std	Y+49, r24	; 0x31
    17f6:	9a ab       	std	Y+50, r25	; 0x32
    17f8:	ab ab       	std	Y+51, r26	; 0x33
    17fa:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    17fc:	69 a9       	ldd	r22, Y+49	; 0x31
    17fe:	7a a9       	ldd	r23, Y+50	; 0x32
    1800:	8b a9       	ldd	r24, Y+51	; 0x33
    1802:	9c a9       	ldd	r25, Y+52	; 0x34
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	30 e0       	ldi	r19, 0x00	; 0
    1808:	40 e8       	ldi	r20, 0x80	; 128
    180a:	5f e3       	ldi	r21, 0x3F	; 63
    180c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1810:	88 23       	and	r24, r24
    1812:	2c f4       	brge	.+10     	; 0x181e <LCD_sendCommand+0x72>
		__ticks = 1;
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	98 ab       	std	Y+48, r25	; 0x30
    181a:	8f a7       	std	Y+47, r24	; 0x2f
    181c:	3f c0       	rjmp	.+126    	; 0x189c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    181e:	69 a9       	ldd	r22, Y+49	; 0x31
    1820:	7a a9       	ldd	r23, Y+50	; 0x32
    1822:	8b a9       	ldd	r24, Y+51	; 0x33
    1824:	9c a9       	ldd	r25, Y+52	; 0x34
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	3f ef       	ldi	r19, 0xFF	; 255
    182a:	4f e7       	ldi	r20, 0x7F	; 127
    182c:	57 e4       	ldi	r21, 0x47	; 71
    182e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1832:	18 16       	cp	r1, r24
    1834:	4c f5       	brge	.+82     	; 0x1888 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1836:	6d a9       	ldd	r22, Y+53	; 0x35
    1838:	7e a9       	ldd	r23, Y+54	; 0x36
    183a:	8f a9       	ldd	r24, Y+55	; 0x37
    183c:	98 ad       	ldd	r25, Y+56	; 0x38
    183e:	20 e0       	ldi	r18, 0x00	; 0
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	40 e2       	ldi	r20, 0x20	; 32
    1844:	51 e4       	ldi	r21, 0x41	; 65
    1846:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    184a:	dc 01       	movw	r26, r24
    184c:	cb 01       	movw	r24, r22
    184e:	bc 01       	movw	r22, r24
    1850:	cd 01       	movw	r24, r26
    1852:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	98 ab       	std	Y+48, r25	; 0x30
    185c:	8f a7       	std	Y+47, r24	; 0x2f
    185e:	0f c0       	rjmp	.+30     	; 0x187e <LCD_sendCommand+0xd2>
    1860:	88 ec       	ldi	r24, 0xC8	; 200
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	9e a7       	std	Y+46, r25	; 0x2e
    1866:	8d a7       	std	Y+45, r24	; 0x2d
    1868:	8d a5       	ldd	r24, Y+45	; 0x2d
    186a:	9e a5       	ldd	r25, Y+46	; 0x2e
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD_sendCommand+0xc0>
    1870:	9e a7       	std	Y+46, r25	; 0x2e
    1872:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1874:	8f a5       	ldd	r24, Y+47	; 0x2f
    1876:	98 a9       	ldd	r25, Y+48	; 0x30
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	98 ab       	std	Y+48, r25	; 0x30
    187c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    187e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1880:	98 a9       	ldd	r25, Y+48	; 0x30
    1882:	00 97       	sbiw	r24, 0x00	; 0
    1884:	69 f7       	brne	.-38     	; 0x1860 <LCD_sendCommand+0xb4>
    1886:	14 c0       	rjmp	.+40     	; 0x18b0 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1888:	69 a9       	ldd	r22, Y+49	; 0x31
    188a:	7a a9       	ldd	r23, Y+50	; 0x32
    188c:	8b a9       	ldd	r24, Y+51	; 0x33
    188e:	9c a9       	ldd	r25, Y+52	; 0x34
    1890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	98 ab       	std	Y+48, r25	; 0x30
    189a:	8f a7       	std	Y+47, r24	; 0x2f
    189c:	8f a5       	ldd	r24, Y+47	; 0x2f
    189e:	98 a9       	ldd	r25, Y+48	; 0x30
    18a0:	9c a7       	std	Y+44, r25	; 0x2c
    18a2:	8b a7       	std	Y+43, r24	; 0x2b
    18a4:	8b a5       	ldd	r24, Y+43	; 0x2b
    18a6:	9c a5       	ldd	r25, Y+44	; 0x2c
    18a8:	01 97       	sbiw	r24, 0x01	; 1
    18aa:	f1 f7       	brne	.-4      	; 0x18a8 <LCD_sendCommand+0xfc>
    18ac:	9c a7       	std	Y+44, r25	; 0x2c
    18ae:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	41 e0       	ldi	r20, 0x01	; 1
    18b6:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_writePin>
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a0 e8       	ldi	r26, 0x80	; 128
    18c0:	bf e3       	ldi	r27, 0x3F	; 63
    18c2:	8f a3       	std	Y+39, r24	; 0x27
    18c4:	98 a7       	std	Y+40, r25	; 0x28
    18c6:	a9 a7       	std	Y+41, r26	; 0x29
    18c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18ca:	6f a1       	ldd	r22, Y+39	; 0x27
    18cc:	78 a5       	ldd	r23, Y+40	; 0x28
    18ce:	89 a5       	ldd	r24, Y+41	; 0x29
    18d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	4a ef       	ldi	r20, 0xFA	; 250
    18d8:	54 e4       	ldi	r21, 0x44	; 68
    18da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18de:	dc 01       	movw	r26, r24
    18e0:	cb 01       	movw	r24, r22
    18e2:	8b a3       	std	Y+35, r24	; 0x23
    18e4:	9c a3       	std	Y+36, r25	; 0x24
    18e6:	ad a3       	std	Y+37, r26	; 0x25
    18e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18ea:	6b a1       	ldd	r22, Y+35	; 0x23
    18ec:	7c a1       	ldd	r23, Y+36	; 0x24
    18ee:	8d a1       	ldd	r24, Y+37	; 0x25
    18f0:	9e a1       	ldd	r25, Y+38	; 0x26
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18fe:	88 23       	and	r24, r24
    1900:	2c f4       	brge	.+10     	; 0x190c <LCD_sendCommand+0x160>
		__ticks = 1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	9a a3       	std	Y+34, r25	; 0x22
    1908:	89 a3       	std	Y+33, r24	; 0x21
    190a:	3f c0       	rjmp	.+126    	; 0x198a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    190c:	6b a1       	ldd	r22, Y+35	; 0x23
    190e:	7c a1       	ldd	r23, Y+36	; 0x24
    1910:	8d a1       	ldd	r24, Y+37	; 0x25
    1912:	9e a1       	ldd	r25, Y+38	; 0x26
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	3f ef       	ldi	r19, 0xFF	; 255
    1918:	4f e7       	ldi	r20, 0x7F	; 127
    191a:	57 e4       	ldi	r21, 0x47	; 71
    191c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1920:	18 16       	cp	r1, r24
    1922:	4c f5       	brge	.+82     	; 0x1976 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1924:	6f a1       	ldd	r22, Y+39	; 0x27
    1926:	78 a5       	ldd	r23, Y+40	; 0x28
    1928:	89 a5       	ldd	r24, Y+41	; 0x29
    192a:	9a a5       	ldd	r25, Y+42	; 0x2a
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e2       	ldi	r20, 0x20	; 32
    1932:	51 e4       	ldi	r21, 0x41	; 65
    1934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	bc 01       	movw	r22, r24
    193e:	cd 01       	movw	r24, r26
    1940:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1944:	dc 01       	movw	r26, r24
    1946:	cb 01       	movw	r24, r22
    1948:	9a a3       	std	Y+34, r25	; 0x22
    194a:	89 a3       	std	Y+33, r24	; 0x21
    194c:	0f c0       	rjmp	.+30     	; 0x196c <LCD_sendCommand+0x1c0>
    194e:	88 ec       	ldi	r24, 0xC8	; 200
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	98 a3       	std	Y+32, r25	; 0x20
    1954:	8f 8f       	std	Y+31, r24	; 0x1f
    1956:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1958:	98 a1       	ldd	r25, Y+32	; 0x20
    195a:	01 97       	sbiw	r24, 0x01	; 1
    195c:	f1 f7       	brne	.-4      	; 0x195a <LCD_sendCommand+0x1ae>
    195e:	98 a3       	std	Y+32, r25	; 0x20
    1960:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1962:	89 a1       	ldd	r24, Y+33	; 0x21
    1964:	9a a1       	ldd	r25, Y+34	; 0x22
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	9a a3       	std	Y+34, r25	; 0x22
    196a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    196c:	89 a1       	ldd	r24, Y+33	; 0x21
    196e:	9a a1       	ldd	r25, Y+34	; 0x22
    1970:	00 97       	sbiw	r24, 0x00	; 0
    1972:	69 f7       	brne	.-38     	; 0x194e <LCD_sendCommand+0x1a2>
    1974:	14 c0       	rjmp	.+40     	; 0x199e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1976:	6b a1       	ldd	r22, Y+35	; 0x23
    1978:	7c a1       	ldd	r23, Y+36	; 0x24
    197a:	8d a1       	ldd	r24, Y+37	; 0x25
    197c:	9e a1       	ldd	r25, Y+38	; 0x26
    197e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1982:	dc 01       	movw	r26, r24
    1984:	cb 01       	movw	r24, r22
    1986:	9a a3       	std	Y+34, r25	; 0x22
    1988:	89 a3       	std	Y+33, r24	; 0x21
    198a:	89 a1       	ldd	r24, Y+33	; 0x21
    198c:	9a a1       	ldd	r25, Y+34	; 0x22
    198e:	9e 8f       	std	Y+30, r25	; 0x1e
    1990:	8d 8f       	std	Y+29, r24	; 0x1d
    1992:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1994:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1996:	01 97       	sbiw	r24, 0x01	; 1
    1998:	f1 f7       	brne	.-4      	; 0x1996 <LCD_sendCommand+0x1ea>
    199a:	9e 8f       	std	Y+30, r25	; 0x1e
    199c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	69 ad       	ldd	r22, Y+57	; 0x39
    19a2:	0e 94 27 09 	call	0x124e	; 0x124e <GPIO_writePort>
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	a0 e8       	ldi	r26, 0x80	; 128
    19ac:	bf e3       	ldi	r27, 0x3F	; 63
    19ae:	89 8f       	std	Y+25, r24	; 0x19
    19b0:	9a 8f       	std	Y+26, r25	; 0x1a
    19b2:	ab 8f       	std	Y+27, r26	; 0x1b
    19b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b6:	69 8d       	ldd	r22, Y+25	; 0x19
    19b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	4a ef       	ldi	r20, 0xFA	; 250
    19c4:	54 e4       	ldi	r21, 0x44	; 68
    19c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ca:	dc 01       	movw	r26, r24
    19cc:	cb 01       	movw	r24, r22
    19ce:	8d 8b       	std	Y+21, r24	; 0x15
    19d0:	9e 8b       	std	Y+22, r25	; 0x16
    19d2:	af 8b       	std	Y+23, r26	; 0x17
    19d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19d6:	6d 89       	ldd	r22, Y+21	; 0x15
    19d8:	7e 89       	ldd	r23, Y+22	; 0x16
    19da:	8f 89       	ldd	r24, Y+23	; 0x17
    19dc:	98 8d       	ldd	r25, Y+24	; 0x18
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 e8       	ldi	r20, 0x80	; 128
    19e4:	5f e3       	ldi	r21, 0x3F	; 63
    19e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ea:	88 23       	and	r24, r24
    19ec:	2c f4       	brge	.+10     	; 0x19f8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    19ee:	81 e0       	ldi	r24, 0x01	; 1
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	9c 8b       	std	Y+20, r25	; 0x14
    19f4:	8b 8b       	std	Y+19, r24	; 0x13
    19f6:	3f c0       	rjmp	.+126    	; 0x1a76 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    19f8:	6d 89       	ldd	r22, Y+21	; 0x15
    19fa:	7e 89       	ldd	r23, Y+22	; 0x16
    19fc:	8f 89       	ldd	r24, Y+23	; 0x17
    19fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	3f ef       	ldi	r19, 0xFF	; 255
    1a04:	4f e7       	ldi	r20, 0x7F	; 127
    1a06:	57 e4       	ldi	r21, 0x47	; 71
    1a08:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a0c:	18 16       	cp	r1, r24
    1a0e:	4c f5       	brge	.+82     	; 0x1a62 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a10:	69 8d       	ldd	r22, Y+25	; 0x19
    1a12:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a14:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a16:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a18:	20 e0       	ldi	r18, 0x00	; 0
    1a1a:	30 e0       	ldi	r19, 0x00	; 0
    1a1c:	40 e2       	ldi	r20, 0x20	; 32
    1a1e:	51 e4       	ldi	r21, 0x41	; 65
    1a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	bc 01       	movw	r22, r24
    1a2a:	cd 01       	movw	r24, r26
    1a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	9c 8b       	std	Y+20, r25	; 0x14
    1a36:	8b 8b       	std	Y+19, r24	; 0x13
    1a38:	0f c0       	rjmp	.+30     	; 0x1a58 <LCD_sendCommand+0x2ac>
    1a3a:	88 ec       	ldi	r24, 0xC8	; 200
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	9a 8b       	std	Y+18, r25	; 0x12
    1a40:	89 8b       	std	Y+17, r24	; 0x11
    1a42:	89 89       	ldd	r24, Y+17	; 0x11
    1a44:	9a 89       	ldd	r25, Y+18	; 0x12
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <LCD_sendCommand+0x29a>
    1a4a:	9a 8b       	std	Y+18, r25	; 0x12
    1a4c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a50:	9c 89       	ldd	r25, Y+20	; 0x14
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	9c 8b       	std	Y+20, r25	; 0x14
    1a56:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a58:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	69 f7       	brne	.-38     	; 0x1a3a <LCD_sendCommand+0x28e>
    1a60:	14 c0       	rjmp	.+40     	; 0x1a8a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a62:	6d 89       	ldd	r22, Y+21	; 0x15
    1a64:	7e 89       	ldd	r23, Y+22	; 0x16
    1a66:	8f 89       	ldd	r24, Y+23	; 0x17
    1a68:	98 8d       	ldd	r25, Y+24	; 0x18
    1a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6e:	dc 01       	movw	r26, r24
    1a70:	cb 01       	movw	r24, r22
    1a72:	9c 8b       	std	Y+20, r25	; 0x14
    1a74:	8b 8b       	std	Y+19, r24	; 0x13
    1a76:	8b 89       	ldd	r24, Y+19	; 0x13
    1a78:	9c 89       	ldd	r25, Y+20	; 0x14
    1a7a:	98 8b       	std	Y+16, r25	; 0x10
    1a7c:	8f 87       	std	Y+15, r24	; 0x0f
    1a7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a80:	98 89       	ldd	r25, Y+16	; 0x10
    1a82:	01 97       	sbiw	r24, 0x01	; 1
    1a84:	f1 f7       	brne	.-4      	; 0x1a82 <LCD_sendCommand+0x2d6>
    1a86:	98 8b       	std	Y+16, r25	; 0x10
    1a88:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	60 e0       	ldi	r22, 0x00	; 0
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_writePin>
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a0 e8       	ldi	r26, 0x80	; 128
    1a9a:	bf e3       	ldi	r27, 0x3F	; 63
    1a9c:	8b 87       	std	Y+11, r24	; 0x0b
    1a9e:	9c 87       	std	Y+12, r25	; 0x0c
    1aa0:	ad 87       	std	Y+13, r26	; 0x0d
    1aa2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1aa6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1aa8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aaa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a ef       	ldi	r20, 0xFA	; 250
    1ab2:	54 e4       	ldi	r21, 0x44	; 68
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	8f 83       	std	Y+7, r24	; 0x07
    1abe:	98 87       	std	Y+8, r25	; 0x08
    1ac0:	a9 87       	std	Y+9, r26	; 0x09
    1ac2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac6:	78 85       	ldd	r23, Y+8	; 0x08
    1ac8:	89 85       	ldd	r24, Y+9	; 0x09
    1aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e8       	ldi	r20, 0x80	; 128
    1ad2:	5f e3       	ldi	r21, 0x3F	; 63
    1ad4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad8:	88 23       	and	r24, r24
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1adc:	81 e0       	ldi	r24, 0x01	; 1
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	9e 83       	std	Y+6, r25	; 0x06
    1ae2:	8d 83       	std	Y+5, r24	; 0x05
    1ae4:	3f c0       	rjmp	.+126    	; 0x1b64 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1ae6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae8:	78 85       	ldd	r23, Y+8	; 0x08
    1aea:	89 85       	ldd	r24, Y+9	; 0x09
    1aec:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aee:	20 e0       	ldi	r18, 0x00	; 0
    1af0:	3f ef       	ldi	r19, 0xFF	; 255
    1af2:	4f e7       	ldi	r20, 0x7F	; 127
    1af4:	57 e4       	ldi	r21, 0x47	; 71
    1af6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1afa:	18 16       	cp	r1, r24
    1afc:	4c f5       	brge	.+82     	; 0x1b50 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b00:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b02:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b04:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	40 e2       	ldi	r20, 0x20	; 32
    1b0c:	51 e4       	ldi	r21, 0x41	; 65
    1b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b12:	dc 01       	movw	r26, r24
    1b14:	cb 01       	movw	r24, r22
    1b16:	bc 01       	movw	r22, r24
    1b18:	cd 01       	movw	r24, r26
    1b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1e:	dc 01       	movw	r26, r24
    1b20:	cb 01       	movw	r24, r22
    1b22:	9e 83       	std	Y+6, r25	; 0x06
    1b24:	8d 83       	std	Y+5, r24	; 0x05
    1b26:	0f c0       	rjmp	.+30     	; 0x1b46 <LCD_sendCommand+0x39a>
    1b28:	88 ec       	ldi	r24, 0xC8	; 200
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	9c 83       	std	Y+4, r25	; 0x04
    1b2e:	8b 83       	std	Y+3, r24	; 0x03
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	01 97       	sbiw	r24, 0x01	; 1
    1b36:	f1 f7       	brne	.-4      	; 0x1b34 <LCD_sendCommand+0x388>
    1b38:	9c 83       	std	Y+4, r25	; 0x04
    1b3a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b40:	01 97       	sbiw	r24, 0x01	; 1
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	69 f7       	brne	.-38     	; 0x1b28 <LCD_sendCommand+0x37c>
    1b4e:	14 c0       	rjmp	.+40     	; 0x1b78 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b50:	6f 81       	ldd	r22, Y+7	; 0x07
    1b52:	78 85       	ldd	r23, Y+8	; 0x08
    1b54:	89 85       	ldd	r24, Y+9	; 0x09
    1b56:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b5c:	dc 01       	movw	r26, r24
    1b5e:	cb 01       	movw	r24, r22
    1b60:	9e 83       	std	Y+6, r25	; 0x06
    1b62:	8d 83       	std	Y+5, r24	; 0x05
    1b64:	8d 81       	ldd	r24, Y+5	; 0x05
    1b66:	9e 81       	ldd	r25, Y+6	; 0x06
    1b68:	9a 83       	std	Y+2, r25	; 0x02
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	89 81       	ldd	r24, Y+1	; 0x01
    1b6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	f1 f7       	brne	.-4      	; 0x1b70 <LCD_sendCommand+0x3c4>
    1b74:	9a 83       	std	Y+2, r25	; 0x02
    1b76:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1b78:	e9 96       	adiw	r28, 0x39	; 57
    1b7a:	0f b6       	in	r0, 0x3f	; 63
    1b7c:	f8 94       	cli
    1b7e:	de bf       	out	0x3e, r29	; 62
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cd bf       	out	0x3d, r28	; 61
    1b84:	cf 91       	pop	r28
    1b86:	df 91       	pop	r29
    1b88:	08 95       	ret

00001b8a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1b8a:	df 93       	push	r29
    1b8c:	cf 93       	push	r28
    1b8e:	cd b7       	in	r28, 0x3d	; 61
    1b90:	de b7       	in	r29, 0x3e	; 62
    1b92:	e9 97       	sbiw	r28, 0x39	; 57
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	de bf       	out	0x3e, r29	; 62
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cd bf       	out	0x3d, r28	; 61
    1b9e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1ba0:	81 e0       	ldi	r24, 0x01	; 1
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	41 e0       	ldi	r20, 0x01	; 1
    1ba6:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_writePin>
    1baa:	80 e0       	ldi	r24, 0x00	; 0
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	a0 e8       	ldi	r26, 0x80	; 128
    1bb0:	bf e3       	ldi	r27, 0x3F	; 63
    1bb2:	8d ab       	std	Y+53, r24	; 0x35
    1bb4:	9e ab       	std	Y+54, r25	; 0x36
    1bb6:	af ab       	std	Y+55, r26	; 0x37
    1bb8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bba:	6d a9       	ldd	r22, Y+53	; 0x35
    1bbc:	7e a9       	ldd	r23, Y+54	; 0x36
    1bbe:	8f a9       	ldd	r24, Y+55	; 0x37
    1bc0:	98 ad       	ldd	r25, Y+56	; 0x38
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	4a ef       	ldi	r20, 0xFA	; 250
    1bc8:	54 e4       	ldi	r21, 0x44	; 68
    1bca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bce:	dc 01       	movw	r26, r24
    1bd0:	cb 01       	movw	r24, r22
    1bd2:	89 ab       	std	Y+49, r24	; 0x31
    1bd4:	9a ab       	std	Y+50, r25	; 0x32
    1bd6:	ab ab       	std	Y+51, r26	; 0x33
    1bd8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bda:	69 a9       	ldd	r22, Y+49	; 0x31
    1bdc:	7a a9       	ldd	r23, Y+50	; 0x32
    1bde:	8b a9       	ldd	r24, Y+51	; 0x33
    1be0:	9c a9       	ldd	r25, Y+52	; 0x34
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e8       	ldi	r20, 0x80	; 128
    1be8:	5f e3       	ldi	r21, 0x3F	; 63
    1bea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bee:	88 23       	and	r24, r24
    1bf0:	2c f4       	brge	.+10     	; 0x1bfc <LCD_displayCharacter+0x72>
		__ticks = 1;
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	90 e0       	ldi	r25, 0x00	; 0
    1bf6:	98 ab       	std	Y+48, r25	; 0x30
    1bf8:	8f a7       	std	Y+47, r24	; 0x2f
    1bfa:	3f c0       	rjmp	.+126    	; 0x1c7a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    1bfc:	69 a9       	ldd	r22, Y+49	; 0x31
    1bfe:	7a a9       	ldd	r23, Y+50	; 0x32
    1c00:	8b a9       	ldd	r24, Y+51	; 0x33
    1c02:	9c a9       	ldd	r25, Y+52	; 0x34
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	3f ef       	ldi	r19, 0xFF	; 255
    1c08:	4f e7       	ldi	r20, 0x7F	; 127
    1c0a:	57 e4       	ldi	r21, 0x47	; 71
    1c0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1c10:	18 16       	cp	r1, r24
    1c12:	4c f5       	brge	.+82     	; 0x1c66 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c14:	6d a9       	ldd	r22, Y+53	; 0x35
    1c16:	7e a9       	ldd	r23, Y+54	; 0x36
    1c18:	8f a9       	ldd	r24, Y+55	; 0x37
    1c1a:	98 ad       	ldd	r25, Y+56	; 0x38
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	40 e2       	ldi	r20, 0x20	; 32
    1c22:	51 e4       	ldi	r21, 0x41	; 65
    1c24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	bc 01       	movw	r22, r24
    1c2e:	cd 01       	movw	r24, r26
    1c30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c34:	dc 01       	movw	r26, r24
    1c36:	cb 01       	movw	r24, r22
    1c38:	98 ab       	std	Y+48, r25	; 0x30
    1c3a:	8f a7       	std	Y+47, r24	; 0x2f
    1c3c:	0f c0       	rjmp	.+30     	; 0x1c5c <LCD_displayCharacter+0xd2>
    1c3e:	88 ec       	ldi	r24, 0xC8	; 200
    1c40:	90 e0       	ldi	r25, 0x00	; 0
    1c42:	9e a7       	std	Y+46, r25	; 0x2e
    1c44:	8d a7       	std	Y+45, r24	; 0x2d
    1c46:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c48:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	f1 f7       	brne	.-4      	; 0x1c4a <LCD_displayCharacter+0xc0>
    1c4e:	9e a7       	std	Y+46, r25	; 0x2e
    1c50:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c52:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c54:	98 a9       	ldd	r25, Y+48	; 0x30
    1c56:	01 97       	sbiw	r24, 0x01	; 1
    1c58:	98 ab       	std	Y+48, r25	; 0x30
    1c5a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c5e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	69 f7       	brne	.-38     	; 0x1c3e <LCD_displayCharacter+0xb4>
    1c64:	14 c0       	rjmp	.+40     	; 0x1c8e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c66:	69 a9       	ldd	r22, Y+49	; 0x31
    1c68:	7a a9       	ldd	r23, Y+50	; 0x32
    1c6a:	8b a9       	ldd	r24, Y+51	; 0x33
    1c6c:	9c a9       	ldd	r25, Y+52	; 0x34
    1c6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c72:	dc 01       	movw	r26, r24
    1c74:	cb 01       	movw	r24, r22
    1c76:	98 ab       	std	Y+48, r25	; 0x30
    1c78:	8f a7       	std	Y+47, r24	; 0x2f
    1c7a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c7c:	98 a9       	ldd	r25, Y+48	; 0x30
    1c7e:	9c a7       	std	Y+44, r25	; 0x2c
    1c80:	8b a7       	std	Y+43, r24	; 0x2b
    1c82:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c84:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	f1 f7       	brne	.-4      	; 0x1c86 <LCD_displayCharacter+0xfc>
    1c8a:	9c a7       	std	Y+44, r25	; 0x2c
    1c8c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	41 e0       	ldi	r20, 0x01	; 1
    1c94:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_writePin>
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	a0 e8       	ldi	r26, 0x80	; 128
    1c9e:	bf e3       	ldi	r27, 0x3F	; 63
    1ca0:	8f a3       	std	Y+39, r24	; 0x27
    1ca2:	98 a7       	std	Y+40, r25	; 0x28
    1ca4:	a9 a7       	std	Y+41, r26	; 0x29
    1ca6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca8:	6f a1       	ldd	r22, Y+39	; 0x27
    1caa:	78 a5       	ldd	r23, Y+40	; 0x28
    1cac:	89 a5       	ldd	r24, Y+41	; 0x29
    1cae:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	30 e0       	ldi	r19, 0x00	; 0
    1cb4:	4a ef       	ldi	r20, 0xFA	; 250
    1cb6:	54 e4       	ldi	r21, 0x44	; 68
    1cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cbc:	dc 01       	movw	r26, r24
    1cbe:	cb 01       	movw	r24, r22
    1cc0:	8b a3       	std	Y+35, r24	; 0x23
    1cc2:	9c a3       	std	Y+36, r25	; 0x24
    1cc4:	ad a3       	std	Y+37, r26	; 0x25
    1cc6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cc8:	6b a1       	ldd	r22, Y+35	; 0x23
    1cca:	7c a1       	ldd	r23, Y+36	; 0x24
    1ccc:	8d a1       	ldd	r24, Y+37	; 0x25
    1cce:	9e a1       	ldd	r25, Y+38	; 0x26
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e8       	ldi	r20, 0x80	; 128
    1cd6:	5f e3       	ldi	r21, 0x3F	; 63
    1cd8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cdc:	88 23       	and	r24, r24
    1cde:	2c f4       	brge	.+10     	; 0x1cea <LCD_displayCharacter+0x160>
		__ticks = 1;
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9a a3       	std	Y+34, r25	; 0x22
    1ce6:	89 a3       	std	Y+33, r24	; 0x21
    1ce8:	3f c0       	rjmp	.+126    	; 0x1d68 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    1cea:	6b a1       	ldd	r22, Y+35	; 0x23
    1cec:	7c a1       	ldd	r23, Y+36	; 0x24
    1cee:	8d a1       	ldd	r24, Y+37	; 0x25
    1cf0:	9e a1       	ldd	r25, Y+38	; 0x26
    1cf2:	20 e0       	ldi	r18, 0x00	; 0
    1cf4:	3f ef       	ldi	r19, 0xFF	; 255
    1cf6:	4f e7       	ldi	r20, 0x7F	; 127
    1cf8:	57 e4       	ldi	r21, 0x47	; 71
    1cfa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cfe:	18 16       	cp	r1, r24
    1d00:	4c f5       	brge	.+82     	; 0x1d54 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d02:	6f a1       	ldd	r22, Y+39	; 0x27
    1d04:	78 a5       	ldd	r23, Y+40	; 0x28
    1d06:	89 a5       	ldd	r24, Y+41	; 0x29
    1d08:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e2       	ldi	r20, 0x20	; 32
    1d10:	51 e4       	ldi	r21, 0x41	; 65
    1d12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	bc 01       	movw	r22, r24
    1d1c:	cd 01       	movw	r24, r26
    1d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d22:	dc 01       	movw	r26, r24
    1d24:	cb 01       	movw	r24, r22
    1d26:	9a a3       	std	Y+34, r25	; 0x22
    1d28:	89 a3       	std	Y+33, r24	; 0x21
    1d2a:	0f c0       	rjmp	.+30     	; 0x1d4a <LCD_displayCharacter+0x1c0>
    1d2c:	88 ec       	ldi	r24, 0xC8	; 200
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	98 a3       	std	Y+32, r25	; 0x20
    1d32:	8f 8f       	std	Y+31, r24	; 0x1f
    1d34:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d36:	98 a1       	ldd	r25, Y+32	; 0x20
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <LCD_displayCharacter+0x1ae>
    1d3c:	98 a3       	std	Y+32, r25	; 0x20
    1d3e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d40:	89 a1       	ldd	r24, Y+33	; 0x21
    1d42:	9a a1       	ldd	r25, Y+34	; 0x22
    1d44:	01 97       	sbiw	r24, 0x01	; 1
    1d46:	9a a3       	std	Y+34, r25	; 0x22
    1d48:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d4a:	89 a1       	ldd	r24, Y+33	; 0x21
    1d4c:	9a a1       	ldd	r25, Y+34	; 0x22
    1d4e:	00 97       	sbiw	r24, 0x00	; 0
    1d50:	69 f7       	brne	.-38     	; 0x1d2c <LCD_displayCharacter+0x1a2>
    1d52:	14 c0       	rjmp	.+40     	; 0x1d7c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d54:	6b a1       	ldd	r22, Y+35	; 0x23
    1d56:	7c a1       	ldd	r23, Y+36	; 0x24
    1d58:	8d a1       	ldd	r24, Y+37	; 0x25
    1d5a:	9e a1       	ldd	r25, Y+38	; 0x26
    1d5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d60:	dc 01       	movw	r26, r24
    1d62:	cb 01       	movw	r24, r22
    1d64:	9a a3       	std	Y+34, r25	; 0x22
    1d66:	89 a3       	std	Y+33, r24	; 0x21
    1d68:	89 a1       	ldd	r24, Y+33	; 0x21
    1d6a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d6c:	9e 8f       	std	Y+30, r25	; 0x1e
    1d6e:	8d 8f       	std	Y+29, r24	; 0x1d
    1d70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d72:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d74:	01 97       	sbiw	r24, 0x01	; 1
    1d76:	f1 f7       	brne	.-4      	; 0x1d74 <LCD_displayCharacter+0x1ea>
    1d78:	9e 8f       	std	Y+30, r25	; 0x1e
    1d7a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	69 ad       	ldd	r22, Y+57	; 0x39
    1d80:	0e 94 27 09 	call	0x124e	; 0x124e <GPIO_writePort>
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a0 e8       	ldi	r26, 0x80	; 128
    1d8a:	bf e3       	ldi	r27, 0x3F	; 63
    1d8c:	89 8f       	std	Y+25, r24	; 0x19
    1d8e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d90:	ab 8f       	std	Y+27, r26	; 0x1b
    1d92:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d94:	69 8d       	ldd	r22, Y+25	; 0x19
    1d96:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d98:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	4a ef       	ldi	r20, 0xFA	; 250
    1da2:	54 e4       	ldi	r21, 0x44	; 68
    1da4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1da8:	dc 01       	movw	r26, r24
    1daa:	cb 01       	movw	r24, r22
    1dac:	8d 8b       	std	Y+21, r24	; 0x15
    1dae:	9e 8b       	std	Y+22, r25	; 0x16
    1db0:	af 8b       	std	Y+23, r26	; 0x17
    1db2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1db4:	6d 89       	ldd	r22, Y+21	; 0x15
    1db6:	7e 89       	ldd	r23, Y+22	; 0x16
    1db8:	8f 89       	ldd	r24, Y+23	; 0x17
    1dba:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e8       	ldi	r20, 0x80	; 128
    1dc2:	5f e3       	ldi	r21, 0x3F	; 63
    1dc4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1dc8:	88 23       	and	r24, r24
    1dca:	2c f4       	brge	.+10     	; 0x1dd6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    1dcc:	81 e0       	ldi	r24, 0x01	; 1
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	9c 8b       	std	Y+20, r25	; 0x14
    1dd2:	8b 8b       	std	Y+19, r24	; 0x13
    1dd4:	3f c0       	rjmp	.+126    	; 0x1e54 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    1dd6:	6d 89       	ldd	r22, Y+21	; 0x15
    1dd8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dda:	8f 89       	ldd	r24, Y+23	; 0x17
    1ddc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	3f ef       	ldi	r19, 0xFF	; 255
    1de2:	4f e7       	ldi	r20, 0x7F	; 127
    1de4:	57 e4       	ldi	r21, 0x47	; 71
    1de6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dea:	18 16       	cp	r1, r24
    1dec:	4c f5       	brge	.+82     	; 0x1e40 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dee:	69 8d       	ldd	r22, Y+25	; 0x19
    1df0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1df2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1df4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e2       	ldi	r20, 0x20	; 32
    1dfc:	51 e4       	ldi	r21, 0x41	; 65
    1dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	bc 01       	movw	r22, r24
    1e08:	cd 01       	movw	r24, r26
    1e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0e:	dc 01       	movw	r26, r24
    1e10:	cb 01       	movw	r24, r22
    1e12:	9c 8b       	std	Y+20, r25	; 0x14
    1e14:	8b 8b       	std	Y+19, r24	; 0x13
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <LCD_displayCharacter+0x2ac>
    1e18:	88 ec       	ldi	r24, 0xC8	; 200
    1e1a:	90 e0       	ldi	r25, 0x00	; 0
    1e1c:	9a 8b       	std	Y+18, r25	; 0x12
    1e1e:	89 8b       	std	Y+17, r24	; 0x11
    1e20:	89 89       	ldd	r24, Y+17	; 0x11
    1e22:	9a 89       	ldd	r25, Y+18	; 0x12
    1e24:	01 97       	sbiw	r24, 0x01	; 1
    1e26:	f1 f7       	brne	.-4      	; 0x1e24 <LCD_displayCharacter+0x29a>
    1e28:	9a 8b       	std	Y+18, r25	; 0x12
    1e2a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e2c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e30:	01 97       	sbiw	r24, 0x01	; 1
    1e32:	9c 8b       	std	Y+20, r25	; 0x14
    1e34:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e36:	8b 89       	ldd	r24, Y+19	; 0x13
    1e38:	9c 89       	ldd	r25, Y+20	; 0x14
    1e3a:	00 97       	sbiw	r24, 0x00	; 0
    1e3c:	69 f7       	brne	.-38     	; 0x1e18 <LCD_displayCharacter+0x28e>
    1e3e:	14 c0       	rjmp	.+40     	; 0x1e68 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e40:	6d 89       	ldd	r22, Y+21	; 0x15
    1e42:	7e 89       	ldd	r23, Y+22	; 0x16
    1e44:	8f 89       	ldd	r24, Y+23	; 0x17
    1e46:	98 8d       	ldd	r25, Y+24	; 0x18
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9c 8b       	std	Y+20, r25	; 0x14
    1e52:	8b 8b       	std	Y+19, r24	; 0x13
    1e54:	8b 89       	ldd	r24, Y+19	; 0x13
    1e56:	9c 89       	ldd	r25, Y+20	; 0x14
    1e58:	98 8b       	std	Y+16, r25	; 0x10
    1e5a:	8f 87       	std	Y+15, r24	; 0x0f
    1e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e5e:	98 89       	ldd	r25, Y+16	; 0x10
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <LCD_displayCharacter+0x2d6>
    1e64:	98 8b       	std	Y+16, r25	; 0x10
    1e66:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	40 e0       	ldi	r20, 0x00	; 0
    1e6e:	0e 94 5d 07 	call	0xeba	; 0xeba <GPIO_writePin>
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a0 e8       	ldi	r26, 0x80	; 128
    1e78:	bf e3       	ldi	r27, 0x3F	; 63
    1e7a:	8b 87       	std	Y+11, r24	; 0x0b
    1e7c:	9c 87       	std	Y+12, r25	; 0x0c
    1e7e:	ad 87       	std	Y+13, r26	; 0x0d
    1e80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e82:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e84:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e86:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e88:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	4a ef       	ldi	r20, 0xFA	; 250
    1e90:	54 e4       	ldi	r21, 0x44	; 68
    1e92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e96:	dc 01       	movw	r26, r24
    1e98:	cb 01       	movw	r24, r22
    1e9a:	8f 83       	std	Y+7, r24	; 0x07
    1e9c:	98 87       	std	Y+8, r25	; 0x08
    1e9e:	a9 87       	std	Y+9, r26	; 0x09
    1ea0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ea2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea4:	78 85       	ldd	r23, Y+8	; 0x08
    1ea6:	89 85       	ldd	r24, Y+9	; 0x09
    1ea8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e8       	ldi	r20, 0x80	; 128
    1eb0:	5f e3       	ldi	r21, 0x3F	; 63
    1eb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb6:	88 23       	and	r24, r24
    1eb8:	2c f4       	brge	.+10     	; 0x1ec4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    1eba:	81 e0       	ldi	r24, 0x01	; 1
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9e 83       	std	Y+6, r25	; 0x06
    1ec0:	8d 83       	std	Y+5, r24	; 0x05
    1ec2:	3f c0       	rjmp	.+126    	; 0x1f42 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    1ec4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec6:	78 85       	ldd	r23, Y+8	; 0x08
    1ec8:	89 85       	ldd	r24, Y+9	; 0x09
    1eca:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	3f ef       	ldi	r19, 0xFF	; 255
    1ed0:	4f e7       	ldi	r20, 0x7F	; 127
    1ed2:	57 e4       	ldi	r21, 0x47	; 71
    1ed4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed8:	18 16       	cp	r1, r24
    1eda:	4c f5       	brge	.+82     	; 0x1f2e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1edc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ede:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ee0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ee2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e2       	ldi	r20, 0x20	; 32
    1eea:	51 e4       	ldi	r21, 0x41	; 65
    1eec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef0:	dc 01       	movw	r26, r24
    1ef2:	cb 01       	movw	r24, r22
    1ef4:	bc 01       	movw	r22, r24
    1ef6:	cd 01       	movw	r24, r26
    1ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efc:	dc 01       	movw	r26, r24
    1efe:	cb 01       	movw	r24, r22
    1f00:	9e 83       	std	Y+6, r25	; 0x06
    1f02:	8d 83       	std	Y+5, r24	; 0x05
    1f04:	0f c0       	rjmp	.+30     	; 0x1f24 <LCD_displayCharacter+0x39a>
    1f06:	88 ec       	ldi	r24, 0xC8	; 200
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	9c 83       	std	Y+4, r25	; 0x04
    1f0c:	8b 83       	std	Y+3, r24	; 0x03
    1f0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f10:	9c 81       	ldd	r25, Y+4	; 0x04
    1f12:	01 97       	sbiw	r24, 0x01	; 1
    1f14:	f1 f7       	brne	.-4      	; 0x1f12 <LCD_displayCharacter+0x388>
    1f16:	9c 83       	std	Y+4, r25	; 0x04
    1f18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1e:	01 97       	sbiw	r24, 0x01	; 1
    1f20:	9e 83       	std	Y+6, r25	; 0x06
    1f22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f24:	8d 81       	ldd	r24, Y+5	; 0x05
    1f26:	9e 81       	ldd	r25, Y+6	; 0x06
    1f28:	00 97       	sbiw	r24, 0x00	; 0
    1f2a:	69 f7       	brne	.-38     	; 0x1f06 <LCD_displayCharacter+0x37c>
    1f2c:	14 c0       	rjmp	.+40     	; 0x1f56 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f30:	78 85       	ldd	r23, Y+8	; 0x08
    1f32:	89 85       	ldd	r24, Y+9	; 0x09
    1f34:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	8d 83       	std	Y+5, r24	; 0x05
    1f42:	8d 81       	ldd	r24, Y+5	; 0x05
    1f44:	9e 81       	ldd	r25, Y+6	; 0x06
    1f46:	9a 83       	std	Y+2, r25	; 0x02
    1f48:	89 83       	std	Y+1, r24	; 0x01
    1f4a:	89 81       	ldd	r24, Y+1	; 0x01
    1f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <LCD_displayCharacter+0x3c4>
    1f52:	9a 83       	std	Y+2, r25	; 0x02
    1f54:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f56:	e9 96       	adiw	r28, 0x39	; 57
    1f58:	0f b6       	in	r0, 0x3f	; 63
    1f5a:	f8 94       	cli
    1f5c:	de bf       	out	0x3e, r29	; 62
    1f5e:	0f be       	out	0x3f, r0	; 63
    1f60:	cd bf       	out	0x3d, r28	; 61
    1f62:	cf 91       	pop	r28
    1f64:	df 91       	pop	r29
    1f66:	08 95       	ret

00001f68 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1f68:	df 93       	push	r29
    1f6a:	cf 93       	push	r28
    1f6c:	00 d0       	rcall	.+0      	; 0x1f6e <LCD_displayString+0x6>
    1f6e:	0f 92       	push	r0
    1f70:	cd b7       	in	r28, 0x3d	; 61
    1f72:	de b7       	in	r29, 0x3e	; 62
    1f74:	9b 83       	std	Y+3, r25	; 0x03
    1f76:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f78:	19 82       	std	Y+1, r1	; 0x01
    1f7a:	0e c0       	rjmp	.+28     	; 0x1f98 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	28 2f       	mov	r18, r24
    1f80:	30 e0       	ldi	r19, 0x00	; 0
    1f82:	8a 81       	ldd	r24, Y+2	; 0x02
    1f84:	9b 81       	ldd	r25, Y+3	; 0x03
    1f86:	fc 01       	movw	r30, r24
    1f88:	e2 0f       	add	r30, r18
    1f8a:	f3 1f       	adc	r31, r19
    1f8c:	80 81       	ld	r24, Z
    1f8e:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_displayCharacter>
		i++;
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	e2 0f       	add	r30, r18
    1fa6:	f3 1f       	adc	r31, r19
    1fa8:	80 81       	ld	r24, Z
    1faa:	88 23       	and	r24, r24
    1fac:	39 f7       	brne	.-50     	; 0x1f7c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1fae:	0f 90       	pop	r0
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <LCD_moveCursor+0x6>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <LCD_moveCursor+0x8>
    1fc2:	0f 92       	push	r0
    1fc4:	cd b7       	in	r28, 0x3d	; 61
    1fc6:	de b7       	in	r29, 0x3e	; 62
    1fc8:	8a 83       	std	Y+2, r24	; 0x02
    1fca:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	28 2f       	mov	r18, r24
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	3d 83       	std	Y+5, r19	; 0x05
    1fd4:	2c 83       	std	Y+4, r18	; 0x04
    1fd6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fda:	81 30       	cpi	r24, 0x01	; 1
    1fdc:	91 05       	cpc	r25, r1
    1fde:	c1 f0       	breq	.+48     	; 0x2010 <LCD_moveCursor+0x56>
    1fe0:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe2:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe4:	22 30       	cpi	r18, 0x02	; 2
    1fe6:	31 05       	cpc	r19, r1
    1fe8:	2c f4       	brge	.+10     	; 0x1ff4 <LCD_moveCursor+0x3a>
    1fea:	8c 81       	ldd	r24, Y+4	; 0x04
    1fec:	9d 81       	ldd	r25, Y+5	; 0x05
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	61 f0       	breq	.+24     	; 0x200a <LCD_moveCursor+0x50>
    1ff2:	19 c0       	rjmp	.+50     	; 0x2026 <LCD_moveCursor+0x6c>
    1ff4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ff6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ff8:	22 30       	cpi	r18, 0x02	; 2
    1ffa:	31 05       	cpc	r19, r1
    1ffc:	69 f0       	breq	.+26     	; 0x2018 <LCD_moveCursor+0x5e>
    1ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    2000:	9d 81       	ldd	r25, Y+5	; 0x05
    2002:	83 30       	cpi	r24, 0x03	; 3
    2004:	91 05       	cpc	r25, r1
    2006:	61 f0       	breq	.+24     	; 0x2020 <LCD_moveCursor+0x66>
    2008:	0e c0       	rjmp	.+28     	; 0x2026 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	89 83       	std	Y+1, r24	; 0x01
    200e:	0b c0       	rjmp	.+22     	; 0x2026 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2010:	8b 81       	ldd	r24, Y+3	; 0x03
    2012:	80 5c       	subi	r24, 0xC0	; 192
    2014:	89 83       	std	Y+1, r24	; 0x01
    2016:	07 c0       	rjmp	.+14     	; 0x2026 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	80 5f       	subi	r24, 0xF0	; 240
    201c:	89 83       	std	Y+1, r24	; 0x01
    201e:	03 c0       	rjmp	.+6      	; 0x2026 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2020:	8b 81       	ldd	r24, Y+3	; 0x03
    2022:	80 5b       	subi	r24, 0xB0	; 176
    2024:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2026:	89 81       	ldd	r24, Y+1	; 0x01
    2028:	80 68       	ori	r24, 0x80	; 128
    202a:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_sendCommand>
}
    202e:	0f 90       	pop	r0
    2030:	0f 90       	pop	r0
    2032:	0f 90       	pop	r0
    2034:	0f 90       	pop	r0
    2036:	0f 90       	pop	r0
    2038:	cf 91       	pop	r28
    203a:	df 91       	pop	r29
    203c:	08 95       	ret

0000203e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    203e:	df 93       	push	r29
    2040:	cf 93       	push	r28
    2042:	00 d0       	rcall	.+0      	; 0x2044 <LCD_displayStringRowColumn+0x6>
    2044:	00 d0       	rcall	.+0      	; 0x2046 <LCD_displayStringRowColumn+0x8>
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	6a 83       	std	Y+2, r22	; 0x02
    204e:	5c 83       	std	Y+4, r21	; 0x04
    2050:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2052:	89 81       	ldd	r24, Y+1	; 0x01
    2054:	6a 81       	ldd	r22, Y+2	; 0x02
    2056:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    205a:	8b 81       	ldd	r24, Y+3	; 0x03
    205c:	9c 81       	ldd	r25, Y+4	; 0x04
    205e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_displayString>
}
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	0f 90       	pop	r0
    2068:	0f 90       	pop	r0
    206a:	cf 91       	pop	r28
    206c:	df 91       	pop	r29
    206e:	08 95       	ret

00002070 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2070:	df 93       	push	r29
    2072:	cf 93       	push	r28
    2074:	cd b7       	in	r28, 0x3d	; 61
    2076:	de b7       	in	r29, 0x3e	; 62
    2078:	62 97       	sbiw	r28, 0x12	; 18
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	de bf       	out	0x3e, r29	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	cd bf       	out	0x3d, r28	; 61
    2084:	9a 8b       	std	Y+18, r25	; 0x12
    2086:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2088:	89 89       	ldd	r24, Y+17	; 0x11
    208a:	9a 89       	ldd	r25, Y+18	; 0x12
    208c:	9e 01       	movw	r18, r28
    208e:	2f 5f       	subi	r18, 0xFF	; 255
    2090:	3f 4f       	sbci	r19, 0xFF	; 255
    2092:	b9 01       	movw	r22, r18
    2094:	4a e0       	ldi	r20, 0x0A	; 10
    2096:	50 e0       	ldi	r21, 0x00	; 0
    2098:	0e 94 c2 1b 	call	0x3784	; 0x3784 <itoa>
   LCD_displayString(buff); /* Display the string */
    209c:	ce 01       	movw	r24, r28
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_displayString>
}
    20a4:	62 96       	adiw	r28, 0x12	; 18
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	cd b7       	in	r28, 0x3d	; 61
    20bc:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    20be:	81 e0       	ldi	r24, 0x01	; 1
    20c0:	0e 94 d6 0b 	call	0x17ac	; 0x17ac <LCD_sendCommand>
}
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <main>:
uint8 g_tick = 0;
uint8 currentstate = 0;


int main()
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	2e 97       	sbiw	r28, 0x0e	; 14
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
	UART_configtype uart = {baud9600,Asynchronous_mode,Disabled,one_bit,eight_bits,Ignored};
    20de:	ce 01       	movw	r24, r28
    20e0:	01 96       	adiw	r24, 0x01	; 1
    20e2:	9b 87       	std	Y+11, r25	; 0x0b
    20e4:	8a 87       	std	Y+10, r24	; 0x0a
    20e6:	e2 ef       	ldi	r30, 0xF2	; 242
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	fd 87       	std	Y+13, r31	; 0x0d
    20ec:	ec 87       	std	Y+12, r30	; 0x0c
    20ee:	f9 e0       	ldi	r31, 0x09	; 9
    20f0:	fe 87       	std	Y+14, r31	; 0x0e
    20f2:	ec 85       	ldd	r30, Y+12	; 0x0c
    20f4:	fd 85       	ldd	r31, Y+13	; 0x0d
    20f6:	00 80       	ld	r0, Z
    20f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    20fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    20fc:	01 96       	adiw	r24, 0x01	; 1
    20fe:	9d 87       	std	Y+13, r25	; 0x0d
    2100:	8c 87       	std	Y+12, r24	; 0x0c
    2102:	ea 85       	ldd	r30, Y+10	; 0x0a
    2104:	fb 85       	ldd	r31, Y+11	; 0x0b
    2106:	00 82       	st	Z, r0
    2108:	8a 85       	ldd	r24, Y+10	; 0x0a
    210a:	9b 85       	ldd	r25, Y+11	; 0x0b
    210c:	01 96       	adiw	r24, 0x01	; 1
    210e:	9b 87       	std	Y+11, r25	; 0x0b
    2110:	8a 87       	std	Y+10, r24	; 0x0a
    2112:	9e 85       	ldd	r25, Y+14	; 0x0e
    2114:	91 50       	subi	r25, 0x01	; 1
    2116:	9e 87       	std	Y+14, r25	; 0x0e
    2118:	ee 85       	ldd	r30, Y+14	; 0x0e
    211a:	ee 23       	and	r30, r30
    211c:	51 f7       	brne	.-44     	; 0x20f2 <main+0x28>
	UART_init(&uart);
    211e:	ce 01       	movw	r24, r28
    2120:	01 96       	adiw	r24, 0x01	; 1
    2122:	0e 94 13 1a 	call	0x3426	; 0x3426 <UART_init>
	LCD_init();
    2126:	0e 94 3a 0b 	call	0x1674	; 0x1674 <LCD_init>
	// initializing UART and LCD //

	while(1)
	{
		setup_password();
    212a:	0e 94 41 16 	call	0x2c82	; 0x2c82 <setup_password>
    212e:	fd cf       	rjmp	.-6      	; 0x212a <main+0x60>

00002130 <enter_pass>:
 * doesnt match the correct password then he has 3 attempts only befoe
 * activating alarm
 */

void enter_pass()
{
    2130:	0f 93       	push	r16
    2132:	1f 93       	push	r17
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	a8 97       	sbiw	r28, 0x28	; 40
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
	uint8 arr1[10];
	uint8 i,status;
	c++;
    2148:	80 91 00 01 	lds	r24, 0x0100
    214c:	8f 5f       	subi	r24, 0xFF	; 255
    214e:	80 93 00 01 	sts	0x0100, r24

	if(c == 3)
    2152:	80 91 00 01 	lds	r24, 0x0100
    2156:	83 30       	cpi	r24, 0x03	; 3
    2158:	11 f4       	brne	.+4      	; 0x215e <enter_pass+0x2e>
	{
		Error();
    215a:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <Error>
	}

	LCD_clearScreen();
    215e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    2162:	80 e0       	ldi	r24, 0x00	; 0
    2164:	60 e0       	ldi	r22, 0x00	; 0
    2166:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>
	LCD_displayString("plz enter pass: ");
    216a:	80 e6       	ldi	r24, 0x60	; 96
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_displayString>
	LCD_moveCursor(1, 0);
    2172:	81 e0       	ldi	r24, 0x01	; 1
    2174:	60 e0       	ldi	r22, 0x00	; 0
    2176:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>

	for(i=0;i<5;i++)
    217a:	1e 8e       	std	Y+30, r1	; 0x1e
    217c:	84 c0       	rjmp	.+264    	; 0x2286 <enter_pass+0x156>
	{
		arr1[i] = KEYPAD_getPressedKey();
    217e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2180:	08 2f       	mov	r16, r24
    2182:	10 e0       	ldi	r17, 0x00	; 0
    2184:	0e 94 b0 09 	call	0x1360	; 0x1360 <KEYPAD_getPressedKey>
    2188:	28 2f       	mov	r18, r24
    218a:	ce 01       	movw	r24, r28
    218c:	4f 96       	adiw	r24, 0x1f	; 31
    218e:	fc 01       	movw	r30, r24
    2190:	e0 0f       	add	r30, r16
    2192:	f1 1f       	adc	r31, r17
    2194:	20 83       	st	Z, r18
		LCD_displayCharacter('*');
    2196:	8a e2       	ldi	r24, 0x2A	; 42
    2198:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_displayCharacter>
    219c:	80 e0       	ldi	r24, 0x00	; 0
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	a8 ec       	ldi	r26, 0xC8	; 200
    21a2:	b3 e4       	ldi	r27, 0x43	; 67
    21a4:	89 8f       	std	Y+25, r24	; 0x19
    21a6:	9a 8f       	std	Y+26, r25	; 0x1a
    21a8:	ab 8f       	std	Y+27, r26	; 0x1b
    21aa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ac:	69 8d       	ldd	r22, Y+25	; 0x19
    21ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	4a ef       	ldi	r20, 0xFA	; 250
    21ba:	54 e4       	ldi	r21, 0x44	; 68
    21bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21c0:	dc 01       	movw	r26, r24
    21c2:	cb 01       	movw	r24, r22
    21c4:	8d 8b       	std	Y+21, r24	; 0x15
    21c6:	9e 8b       	std	Y+22, r25	; 0x16
    21c8:	af 8b       	std	Y+23, r26	; 0x17
    21ca:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21cc:	6d 89       	ldd	r22, Y+21	; 0x15
    21ce:	7e 89       	ldd	r23, Y+22	; 0x16
    21d0:	8f 89       	ldd	r24, Y+23	; 0x17
    21d2:	98 8d       	ldd	r25, Y+24	; 0x18
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	40 e8       	ldi	r20, 0x80	; 128
    21da:	5f e3       	ldi	r21, 0x3F	; 63
    21dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21e0:	88 23       	and	r24, r24
    21e2:	2c f4       	brge	.+10     	; 0x21ee <enter_pass+0xbe>
		__ticks = 1;
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	9c 8b       	std	Y+20, r25	; 0x14
    21ea:	8b 8b       	std	Y+19, r24	; 0x13
    21ec:	3f c0       	rjmp	.+126    	; 0x226c <enter_pass+0x13c>
	else if (__tmp > 65535)
    21ee:	6d 89       	ldd	r22, Y+21	; 0x15
    21f0:	7e 89       	ldd	r23, Y+22	; 0x16
    21f2:	8f 89       	ldd	r24, Y+23	; 0x17
    21f4:	98 8d       	ldd	r25, Y+24	; 0x18
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	3f ef       	ldi	r19, 0xFF	; 255
    21fa:	4f e7       	ldi	r20, 0x7F	; 127
    21fc:	57 e4       	ldi	r21, 0x47	; 71
    21fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2202:	18 16       	cp	r1, r24
    2204:	4c f5       	brge	.+82     	; 0x2258 <enter_pass+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2206:	69 8d       	ldd	r22, Y+25	; 0x19
    2208:	7a 8d       	ldd	r23, Y+26	; 0x1a
    220a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    220c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	40 e2       	ldi	r20, 0x20	; 32
    2214:	51 e4       	ldi	r21, 0x41	; 65
    2216:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    221a:	dc 01       	movw	r26, r24
    221c:	cb 01       	movw	r24, r22
    221e:	bc 01       	movw	r22, r24
    2220:	cd 01       	movw	r24, r26
    2222:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2226:	dc 01       	movw	r26, r24
    2228:	cb 01       	movw	r24, r22
    222a:	9c 8b       	std	Y+20, r25	; 0x14
    222c:	8b 8b       	std	Y+19, r24	; 0x13
    222e:	0f c0       	rjmp	.+30     	; 0x224e <enter_pass+0x11e>
    2230:	88 ec       	ldi	r24, 0xC8	; 200
    2232:	90 e0       	ldi	r25, 0x00	; 0
    2234:	9a 8b       	std	Y+18, r25	; 0x12
    2236:	89 8b       	std	Y+17, r24	; 0x11
    2238:	89 89       	ldd	r24, Y+17	; 0x11
    223a:	9a 89       	ldd	r25, Y+18	; 0x12
    223c:	01 97       	sbiw	r24, 0x01	; 1
    223e:	f1 f7       	brne	.-4      	; 0x223c <enter_pass+0x10c>
    2240:	9a 8b       	std	Y+18, r25	; 0x12
    2242:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2244:	8b 89       	ldd	r24, Y+19	; 0x13
    2246:	9c 89       	ldd	r25, Y+20	; 0x14
    2248:	01 97       	sbiw	r24, 0x01	; 1
    224a:	9c 8b       	std	Y+20, r25	; 0x14
    224c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	8b 89       	ldd	r24, Y+19	; 0x13
    2250:	9c 89       	ldd	r25, Y+20	; 0x14
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	69 f7       	brne	.-38     	; 0x2230 <enter_pass+0x100>
    2256:	14 c0       	rjmp	.+40     	; 0x2280 <enter_pass+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2258:	6d 89       	ldd	r22, Y+21	; 0x15
    225a:	7e 89       	ldd	r23, Y+22	; 0x16
    225c:	8f 89       	ldd	r24, Y+23	; 0x17
    225e:	98 8d       	ldd	r25, Y+24	; 0x18
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9c 8b       	std	Y+20, r25	; 0x14
    226a:	8b 8b       	std	Y+19, r24	; 0x13
    226c:	8b 89       	ldd	r24, Y+19	; 0x13
    226e:	9c 89       	ldd	r25, Y+20	; 0x14
    2270:	98 8b       	std	Y+16, r25	; 0x10
    2272:	8f 87       	std	Y+15, r24	; 0x0f
    2274:	8f 85       	ldd	r24, Y+15	; 0x0f
    2276:	98 89       	ldd	r25, Y+16	; 0x10
    2278:	01 97       	sbiw	r24, 0x01	; 1
    227a:	f1 f7       	brne	.-4      	; 0x2278 <enter_pass+0x148>
    227c:	98 8b       	std	Y+16, r25	; 0x10
    227e:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString("plz enter pass: ");
	LCD_moveCursor(1, 0);

	for(i=0;i<5;i++)
    2280:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2282:	8f 5f       	subi	r24, 0xFF	; 255
    2284:	8e 8f       	std	Y+30, r24	; 0x1e
    2286:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2288:	85 30       	cpi	r24, 0x05	; 5
    228a:	08 f4       	brcc	.+2      	; 0x228e <enter_pass+0x15e>
    228c:	78 cf       	rjmp	.-272    	; 0x217e <enter_pass+0x4e>
		arr1[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(400);
	}

	while(KEYPAD_getPressedKey() != '=') {}
    228e:	0e 94 b0 09 	call	0x1360	; 0x1360 <KEYPAD_getPressedKey>
    2292:	8d 33       	cpi	r24, 0x3D	; 61
    2294:	e1 f7       	brne	.-8      	; 0x228e <enter_pass+0x15e>
    2296:	80 e0       	ldi	r24, 0x00	; 0
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	a8 e4       	ldi	r26, 0x48	; 72
    229c:	b3 e4       	ldi	r27, 0x43	; 67
    229e:	8b 87       	std	Y+11, r24	; 0x0b
    22a0:	9c 87       	std	Y+12, r25	; 0x0c
    22a2:	ad 87       	std	Y+13, r26	; 0x0d
    22a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    22ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	4a ef       	ldi	r20, 0xFA	; 250
    22b4:	54 e4       	ldi	r21, 0x44	; 68
    22b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ba:	dc 01       	movw	r26, r24
    22bc:	cb 01       	movw	r24, r22
    22be:	8f 83       	std	Y+7, r24	; 0x07
    22c0:	98 87       	std	Y+8, r25	; 0x08
    22c2:	a9 87       	std	Y+9, r26	; 0x09
    22c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22c6:	6f 81       	ldd	r22, Y+7	; 0x07
    22c8:	78 85       	ldd	r23, Y+8	; 0x08
    22ca:	89 85       	ldd	r24, Y+9	; 0x09
    22cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	40 e8       	ldi	r20, 0x80	; 128
    22d4:	5f e3       	ldi	r21, 0x3F	; 63
    22d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22da:	88 23       	and	r24, r24
    22dc:	2c f4       	brge	.+10     	; 0x22e8 <enter_pass+0x1b8>
		__ticks = 1;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	9e 83       	std	Y+6, r25	; 0x06
    22e4:	8d 83       	std	Y+5, r24	; 0x05
    22e6:	3f c0       	rjmp	.+126    	; 0x2366 <enter_pass+0x236>
	else if (__tmp > 65535)
    22e8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ea:	78 85       	ldd	r23, Y+8	; 0x08
    22ec:	89 85       	ldd	r24, Y+9	; 0x09
    22ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	3f ef       	ldi	r19, 0xFF	; 255
    22f4:	4f e7       	ldi	r20, 0x7F	; 127
    22f6:	57 e4       	ldi	r21, 0x47	; 71
    22f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22fc:	18 16       	cp	r1, r24
    22fe:	4c f5       	brge	.+82     	; 0x2352 <enter_pass+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2300:	6b 85       	ldd	r22, Y+11	; 0x0b
    2302:	7c 85       	ldd	r23, Y+12	; 0x0c
    2304:	8d 85       	ldd	r24, Y+13	; 0x0d
    2306:	9e 85       	ldd	r25, Y+14	; 0x0e
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	40 e2       	ldi	r20, 0x20	; 32
    230e:	51 e4       	ldi	r21, 0x41	; 65
    2310:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	bc 01       	movw	r22, r24
    231a:	cd 01       	movw	r24, r26
    231c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	9e 83       	std	Y+6, r25	; 0x06
    2326:	8d 83       	std	Y+5, r24	; 0x05
    2328:	0f c0       	rjmp	.+30     	; 0x2348 <enter_pass+0x218>
    232a:	88 ec       	ldi	r24, 0xC8	; 200
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	9c 83       	std	Y+4, r25	; 0x04
    2330:	8b 83       	std	Y+3, r24	; 0x03
    2332:	8b 81       	ldd	r24, Y+3	; 0x03
    2334:	9c 81       	ldd	r25, Y+4	; 0x04
    2336:	01 97       	sbiw	r24, 0x01	; 1
    2338:	f1 f7       	brne	.-4      	; 0x2336 <enter_pass+0x206>
    233a:	9c 83       	std	Y+4, r25	; 0x04
    233c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    233e:	8d 81       	ldd	r24, Y+5	; 0x05
    2340:	9e 81       	ldd	r25, Y+6	; 0x06
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	9e 83       	std	Y+6, r25	; 0x06
    2346:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2348:	8d 81       	ldd	r24, Y+5	; 0x05
    234a:	9e 81       	ldd	r25, Y+6	; 0x06
    234c:	00 97       	sbiw	r24, 0x00	; 0
    234e:	69 f7       	brne	.-38     	; 0x232a <enter_pass+0x1fa>
    2350:	14 c0       	rjmp	.+40     	; 0x237a <enter_pass+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2352:	6f 81       	ldd	r22, Y+7	; 0x07
    2354:	78 85       	ldd	r23, Y+8	; 0x08
    2356:	89 85       	ldd	r24, Y+9	; 0x09
    2358:	9a 85       	ldd	r25, Y+10	; 0x0a
    235a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	9e 83       	std	Y+6, r25	; 0x06
    2364:	8d 83       	std	Y+5, r24	; 0x05
    2366:	8d 81       	ldd	r24, Y+5	; 0x05
    2368:	9e 81       	ldd	r25, Y+6	; 0x06
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	f1 f7       	brne	.-4      	; 0x2372 <enter_pass+0x242>
    2376:	9a 83       	std	Y+2, r25	; 0x02
    2378:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);

	arr1[i] = '#';
    237a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	ce 01       	movw	r24, r28
    2382:	4f 96       	adiw	r24, 0x1f	; 31
    2384:	fc 01       	movw	r30, r24
    2386:	e2 0f       	add	r30, r18
    2388:	f3 1f       	adc	r31, r19
    238a:	83 e2       	ldi	r24, 0x23	; 35
    238c:	80 83       	st	Z, r24
	arr1[i+1] = '\0';
    238e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2390:	88 2f       	mov	r24, r24
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9c 01       	movw	r18, r24
    2396:	2f 5f       	subi	r18, 0xFF	; 255
    2398:	3f 4f       	sbci	r19, 0xFF	; 255
    239a:	ce 01       	movw	r24, r28
    239c:	4f 96       	adiw	r24, 0x1f	; 31
    239e:	fc 01       	movw	r30, r24
    23a0:	e2 0f       	add	r30, r18
    23a2:	f3 1f       	adc	r31, r19
    23a4:	10 82       	st	Z, r1


	while(UART_recieveByte() != MC2_READY) {}
    23a6:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
    23aa:	80 31       	cpi	r24, 0x10	; 16
    23ac:	e1 f7       	brne	.-8      	; 0x23a6 <enter_pass+0x276>
	UART_sendString(arr1);
    23ae:	ce 01       	movw	r24, r28
    23b0:	4f 96       	adiw	r24, 0x1f	; 31
    23b2:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <UART_sendString>
	status = UART_recieveByte();
    23b6:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
    23ba:	8d 8f       	std	Y+29, r24	; 0x1d

	if(status == PASSWORD_PASS)
    23bc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23be:	8f 3f       	cpi	r24, 0xFF	; 255
    23c0:	19 f4       	brne	.+6      	; 0x23c8 <enter_pass+0x298>
	{
		open_door();
    23c2:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <open_door>
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <enter_pass+0x29c>
	}
	else
	{
		enter_pass();
    23c8:	0e 94 98 10 	call	0x2130	; 0x2130 <enter_pass>
	}
}
    23cc:	a8 96       	adiw	r28, 0x28	; 40
    23ce:	0f b6       	in	r0, 0x3f	; 63
    23d0:	f8 94       	cli
    23d2:	de bf       	out	0x3e, r29	; 62
    23d4:	0f be       	out	0x3f, r0	; 63
    23d6:	cd bf       	out	0x3d, r28	; 61
    23d8:	cf 91       	pop	r28
    23da:	df 91       	pop	r29
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	08 95       	ret

000023e2 <open_door>:
 * if open then asks for the password and sends it to MC2 to compare it
 * with the correct password
 */

void open_door(void)
{
    23e2:	0f 93       	push	r16
    23e4:	1f 93       	push	r17
    23e6:	df 93       	push	r29
    23e8:	cf 93       	push	r28
    23ea:	cd b7       	in	r28, 0x3d	; 61
    23ec:	de b7       	in	r29, 0x3e	; 62
    23ee:	c6 54       	subi	r28, 0x46	; 70
    23f0:	d0 40       	sbci	r29, 0x00	; 0
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
	uint8 key = 0,i,status;
    23fc:	1c ae       	std	Y+60, r1	; 0x3c
	uint8 arr1[10];

	c = 0;
    23fe:	10 92 00 01 	sts	0x0100, r1
	LCD_clearScreen();
    2402:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    2406:	80 e0       	ldi	r24, 0x00	; 0
    2408:	60 e0       	ldi	r22, 0x00	; 0
    240a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>
	LCD_displayString("+ : open Door");
    240e:	81 e7       	ldi	r24, 0x71	; 113
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_displayString>
	LCD_moveCursor(1,0);
    2416:	81 e0       	ldi	r24, 0x01	; 1
    2418:	60 e0       	ldi	r22, 0x00	; 0
    241a:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>
	LCD_displayString("- : change pass");
    241e:	8f e7       	ldi	r24, 0x7F	; 127
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_displayString>
	key = KEYPAD_getPressedKey();
    2426:	0e 94 b0 09 	call	0x1360	; 0x1360 <KEYPAD_getPressedKey>
    242a:	8c af       	std	Y+60, r24	; 0x3c

	if(key == '+')
    242c:	8c ad       	ldd	r24, Y+60	; 0x3c
    242e:	8b 32       	cpi	r24, 0x2B	; 43
    2430:	09 f0       	breq	.+2      	; 0x2434 <open_door+0x52>
    2432:	50 c2       	rjmp	.+1184   	; 0x28d4 <open_door+0x4f2>
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	a8 e4       	ldi	r26, 0x48	; 72
    243a:	b3 e4       	ldi	r27, 0x43	; 67
    243c:	8d ab       	std	Y+53, r24	; 0x35
    243e:	9e ab       	std	Y+54, r25	; 0x36
    2440:	af ab       	std	Y+55, r26	; 0x37
    2442:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2444:	6d a9       	ldd	r22, Y+53	; 0x35
    2446:	7e a9       	ldd	r23, Y+54	; 0x36
    2448:	8f a9       	ldd	r24, Y+55	; 0x37
    244a:	98 ad       	ldd	r25, Y+56	; 0x38
    244c:	20 e0       	ldi	r18, 0x00	; 0
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	4a ef       	ldi	r20, 0xFA	; 250
    2452:	54 e4       	ldi	r21, 0x44	; 68
    2454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	89 ab       	std	Y+49, r24	; 0x31
    245e:	9a ab       	std	Y+50, r25	; 0x32
    2460:	ab ab       	std	Y+51, r26	; 0x33
    2462:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2464:	69 a9       	ldd	r22, Y+49	; 0x31
    2466:	7a a9       	ldd	r23, Y+50	; 0x32
    2468:	8b a9       	ldd	r24, Y+51	; 0x33
    246a:	9c a9       	ldd	r25, Y+52	; 0x34
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	40 e8       	ldi	r20, 0x80	; 128
    2472:	5f e3       	ldi	r21, 0x3F	; 63
    2474:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2478:	88 23       	and	r24, r24
    247a:	2c f4       	brge	.+10     	; 0x2486 <open_door+0xa4>
		__ticks = 1;
    247c:	81 e0       	ldi	r24, 0x01	; 1
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	98 ab       	std	Y+48, r25	; 0x30
    2482:	8f a7       	std	Y+47, r24	; 0x2f
    2484:	3f c0       	rjmp	.+126    	; 0x2504 <open_door+0x122>
	else if (__tmp > 65535)
    2486:	69 a9       	ldd	r22, Y+49	; 0x31
    2488:	7a a9       	ldd	r23, Y+50	; 0x32
    248a:	8b a9       	ldd	r24, Y+51	; 0x33
    248c:	9c a9       	ldd	r25, Y+52	; 0x34
    248e:	20 e0       	ldi	r18, 0x00	; 0
    2490:	3f ef       	ldi	r19, 0xFF	; 255
    2492:	4f e7       	ldi	r20, 0x7F	; 127
    2494:	57 e4       	ldi	r21, 0x47	; 71
    2496:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    249a:	18 16       	cp	r1, r24
    249c:	4c f5       	brge	.+82     	; 0x24f0 <open_door+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    249e:	6d a9       	ldd	r22, Y+53	; 0x35
    24a0:	7e a9       	ldd	r23, Y+54	; 0x36
    24a2:	8f a9       	ldd	r24, Y+55	; 0x37
    24a4:	98 ad       	ldd	r25, Y+56	; 0x38
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	40 e2       	ldi	r20, 0x20	; 32
    24ac:	51 e4       	ldi	r21, 0x41	; 65
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	bc 01       	movw	r22, r24
    24b8:	cd 01       	movw	r24, r26
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	98 ab       	std	Y+48, r25	; 0x30
    24c4:	8f a7       	std	Y+47, r24	; 0x2f
    24c6:	0f c0       	rjmp	.+30     	; 0x24e6 <open_door+0x104>
    24c8:	88 ec       	ldi	r24, 0xC8	; 200
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	9e a7       	std	Y+46, r25	; 0x2e
    24ce:	8d a7       	std	Y+45, r24	; 0x2d
    24d0:	8d a5       	ldd	r24, Y+45	; 0x2d
    24d2:	9e a5       	ldd	r25, Y+46	; 0x2e
    24d4:	01 97       	sbiw	r24, 0x01	; 1
    24d6:	f1 f7       	brne	.-4      	; 0x24d4 <open_door+0xf2>
    24d8:	9e a7       	std	Y+46, r25	; 0x2e
    24da:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24de:	98 a9       	ldd	r25, Y+48	; 0x30
    24e0:	01 97       	sbiw	r24, 0x01	; 1
    24e2:	98 ab       	std	Y+48, r25	; 0x30
    24e4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e8:	98 a9       	ldd	r25, Y+48	; 0x30
    24ea:	00 97       	sbiw	r24, 0x00	; 0
    24ec:	69 f7       	brne	.-38     	; 0x24c8 <open_door+0xe6>
    24ee:	14 c0       	rjmp	.+40     	; 0x2518 <open_door+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24f0:	69 a9       	ldd	r22, Y+49	; 0x31
    24f2:	7a a9       	ldd	r23, Y+50	; 0x32
    24f4:	8b a9       	ldd	r24, Y+51	; 0x33
    24f6:	9c a9       	ldd	r25, Y+52	; 0x34
    24f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	98 ab       	std	Y+48, r25	; 0x30
    2502:	8f a7       	std	Y+47, r24	; 0x2f
    2504:	8f a5       	ldd	r24, Y+47	; 0x2f
    2506:	98 a9       	ldd	r25, Y+48	; 0x30
    2508:	9c a7       	std	Y+44, r25	; 0x2c
    250a:	8b a7       	std	Y+43, r24	; 0x2b
    250c:	8b a5       	ldd	r24, Y+43	; 0x2b
    250e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	f1 f7       	brne	.-4      	; 0x2510 <open_door+0x12e>
    2514:	9c a7       	std	Y+44, r25	; 0x2c
    2516:	8b a7       	std	Y+43, r24	; 0x2b
	{
		_delay_ms(200);
		LCD_clearScreen();
    2518:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_clearScreen>
		LCD_moveCursor(0,0);
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	60 e0       	ldi	r22, 0x00	; 0
    2520:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>
		LCD_displayString("enter pass plz: ");
    2524:	8f e8       	ldi	r24, 0x8F	; 143
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_displayString>
		LCD_moveCursor(1, 0);
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	60 e0       	ldi	r22, 0x00	; 0
    2530:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>

		for(i=0;i<5;i++)
    2534:	1b ae       	std	Y+59, r1	; 0x3b
    2536:	84 c0       	rjmp	.+264    	; 0x2640 <open_door+0x25e>
		{
			arr1[i] = KEYPAD_getPressedKey();
    2538:	8b ad       	ldd	r24, Y+59	; 0x3b
    253a:	08 2f       	mov	r16, r24
    253c:	10 e0       	ldi	r17, 0x00	; 0
    253e:	0e 94 b0 09 	call	0x1360	; 0x1360 <KEYPAD_getPressedKey>
    2542:	28 2f       	mov	r18, r24
    2544:	ce 01       	movw	r24, r28
    2546:	cd 96       	adiw	r24, 0x3d	; 61
    2548:	fc 01       	movw	r30, r24
    254a:	e0 0f       	add	r30, r16
    254c:	f1 1f       	adc	r31, r17
    254e:	20 83       	st	Z, r18
			LCD_displayCharacter('*');
    2550:	8a e2       	ldi	r24, 0x2A	; 42
    2552:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_displayCharacter>
    2556:	80 e0       	ldi	r24, 0x00	; 0
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	a8 ec       	ldi	r26, 0xC8	; 200
    255c:	b3 e4       	ldi	r27, 0x43	; 67
    255e:	8f a3       	std	Y+39, r24	; 0x27
    2560:	98 a7       	std	Y+40, r25	; 0x28
    2562:	a9 a7       	std	Y+41, r26	; 0x29
    2564:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2566:	6f a1       	ldd	r22, Y+39	; 0x27
    2568:	78 a5       	ldd	r23, Y+40	; 0x28
    256a:	89 a5       	ldd	r24, Y+41	; 0x29
    256c:	9a a5       	ldd	r25, Y+42	; 0x2a
    256e:	20 e0       	ldi	r18, 0x00	; 0
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	4a ef       	ldi	r20, 0xFA	; 250
    2574:	54 e4       	ldi	r21, 0x44	; 68
    2576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    257a:	dc 01       	movw	r26, r24
    257c:	cb 01       	movw	r24, r22
    257e:	8b a3       	std	Y+35, r24	; 0x23
    2580:	9c a3       	std	Y+36, r25	; 0x24
    2582:	ad a3       	std	Y+37, r26	; 0x25
    2584:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2586:	6b a1       	ldd	r22, Y+35	; 0x23
    2588:	7c a1       	ldd	r23, Y+36	; 0x24
    258a:	8d a1       	ldd	r24, Y+37	; 0x25
    258c:	9e a1       	ldd	r25, Y+38	; 0x26
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	40 e8       	ldi	r20, 0x80	; 128
    2594:	5f e3       	ldi	r21, 0x3F	; 63
    2596:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    259a:	88 23       	and	r24, r24
    259c:	2c f4       	brge	.+10     	; 0x25a8 <open_door+0x1c6>
		__ticks = 1;
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	9a a3       	std	Y+34, r25	; 0x22
    25a4:	89 a3       	std	Y+33, r24	; 0x21
    25a6:	3f c0       	rjmp	.+126    	; 0x2626 <open_door+0x244>
	else if (__tmp > 65535)
    25a8:	6b a1       	ldd	r22, Y+35	; 0x23
    25aa:	7c a1       	ldd	r23, Y+36	; 0x24
    25ac:	8d a1       	ldd	r24, Y+37	; 0x25
    25ae:	9e a1       	ldd	r25, Y+38	; 0x26
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	3f ef       	ldi	r19, 0xFF	; 255
    25b4:	4f e7       	ldi	r20, 0x7F	; 127
    25b6:	57 e4       	ldi	r21, 0x47	; 71
    25b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25bc:	18 16       	cp	r1, r24
    25be:	4c f5       	brge	.+82     	; 0x2612 <open_door+0x230>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25c0:	6f a1       	ldd	r22, Y+39	; 0x27
    25c2:	78 a5       	ldd	r23, Y+40	; 0x28
    25c4:	89 a5       	ldd	r24, Y+41	; 0x29
    25c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	40 e2       	ldi	r20, 0x20	; 32
    25ce:	51 e4       	ldi	r21, 0x41	; 65
    25d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	bc 01       	movw	r22, r24
    25da:	cd 01       	movw	r24, r26
    25dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e0:	dc 01       	movw	r26, r24
    25e2:	cb 01       	movw	r24, r22
    25e4:	9a a3       	std	Y+34, r25	; 0x22
    25e6:	89 a3       	std	Y+33, r24	; 0x21
    25e8:	0f c0       	rjmp	.+30     	; 0x2608 <open_door+0x226>
    25ea:	88 ec       	ldi	r24, 0xC8	; 200
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	98 a3       	std	Y+32, r25	; 0x20
    25f0:	8f 8f       	std	Y+31, r24	; 0x1f
    25f2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25f4:	98 a1       	ldd	r25, Y+32	; 0x20
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <open_door+0x214>
    25fa:	98 a3       	std	Y+32, r25	; 0x20
    25fc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fe:	89 a1       	ldd	r24, Y+33	; 0x21
    2600:	9a a1       	ldd	r25, Y+34	; 0x22
    2602:	01 97       	sbiw	r24, 0x01	; 1
    2604:	9a a3       	std	Y+34, r25	; 0x22
    2606:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2608:	89 a1       	ldd	r24, Y+33	; 0x21
    260a:	9a a1       	ldd	r25, Y+34	; 0x22
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	69 f7       	brne	.-38     	; 0x25ea <open_door+0x208>
    2610:	14 c0       	rjmp	.+40     	; 0x263a <open_door+0x258>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2612:	6b a1       	ldd	r22, Y+35	; 0x23
    2614:	7c a1       	ldd	r23, Y+36	; 0x24
    2616:	8d a1       	ldd	r24, Y+37	; 0x25
    2618:	9e a1       	ldd	r25, Y+38	; 0x26
    261a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261e:	dc 01       	movw	r26, r24
    2620:	cb 01       	movw	r24, r22
    2622:	9a a3       	std	Y+34, r25	; 0x22
    2624:	89 a3       	std	Y+33, r24	; 0x21
    2626:	89 a1       	ldd	r24, Y+33	; 0x21
    2628:	9a a1       	ldd	r25, Y+34	; 0x22
    262a:	9e 8f       	std	Y+30, r25	; 0x1e
    262c:	8d 8f       	std	Y+29, r24	; 0x1d
    262e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2630:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	f1 f7       	brne	.-4      	; 0x2632 <open_door+0x250>
    2636:	9e 8f       	std	Y+30, r25	; 0x1e
    2638:	8d 8f       	std	Y+29, r24	; 0x1d
		LCD_clearScreen();
		LCD_moveCursor(0,0);
		LCD_displayString("enter pass plz: ");
		LCD_moveCursor(1, 0);

		for(i=0;i<5;i++)
    263a:	8b ad       	ldd	r24, Y+59	; 0x3b
    263c:	8f 5f       	subi	r24, 0xFF	; 255
    263e:	8b af       	std	Y+59, r24	; 0x3b
    2640:	8b ad       	ldd	r24, Y+59	; 0x3b
    2642:	85 30       	cpi	r24, 0x05	; 5
    2644:	08 f4       	brcc	.+2      	; 0x2648 <open_door+0x266>
    2646:	78 cf       	rjmp	.-272    	; 0x2538 <open_door+0x156>
		{
			arr1[i] = KEYPAD_getPressedKey();
			LCD_displayCharacter('*');
			_delay_ms(400);
		}
		while(KEYPAD_getPressedKey() != '=') {}
    2648:	0e 94 b0 09 	call	0x1360	; 0x1360 <KEYPAD_getPressedKey>
    264c:	8d 33       	cpi	r24, 0x3D	; 61
    264e:	e1 f7       	brne	.-8      	; 0x2648 <open_door+0x266>
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	a8 e4       	ldi	r26, 0x48	; 72
    2656:	b3 e4       	ldi	r27, 0x43	; 67
    2658:	89 8f       	std	Y+25, r24	; 0x19
    265a:	9a 8f       	std	Y+26, r25	; 0x1a
    265c:	ab 8f       	std	Y+27, r26	; 0x1b
    265e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2660:	69 8d       	ldd	r22, Y+25	; 0x19
    2662:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2664:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2666:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	4a ef       	ldi	r20, 0xFA	; 250
    266e:	54 e4       	ldi	r21, 0x44	; 68
    2670:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	8d 8b       	std	Y+21, r24	; 0x15
    267a:	9e 8b       	std	Y+22, r25	; 0x16
    267c:	af 8b       	std	Y+23, r26	; 0x17
    267e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2680:	6d 89       	ldd	r22, Y+21	; 0x15
    2682:	7e 89       	ldd	r23, Y+22	; 0x16
    2684:	8f 89       	ldd	r24, Y+23	; 0x17
    2686:	98 8d       	ldd	r25, Y+24	; 0x18
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	40 e8       	ldi	r20, 0x80	; 128
    268e:	5f e3       	ldi	r21, 0x3F	; 63
    2690:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2694:	88 23       	and	r24, r24
    2696:	2c f4       	brge	.+10     	; 0x26a2 <open_door+0x2c0>
		__ticks = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	9c 8b       	std	Y+20, r25	; 0x14
    269e:	8b 8b       	std	Y+19, r24	; 0x13
    26a0:	3f c0       	rjmp	.+126    	; 0x2720 <open_door+0x33e>
	else if (__tmp > 65535)
    26a2:	6d 89       	ldd	r22, Y+21	; 0x15
    26a4:	7e 89       	ldd	r23, Y+22	; 0x16
    26a6:	8f 89       	ldd	r24, Y+23	; 0x17
    26a8:	98 8d       	ldd	r25, Y+24	; 0x18
    26aa:	20 e0       	ldi	r18, 0x00	; 0
    26ac:	3f ef       	ldi	r19, 0xFF	; 255
    26ae:	4f e7       	ldi	r20, 0x7F	; 127
    26b0:	57 e4       	ldi	r21, 0x47	; 71
    26b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26b6:	18 16       	cp	r1, r24
    26b8:	4c f5       	brge	.+82     	; 0x270c <open_door+0x32a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ba:	69 8d       	ldd	r22, Y+25	; 0x19
    26bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26c2:	20 e0       	ldi	r18, 0x00	; 0
    26c4:	30 e0       	ldi	r19, 0x00	; 0
    26c6:	40 e2       	ldi	r20, 0x20	; 32
    26c8:	51 e4       	ldi	r21, 0x41	; 65
    26ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	bc 01       	movw	r22, r24
    26d4:	cd 01       	movw	r24, r26
    26d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	9c 8b       	std	Y+20, r25	; 0x14
    26e0:	8b 8b       	std	Y+19, r24	; 0x13
    26e2:	0f c0       	rjmp	.+30     	; 0x2702 <open_door+0x320>
    26e4:	88 ec       	ldi	r24, 0xC8	; 200
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9a 8b       	std	Y+18, r25	; 0x12
    26ea:	89 8b       	std	Y+17, r24	; 0x11
    26ec:	89 89       	ldd	r24, Y+17	; 0x11
    26ee:	9a 89       	ldd	r25, Y+18	; 0x12
    26f0:	01 97       	sbiw	r24, 0x01	; 1
    26f2:	f1 f7       	brne	.-4      	; 0x26f0 <open_door+0x30e>
    26f4:	9a 8b       	std	Y+18, r25	; 0x12
    26f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26f8:	8b 89       	ldd	r24, Y+19	; 0x13
    26fa:	9c 89       	ldd	r25, Y+20	; 0x14
    26fc:	01 97       	sbiw	r24, 0x01	; 1
    26fe:	9c 8b       	std	Y+20, r25	; 0x14
    2700:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2702:	8b 89       	ldd	r24, Y+19	; 0x13
    2704:	9c 89       	ldd	r25, Y+20	; 0x14
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	69 f7       	brne	.-38     	; 0x26e4 <open_door+0x302>
    270a:	14 c0       	rjmp	.+40     	; 0x2734 <open_door+0x352>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    270c:	6d 89       	ldd	r22, Y+21	; 0x15
    270e:	7e 89       	ldd	r23, Y+22	; 0x16
    2710:	8f 89       	ldd	r24, Y+23	; 0x17
    2712:	98 8d       	ldd	r25, Y+24	; 0x18
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	9c 8b       	std	Y+20, r25	; 0x14
    271e:	8b 8b       	std	Y+19, r24	; 0x13
    2720:	8b 89       	ldd	r24, Y+19	; 0x13
    2722:	9c 89       	ldd	r25, Y+20	; 0x14
    2724:	98 8b       	std	Y+16, r25	; 0x10
    2726:	8f 87       	std	Y+15, r24	; 0x0f
    2728:	8f 85       	ldd	r24, Y+15	; 0x0f
    272a:	98 89       	ldd	r25, Y+16	; 0x10
    272c:	01 97       	sbiw	r24, 0x01	; 1
    272e:	f1 f7       	brne	.-4      	; 0x272c <open_door+0x34a>
    2730:	98 8b       	std	Y+16, r25	; 0x10
    2732:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);

		arr1[i] = '#';
    2734:	8b ad       	ldd	r24, Y+59	; 0x3b
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	ce 01       	movw	r24, r28
    273c:	cd 96       	adiw	r24, 0x3d	; 61
    273e:	fc 01       	movw	r30, r24
    2740:	e2 0f       	add	r30, r18
    2742:	f3 1f       	adc	r31, r19
    2744:	83 e2       	ldi	r24, 0x23	; 35
    2746:	80 83       	st	Z, r24
		arr1[i+1] = '\0';
    2748:	8b ad       	ldd	r24, Y+59	; 0x3b
    274a:	88 2f       	mov	r24, r24
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9c 01       	movw	r18, r24
    2750:	2f 5f       	subi	r18, 0xFF	; 255
    2752:	3f 4f       	sbci	r19, 0xFF	; 255
    2754:	ce 01       	movw	r24, r28
    2756:	cd 96       	adiw	r24, 0x3d	; 61
    2758:	fc 01       	movw	r30, r24
    275a:	e2 0f       	add	r30, r18
    275c:	f3 1f       	adc	r31, r19
    275e:	10 82       	st	Z, r1


		while(UART_recieveByte() != MC2_READY) {}
    2760:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
    2764:	80 31       	cpi	r24, 0x10	; 16
    2766:	e1 f7       	brne	.-8      	; 0x2760 <open_door+0x37e>
		UART_sendString(arr1);
    2768:	ce 01       	movw	r24, r28
    276a:	cd 96       	adiw	r24, 0x3d	; 61
    276c:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <UART_sendString>
		status = UART_recieveByte();
    2770:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
    2774:	8a af       	std	Y+58, r24	; 0x3a
		state = OPEN;
    2776:	80 e5       	ldi	r24, 0x50	; 80
    2778:	80 93 ff 00 	sts	0x00FF, r24

		if(status == PASSWORD_PASS)
    277c:	8a ad       	ldd	r24, Y+58	; 0x3a
    277e:	8f 3f       	cpi	r24, 0xFF	; 255
    2780:	09 f0       	breq	.+2      	; 0x2784 <open_door+0x3a2>
    2782:	a5 c0       	rjmp	.+330    	; 0x28ce <open_door+0x4ec>
		{
			UART_sendByte(state);
    2784:	80 91 ff 00 	lds	r24, 0x00FF
    2788:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <UART_sendByte>

			/* print on screen that the door is unlocking anti clockwise
			 * until it finishes its delay for 3 seconds.
			*/

			LCD_clearScreen();
    278c:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0,0,"Door unlocking");
    2790:	20 ea       	ldi	r18, 0xA0	; 160
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	80 e0       	ldi	r24, 0x00	; 0
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	a9 01       	movw	r20, r18
    279a:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_displayStringRowColumn>

			if(UART_recieveByte() == FINISHED_ROTATING_CW)
    279e:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
    27a2:	80 37       	cpi	r24, 0x70	; 112
    27a4:	19 f4       	brne	.+6      	; 0x27ac <open_door+0x3ca>
			{
				UART_sendByte(START_DELAY);
    27a6:	80 e4       	ldi	r24, 0x40	; 64
    27a8:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <UART_sendByte>

			/* print on screen that the door is locking for 15 seconds
			 * then the motor turnes off.
			*/

			if(UART_recieveByte() == FINISHED_DELAY)
    27ac:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
    27b0:	80 38       	cpi	r24, 0x80	; 128
    27b2:	09 f0       	breq	.+2      	; 0x27b6 <open_door+0x3d4>
    27b4:	87 c0       	rjmp	.+270    	; 0x28c4 <open_door+0x4e2>
			{
				UART_sendByte(START_ROTATE_ACW);
    27b6:	82 e3       	ldi	r24, 0x32	; 50
    27b8:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <UART_sendByte>
				LCD_clearScreen();
    27bc:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Door is locking");
    27c0:	2f ea       	ldi	r18, 0xAF	; 175
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	60 e0       	ldi	r22, 0x00	; 0
    27c8:	a9 01       	movw	r20, r18
    27ca:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_displayStringRowColumn>
				for(uint8 i=0;i<15;i++)
    27ce:	19 ae       	std	Y+57, r1	; 0x39
    27d0:	75 c0       	rjmp	.+234    	; 0x28bc <open_door+0x4da>
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	aa e7       	ldi	r26, 0x7A	; 122
    27d8:	b4 e4       	ldi	r27, 0x44	; 68
    27da:	8b 87       	std	Y+11, r24	; 0x0b
    27dc:	9c 87       	std	Y+12, r25	; 0x0c
    27de:	ad 87       	std	Y+13, r26	; 0x0d
    27e0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	4a ef       	ldi	r20, 0xFA	; 250
    27f0:	54 e4       	ldi	r21, 0x44	; 68
    27f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f6:	dc 01       	movw	r26, r24
    27f8:	cb 01       	movw	r24, r22
    27fa:	8f 83       	std	Y+7, r24	; 0x07
    27fc:	98 87       	std	Y+8, r25	; 0x08
    27fe:	a9 87       	std	Y+9, r26	; 0x09
    2800:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2802:	6f 81       	ldd	r22, Y+7	; 0x07
    2804:	78 85       	ldd	r23, Y+8	; 0x08
    2806:	89 85       	ldd	r24, Y+9	; 0x09
    2808:	9a 85       	ldd	r25, Y+10	; 0x0a
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	40 e8       	ldi	r20, 0x80	; 128
    2810:	5f e3       	ldi	r21, 0x3F	; 63
    2812:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2816:	88 23       	and	r24, r24
    2818:	2c f4       	brge	.+10     	; 0x2824 <open_door+0x442>
		__ticks = 1;
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	9e 83       	std	Y+6, r25	; 0x06
    2820:	8d 83       	std	Y+5, r24	; 0x05
    2822:	3f c0       	rjmp	.+126    	; 0x28a2 <open_door+0x4c0>
	else if (__tmp > 65535)
    2824:	6f 81       	ldd	r22, Y+7	; 0x07
    2826:	78 85       	ldd	r23, Y+8	; 0x08
    2828:	89 85       	ldd	r24, Y+9	; 0x09
    282a:	9a 85       	ldd	r25, Y+10	; 0x0a
    282c:	20 e0       	ldi	r18, 0x00	; 0
    282e:	3f ef       	ldi	r19, 0xFF	; 255
    2830:	4f e7       	ldi	r20, 0x7F	; 127
    2832:	57 e4       	ldi	r21, 0x47	; 71
    2834:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2838:	18 16       	cp	r1, r24
    283a:	4c f5       	brge	.+82     	; 0x288e <open_door+0x4ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    283c:	6b 85       	ldd	r22, Y+11	; 0x0b
    283e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2840:	8d 85       	ldd	r24, Y+13	; 0x0d
    2842:	9e 85       	ldd	r25, Y+14	; 0x0e
    2844:	20 e0       	ldi	r18, 0x00	; 0
    2846:	30 e0       	ldi	r19, 0x00	; 0
    2848:	40 e2       	ldi	r20, 0x20	; 32
    284a:	51 e4       	ldi	r21, 0x41	; 65
    284c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	bc 01       	movw	r22, r24
    2856:	cd 01       	movw	r24, r26
    2858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    285c:	dc 01       	movw	r26, r24
    285e:	cb 01       	movw	r24, r22
    2860:	9e 83       	std	Y+6, r25	; 0x06
    2862:	8d 83       	std	Y+5, r24	; 0x05
    2864:	0f c0       	rjmp	.+30     	; 0x2884 <open_door+0x4a2>
    2866:	88 ec       	ldi	r24, 0xC8	; 200
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	9c 83       	std	Y+4, r25	; 0x04
    286c:	8b 83       	std	Y+3, r24	; 0x03
    286e:	8b 81       	ldd	r24, Y+3	; 0x03
    2870:	9c 81       	ldd	r25, Y+4	; 0x04
    2872:	01 97       	sbiw	r24, 0x01	; 1
    2874:	f1 f7       	brne	.-4      	; 0x2872 <open_door+0x490>
    2876:	9c 83       	std	Y+4, r25	; 0x04
    2878:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    287a:	8d 81       	ldd	r24, Y+5	; 0x05
    287c:	9e 81       	ldd	r25, Y+6	; 0x06
    287e:	01 97       	sbiw	r24, 0x01	; 1
    2880:	9e 83       	std	Y+6, r25	; 0x06
    2882:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2884:	8d 81       	ldd	r24, Y+5	; 0x05
    2886:	9e 81       	ldd	r25, Y+6	; 0x06
    2888:	00 97       	sbiw	r24, 0x00	; 0
    288a:	69 f7       	brne	.-38     	; 0x2866 <open_door+0x484>
    288c:	14 c0       	rjmp	.+40     	; 0x28b6 <open_door+0x4d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    288e:	6f 81       	ldd	r22, Y+7	; 0x07
    2890:	78 85       	ldd	r23, Y+8	; 0x08
    2892:	89 85       	ldd	r24, Y+9	; 0x09
    2894:	9a 85       	ldd	r25, Y+10	; 0x0a
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
    28a2:	8d 81       	ldd	r24, Y+5	; 0x05
    28a4:	9e 81       	ldd	r25, Y+6	; 0x06
    28a6:	9a 83       	std	Y+2, r25	; 0x02
    28a8:	89 83       	std	Y+1, r24	; 0x01
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	01 97       	sbiw	r24, 0x01	; 1
    28b0:	f1 f7       	brne	.-4      	; 0x28ae <open_door+0x4cc>
    28b2:	9a 83       	std	Y+2, r25	; 0x02
    28b4:	89 83       	std	Y+1, r24	; 0x01
    28b6:	89 ad       	ldd	r24, Y+57	; 0x39
    28b8:	8f 5f       	subi	r24, 0xFF	; 255
    28ba:	89 af       	std	Y+57, r24	; 0x39
    28bc:	89 ad       	ldd	r24, Y+57	; 0x39
    28be:	8f 30       	cpi	r24, 0x0F	; 15
    28c0:	08 f4       	brcc	.+2      	; 0x28c4 <open_door+0x4e2>
    28c2:	87 cf       	rjmp	.-242    	; 0x27d2 <open_door+0x3f0>

			/* wait until motor finished rotating totally then it can go to main
		       menu again
			*/

			if(UART_recieveByte() == FINISHED_ROTATING_ACW)
    28c4:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
			{

			}

			open_door();
    28c8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <open_door>
    28cc:	05 c0       	rjmp	.+10     	; 0x28d8 <open_door+0x4f6>

		}
		else
		{
			enter_pass();
    28ce:	0e 94 98 10 	call	0x2130	; 0x2130 <enter_pass>
    28d2:	02 c0       	rjmp	.+4      	; 0x28d8 <open_door+0x4f6>
		}

	}
	else
	{
		change_password();
    28d4:	0e 94 78 14 	call	0x28f0	; 0x28f0 <change_password>
	}
}
    28d8:	ca 5b       	subi	r28, 0xBA	; 186
    28da:	df 4f       	sbci	r29, 0xFF	; 255
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	cf 91       	pop	r28
    28e8:	df 91       	pop	r29
    28ea:	1f 91       	pop	r17
    28ec:	0f 91       	pop	r16
    28ee:	08 95       	ret

000028f0 <change_password>:
 * it asks him first to Enter the correct password. if matched then
 * you can enter the new password. if not you have 3 attempts.
 */

void change_password(void)
{
    28f0:	0f 93       	push	r16
    28f2:	1f 93       	push	r17
    28f4:	df 93       	push	r29
    28f6:	cf 93       	push	r28
    28f8:	cd b7       	in	r28, 0x3d	; 61
    28fa:	de b7       	in	r29, 0x3e	; 62
    28fc:	e6 97       	sbiw	r28, 0x36	; 54
    28fe:	0f b6       	in	r0, 0x3f	; 63
    2900:	f8 94       	cli
    2902:	de bf       	out	0x3e, r29	; 62
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	cd bf       	out	0x3d, r28	; 61
	uint8 arr1[10];
	uint8 i,status;

	c = 0;
    2908:	10 92 00 01 	sts	0x0100, r1
    290c:	80 e0       	ldi	r24, 0x00	; 0
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	a8 e4       	ldi	r26, 0x48	; 72
    2912:	b3 e4       	ldi	r27, 0x43	; 67
    2914:	8f a3       	std	Y+39, r24	; 0x27
    2916:	98 a7       	std	Y+40, r25	; 0x28
    2918:	a9 a7       	std	Y+41, r26	; 0x29
    291a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    291c:	6f a1       	ldd	r22, Y+39	; 0x27
    291e:	78 a5       	ldd	r23, Y+40	; 0x28
    2920:	89 a5       	ldd	r24, Y+41	; 0x29
    2922:	9a a5       	ldd	r25, Y+42	; 0x2a
    2924:	20 e0       	ldi	r18, 0x00	; 0
    2926:	30 e0       	ldi	r19, 0x00	; 0
    2928:	4a ef       	ldi	r20, 0xFA	; 250
    292a:	54 e4       	ldi	r21, 0x44	; 68
    292c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	8b a3       	std	Y+35, r24	; 0x23
    2936:	9c a3       	std	Y+36, r25	; 0x24
    2938:	ad a3       	std	Y+37, r26	; 0x25
    293a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    293c:	6b a1       	ldd	r22, Y+35	; 0x23
    293e:	7c a1       	ldd	r23, Y+36	; 0x24
    2940:	8d a1       	ldd	r24, Y+37	; 0x25
    2942:	9e a1       	ldd	r25, Y+38	; 0x26
    2944:	20 e0       	ldi	r18, 0x00	; 0
    2946:	30 e0       	ldi	r19, 0x00	; 0
    2948:	40 e8       	ldi	r20, 0x80	; 128
    294a:	5f e3       	ldi	r21, 0x3F	; 63
    294c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2950:	88 23       	and	r24, r24
    2952:	2c f4       	brge	.+10     	; 0x295e <change_password+0x6e>
		__ticks = 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	9a a3       	std	Y+34, r25	; 0x22
    295a:	89 a3       	std	Y+33, r24	; 0x21
    295c:	3f c0       	rjmp	.+126    	; 0x29dc <change_password+0xec>
	else if (__tmp > 65535)
    295e:	6b a1       	ldd	r22, Y+35	; 0x23
    2960:	7c a1       	ldd	r23, Y+36	; 0x24
    2962:	8d a1       	ldd	r24, Y+37	; 0x25
    2964:	9e a1       	ldd	r25, Y+38	; 0x26
    2966:	20 e0       	ldi	r18, 0x00	; 0
    2968:	3f ef       	ldi	r19, 0xFF	; 255
    296a:	4f e7       	ldi	r20, 0x7F	; 127
    296c:	57 e4       	ldi	r21, 0x47	; 71
    296e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2972:	18 16       	cp	r1, r24
    2974:	4c f5       	brge	.+82     	; 0x29c8 <change_password+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2976:	6f a1       	ldd	r22, Y+39	; 0x27
    2978:	78 a5       	ldd	r23, Y+40	; 0x28
    297a:	89 a5       	ldd	r24, Y+41	; 0x29
    297c:	9a a5       	ldd	r25, Y+42	; 0x2a
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e2       	ldi	r20, 0x20	; 32
    2984:	51 e4       	ldi	r21, 0x41	; 65
    2986:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2996:	dc 01       	movw	r26, r24
    2998:	cb 01       	movw	r24, r22
    299a:	9a a3       	std	Y+34, r25	; 0x22
    299c:	89 a3       	std	Y+33, r24	; 0x21
    299e:	0f c0       	rjmp	.+30     	; 0x29be <change_password+0xce>
    29a0:	88 ec       	ldi	r24, 0xC8	; 200
    29a2:	90 e0       	ldi	r25, 0x00	; 0
    29a4:	98 a3       	std	Y+32, r25	; 0x20
    29a6:	8f 8f       	std	Y+31, r24	; 0x1f
    29a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    29aa:	98 a1       	ldd	r25, Y+32	; 0x20
    29ac:	01 97       	sbiw	r24, 0x01	; 1
    29ae:	f1 f7       	brne	.-4      	; 0x29ac <change_password+0xbc>
    29b0:	98 a3       	std	Y+32, r25	; 0x20
    29b2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29b4:	89 a1       	ldd	r24, Y+33	; 0x21
    29b6:	9a a1       	ldd	r25, Y+34	; 0x22
    29b8:	01 97       	sbiw	r24, 0x01	; 1
    29ba:	9a a3       	std	Y+34, r25	; 0x22
    29bc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29be:	89 a1       	ldd	r24, Y+33	; 0x21
    29c0:	9a a1       	ldd	r25, Y+34	; 0x22
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	69 f7       	brne	.-38     	; 0x29a0 <change_password+0xb0>
    29c6:	14 c0       	rjmp	.+40     	; 0x29f0 <change_password+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29c8:	6b a1       	ldd	r22, Y+35	; 0x23
    29ca:	7c a1       	ldd	r23, Y+36	; 0x24
    29cc:	8d a1       	ldd	r24, Y+37	; 0x25
    29ce:	9e a1       	ldd	r25, Y+38	; 0x26
    29d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	9a a3       	std	Y+34, r25	; 0x22
    29da:	89 a3       	std	Y+33, r24	; 0x21
    29dc:	89 a1       	ldd	r24, Y+33	; 0x21
    29de:	9a a1       	ldd	r25, Y+34	; 0x22
    29e0:	9e 8f       	std	Y+30, r25	; 0x1e
    29e2:	8d 8f       	std	Y+29, r24	; 0x1d
    29e4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29e6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29e8:	01 97       	sbiw	r24, 0x01	; 1
    29ea:	f1 f7       	brne	.-4      	; 0x29e8 <change_password+0xf8>
    29ec:	9e 8f       	std	Y+30, r25	; 0x1e
    29ee:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(200);
	LCD_clearScreen();
    29f0:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	60 e0       	ldi	r22, 0x00	; 0
    29f8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>
	LCD_displayString("plz enter pass: "); // tells the user that he awaits for password //
    29fc:	80 e6       	ldi	r24, 0x60	; 96
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_displayString>
	LCD_moveCursor(1, 0);
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	60 e0       	ldi	r22, 0x00	; 0
    2a08:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>

	for(i=0;i<5;i++)
    2a0c:	1c a6       	std	Y+44, r1	; 0x2c
    2a0e:	84 c0       	rjmp	.+264    	; 0x2b18 <change_password+0x228>
	{
		arr1[i] = KEYPAD_getPressedKey(); // receive input from string char by char //
    2a10:	8c a5       	ldd	r24, Y+44	; 0x2c
    2a12:	08 2f       	mov	r16, r24
    2a14:	10 e0       	ldi	r17, 0x00	; 0
    2a16:	0e 94 b0 09 	call	0x1360	; 0x1360 <KEYPAD_getPressedKey>
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	ce 01       	movw	r24, r28
    2a1e:	8d 96       	adiw	r24, 0x2d	; 45
    2a20:	fc 01       	movw	r30, r24
    2a22:	e0 0f       	add	r30, r16
    2a24:	f1 1f       	adc	r31, r17
    2a26:	20 83       	st	Z, r18
		LCD_displayCharacter('*');
    2a28:	8a e2       	ldi	r24, 0x2A	; 42
    2a2a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_displayCharacter>
    2a2e:	80 e0       	ldi	r24, 0x00	; 0
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	a8 ec       	ldi	r26, 0xC8	; 200
    2a34:	b3 e4       	ldi	r27, 0x43	; 67
    2a36:	89 8f       	std	Y+25, r24	; 0x19
    2a38:	9a 8f       	std	Y+26, r25	; 0x1a
    2a3a:	ab 8f       	std	Y+27, r26	; 0x1b
    2a3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a3e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a40:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a42:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a44:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	4a ef       	ldi	r20, 0xFA	; 250
    2a4c:	54 e4       	ldi	r21, 0x44	; 68
    2a4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a52:	dc 01       	movw	r26, r24
    2a54:	cb 01       	movw	r24, r22
    2a56:	8d 8b       	std	Y+21, r24	; 0x15
    2a58:	9e 8b       	std	Y+22, r25	; 0x16
    2a5a:	af 8b       	std	Y+23, r26	; 0x17
    2a5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a5e:	6d 89       	ldd	r22, Y+21	; 0x15
    2a60:	7e 89       	ldd	r23, Y+22	; 0x16
    2a62:	8f 89       	ldd	r24, Y+23	; 0x17
    2a64:	98 8d       	ldd	r25, Y+24	; 0x18
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	40 e8       	ldi	r20, 0x80	; 128
    2a6c:	5f e3       	ldi	r21, 0x3F	; 63
    2a6e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a72:	88 23       	and	r24, r24
    2a74:	2c f4       	brge	.+10     	; 0x2a80 <change_password+0x190>
		__ticks = 1;
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	90 e0       	ldi	r25, 0x00	; 0
    2a7a:	9c 8b       	std	Y+20, r25	; 0x14
    2a7c:	8b 8b       	std	Y+19, r24	; 0x13
    2a7e:	3f c0       	rjmp	.+126    	; 0x2afe <change_password+0x20e>
	else if (__tmp > 65535)
    2a80:	6d 89       	ldd	r22, Y+21	; 0x15
    2a82:	7e 89       	ldd	r23, Y+22	; 0x16
    2a84:	8f 89       	ldd	r24, Y+23	; 0x17
    2a86:	98 8d       	ldd	r25, Y+24	; 0x18
    2a88:	20 e0       	ldi	r18, 0x00	; 0
    2a8a:	3f ef       	ldi	r19, 0xFF	; 255
    2a8c:	4f e7       	ldi	r20, 0x7F	; 127
    2a8e:	57 e4       	ldi	r21, 0x47	; 71
    2a90:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a94:	18 16       	cp	r1, r24
    2a96:	4c f5       	brge	.+82     	; 0x2aea <change_password+0x1fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a98:	69 8d       	ldd	r22, Y+25	; 0x19
    2a9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2aa0:	20 e0       	ldi	r18, 0x00	; 0
    2aa2:	30 e0       	ldi	r19, 0x00	; 0
    2aa4:	40 e2       	ldi	r20, 0x20	; 32
    2aa6:	51 e4       	ldi	r21, 0x41	; 65
    2aa8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	bc 01       	movw	r22, r24
    2ab2:	cd 01       	movw	r24, r26
    2ab4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ab8:	dc 01       	movw	r26, r24
    2aba:	cb 01       	movw	r24, r22
    2abc:	9c 8b       	std	Y+20, r25	; 0x14
    2abe:	8b 8b       	std	Y+19, r24	; 0x13
    2ac0:	0f c0       	rjmp	.+30     	; 0x2ae0 <change_password+0x1f0>
    2ac2:	88 ec       	ldi	r24, 0xC8	; 200
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	9a 8b       	std	Y+18, r25	; 0x12
    2ac8:	89 8b       	std	Y+17, r24	; 0x11
    2aca:	89 89       	ldd	r24, Y+17	; 0x11
    2acc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ace:	01 97       	sbiw	r24, 0x01	; 1
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <change_password+0x1de>
    2ad2:	9a 8b       	std	Y+18, r25	; 0x12
    2ad4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ad6:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad8:	9c 89       	ldd	r25, Y+20	; 0x14
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	9c 8b       	std	Y+20, r25	; 0x14
    2ade:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ae0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ae4:	00 97       	sbiw	r24, 0x00	; 0
    2ae6:	69 f7       	brne	.-38     	; 0x2ac2 <change_password+0x1d2>
    2ae8:	14 c0       	rjmp	.+40     	; 0x2b12 <change_password+0x222>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aea:	6d 89       	ldd	r22, Y+21	; 0x15
    2aec:	7e 89       	ldd	r23, Y+22	; 0x16
    2aee:	8f 89       	ldd	r24, Y+23	; 0x17
    2af0:	98 8d       	ldd	r25, Y+24	; 0x18
    2af2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	9c 8b       	std	Y+20, r25	; 0x14
    2afc:	8b 8b       	std	Y+19, r24	; 0x13
    2afe:	8b 89       	ldd	r24, Y+19	; 0x13
    2b00:	9c 89       	ldd	r25, Y+20	; 0x14
    2b02:	98 8b       	std	Y+16, r25	; 0x10
    2b04:	8f 87       	std	Y+15, r24	; 0x0f
    2b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b08:	98 89       	ldd	r25, Y+16	; 0x10
    2b0a:	01 97       	sbiw	r24, 0x01	; 1
    2b0c:	f1 f7       	brne	.-4      	; 0x2b0a <change_password+0x21a>
    2b0e:	98 8b       	std	Y+16, r25	; 0x10
    2b10:	8f 87       	std	Y+15, r24	; 0x0f
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString("plz enter pass: "); // tells the user that he awaits for password //
	LCD_moveCursor(1, 0);

	for(i=0;i<5;i++)
    2b12:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b14:	8f 5f       	subi	r24, 0xFF	; 255
    2b16:	8c a7       	std	Y+44, r24	; 0x2c
    2b18:	8c a5       	ldd	r24, Y+44	; 0x2c
    2b1a:	85 30       	cpi	r24, 0x05	; 5
    2b1c:	08 f4       	brcc	.+2      	; 0x2b20 <change_password+0x230>
    2b1e:	78 cf       	rjmp	.-272    	; 0x2a10 <change_password+0x120>
	{
		arr1[i] = KEYPAD_getPressedKey(); // receive input from string char by char //
		LCD_displayCharacter('*');
		_delay_ms(400);
	}
	while(KEYPAD_getPressedKey() != '=') {} // wait until it receives equal (Enter button) //
    2b20:	0e 94 b0 09 	call	0x1360	; 0x1360 <KEYPAD_getPressedKey>
    2b24:	8d 33       	cpi	r24, 0x3D	; 61
    2b26:	e1 f7       	brne	.-8      	; 0x2b20 <change_password+0x230>
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	a8 e4       	ldi	r26, 0x48	; 72
    2b2e:	b3 e4       	ldi	r27, 0x43	; 67
    2b30:	8b 87       	std	Y+11, r24	; 0x0b
    2b32:	9c 87       	std	Y+12, r25	; 0x0c
    2b34:	ad 87       	std	Y+13, r26	; 0x0d
    2b36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	4a ef       	ldi	r20, 0xFA	; 250
    2b46:	54 e4       	ldi	r21, 0x44	; 68
    2b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	8f 83       	std	Y+7, r24	; 0x07
    2b52:	98 87       	std	Y+8, r25	; 0x08
    2b54:	a9 87       	std	Y+9, r26	; 0x09
    2b56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b58:	6f 81       	ldd	r22, Y+7	; 0x07
    2b5a:	78 85       	ldd	r23, Y+8	; 0x08
    2b5c:	89 85       	ldd	r24, Y+9	; 0x09
    2b5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e8       	ldi	r20, 0x80	; 128
    2b66:	5f e3       	ldi	r21, 0x3F	; 63
    2b68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b6c:	88 23       	and	r24, r24
    2b6e:	2c f4       	brge	.+10     	; 0x2b7a <change_password+0x28a>
		__ticks = 1;
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	9e 83       	std	Y+6, r25	; 0x06
    2b76:	8d 83       	std	Y+5, r24	; 0x05
    2b78:	3f c0       	rjmp	.+126    	; 0x2bf8 <change_password+0x308>
	else if (__tmp > 65535)
    2b7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b7c:	78 85       	ldd	r23, Y+8	; 0x08
    2b7e:	89 85       	ldd	r24, Y+9	; 0x09
    2b80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	3f ef       	ldi	r19, 0xFF	; 255
    2b86:	4f e7       	ldi	r20, 0x7F	; 127
    2b88:	57 e4       	ldi	r21, 0x47	; 71
    2b8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b8e:	18 16       	cp	r1, r24
    2b90:	4c f5       	brge	.+82     	; 0x2be4 <change_password+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e2       	ldi	r20, 0x20	; 32
    2ba0:	51 e4       	ldi	r21, 0x41	; 65
    2ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ba6:	dc 01       	movw	r26, r24
    2ba8:	cb 01       	movw	r24, r22
    2baa:	bc 01       	movw	r22, r24
    2bac:	cd 01       	movw	r24, r26
    2bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb2:	dc 01       	movw	r26, r24
    2bb4:	cb 01       	movw	r24, r22
    2bb6:	9e 83       	std	Y+6, r25	; 0x06
    2bb8:	8d 83       	std	Y+5, r24	; 0x05
    2bba:	0f c0       	rjmp	.+30     	; 0x2bda <change_password+0x2ea>
    2bbc:	88 ec       	ldi	r24, 0xC8	; 200
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	9c 83       	std	Y+4, r25	; 0x04
    2bc2:	8b 83       	std	Y+3, r24	; 0x03
    2bc4:	8b 81       	ldd	r24, Y+3	; 0x03
    2bc6:	9c 81       	ldd	r25, Y+4	; 0x04
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <change_password+0x2d8>
    2bcc:	9c 83       	std	Y+4, r25	; 0x04
    2bce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bd4:	01 97       	sbiw	r24, 0x01	; 1
    2bd6:	9e 83       	std	Y+6, r25	; 0x06
    2bd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bda:	8d 81       	ldd	r24, Y+5	; 0x05
    2bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2bde:	00 97       	sbiw	r24, 0x00	; 0
    2be0:	69 f7       	brne	.-38     	; 0x2bbc <change_password+0x2cc>
    2be2:	14 c0       	rjmp	.+40     	; 0x2c0c <change_password+0x31c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2be4:	6f 81       	ldd	r22, Y+7	; 0x07
    2be6:	78 85       	ldd	r23, Y+8	; 0x08
    2be8:	89 85       	ldd	r24, Y+9	; 0x09
    2bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	9e 83       	std	Y+6, r25	; 0x06
    2bf6:	8d 83       	std	Y+5, r24	; 0x05
    2bf8:	8d 81       	ldd	r24, Y+5	; 0x05
    2bfa:	9e 81       	ldd	r25, Y+6	; 0x06
    2bfc:	9a 83       	std	Y+2, r25	; 0x02
    2bfe:	89 83       	std	Y+1, r24	; 0x01
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	9a 81       	ldd	r25, Y+2	; 0x02
    2c04:	01 97       	sbiw	r24, 0x01	; 1
    2c06:	f1 f7       	brne	.-4      	; 0x2c04 <change_password+0x314>
    2c08:	9a 83       	std	Y+2, r25	; 0x02
    2c0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);

	arr1[i] = '#';  // convert the array into string by add to it null terminator //
    2c0c:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	ce 01       	movw	r24, r28
    2c14:	8d 96       	adiw	r24, 0x2d	; 45
    2c16:	fc 01       	movw	r30, r24
    2c18:	e2 0f       	add	r30, r18
    2c1a:	f3 1f       	adc	r31, r19
    2c1c:	83 e2       	ldi	r24, 0x23	; 35
    2c1e:	80 83       	st	Z, r24
	arr1[i+1] = '\0'; // # character so i can send it as a string bu UART //
    2c20:	8c a5       	ldd	r24, Y+44	; 0x2c
    2c22:	88 2f       	mov	r24, r24
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	9c 01       	movw	r18, r24
    2c28:	2f 5f       	subi	r18, 0xFF	; 255
    2c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2c:	ce 01       	movw	r24, r28
    2c2e:	8d 96       	adiw	r24, 0x2d	; 45
    2c30:	fc 01       	movw	r30, r24
    2c32:	e2 0f       	add	r30, r18
    2c34:	f3 1f       	adc	r31, r19
    2c36:	10 82       	st	Z, r1

	while(UART_recieveByte() != MC2_READY) {}
    2c38:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
    2c3c:	80 31       	cpi	r24, 0x10	; 16
    2c3e:	e1 f7       	brne	.-8      	; 0x2c38 <change_password+0x348>
	UART_sendString(arr1); // wait until MC1 gets Flag that MC2 is ready to receive //
    2c40:	ce 01       	movw	r24, r28
    2c42:	8d 96       	adiw	r24, 0x2d	; 45
    2c44:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <UART_sendString>
	status = UART_recieveByte(); // send string to MC2 and wait for receive if its succes or fail //
    2c48:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
    2c4c:	8b a7       	std	Y+43, r24	; 0x2b
	state = CHANGE;
    2c4e:	80 e6       	ldi	r24, 0x60	; 96
    2c50:	80 93 ff 00 	sts	0x00FF, r24
	if(status == PASSWORD_PASS)
    2c54:	8b a5       	ldd	r24, Y+43	; 0x2b
    2c56:	8f 3f       	cpi	r24, 0xFF	; 255
    2c58:	39 f4       	brne	.+14     	; 0x2c68 <change_password+0x378>
	{
		UART_sendByte(state);
    2c5a:	80 91 ff 00 	lds	r24, 0x00FF
    2c5e:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <UART_sendByte>
		setup_password();
    2c62:	0e 94 41 16 	call	0x2c82	; 0x2c82 <setup_password>
    2c66:	02 c0       	rjmp	.+4      	; 0x2c6c <change_password+0x37c>
	}
	else
	{
		enter_pass();
    2c68:	0e 94 98 10 	call	0x2130	; 0x2130 <enter_pass>
	}

}
    2c6c:	e6 96       	adiw	r28, 0x36	; 54
    2c6e:	0f b6       	in	r0, 0x3f	; 63
    2c70:	f8 94       	cli
    2c72:	de bf       	out	0x3e, r29	; 62
    2c74:	0f be       	out	0x3f, r0	; 63
    2c76:	cd bf       	out	0x3d, r28	; 61
    2c78:	cf 91       	pop	r28
    2c7a:	df 91       	pop	r29
    2c7c:	1f 91       	pop	r17
    2c7e:	0f 91       	pop	r16
    2c80:	08 95       	ret

00002c82 <setup_password>:
 * then the confirmation password and receive inputs from keypad
 * then send them to MC2 to compare them.
 */

void setup_password()
{
    2c82:	0f 93       	push	r16
    2c84:	1f 93       	push	r17
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	cc 55       	subi	r28, 0x5C	; 92
    2c90:	d0 40       	sbci	r29, 0x00	; 0
    2c92:	0f b6       	in	r0, 0x3f	; 63
    2c94:	f8 94       	cli
    2c96:	de bf       	out	0x3e, r29	; 62
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	cd bf       	out	0x3d, r28	; 61
	uint8 arr1[10],arr2[10];
	uint8 i,status;

	c = 0;
    2c9c:	10 92 00 01 	sts	0x0100, r1
	LCD_clearScreen();
    2ca0:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	60 e0       	ldi	r22, 0x00	; 0
    2ca8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>
	LCD_displayString("plz enter pass: ");
    2cac:	80 e6       	ldi	r24, 0x60	; 96
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <LCD_displayString>
	LCD_moveCursor(1, 0);
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	0e 94 dd 0f 	call	0x1fba	; 0x1fba <LCD_moveCursor>

	for(i=0;i<5;i++)
    2cbc:	fe 01       	movw	r30, r28
    2cbe:	e8 5b       	subi	r30, 0xB8	; 184
    2cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc2:	10 82       	st	Z, r1
    2cc4:	a1 c0       	rjmp	.+322    	; 0x2e08 <setup_password+0x186>
	{
		arr1[i] = KEYPAD_getPressedKey();
    2cc6:	fe 01       	movw	r30, r28
    2cc8:	e8 5b       	subi	r30, 0xB8	; 184
    2cca:	ff 4f       	sbci	r31, 0xFF	; 255
    2ccc:	80 81       	ld	r24, Z
    2cce:	08 2f       	mov	r16, r24
    2cd0:	10 e0       	ldi	r17, 0x00	; 0
    2cd2:	0e 94 b0 09 	call	0x1360	; 0x1360 <KEYPAD_getPressedKey>
    2cd6:	28 2f       	mov	r18, r24
    2cd8:	ce 01       	movw	r24, r28
    2cda:	87 5b       	subi	r24, 0xB7	; 183
    2cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    2cde:	fc 01       	movw	r30, r24
    2ce0:	e0 0f       	add	r30, r16
    2ce2:	f1 1f       	adc	r31, r17
    2ce4:	20 83       	st	Z, r18
		LCD_displayCharacter('*');
    2ce6:	8a e2       	ldi	r24, 0x2A	; 42
    2ce8:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_displayCharacter>
    2cec:	fe 01       	movw	r30, r28
    2cee:	ed 5b       	subi	r30, 0xBD	; 189
    2cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf2:	80 e0       	ldi	r24, 0x00	; 0
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	a8 ec       	ldi	r26, 0xC8	; 200
    2cf8:	b3 e4       	ldi	r27, 0x43	; 67
    2cfa:	80 83       	st	Z, r24
    2cfc:	91 83       	std	Z+1, r25	; 0x01
    2cfe:	a2 83       	std	Z+2, r26	; 0x02
    2d00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d02:	8e 01       	movw	r16, r28
    2d04:	01 5c       	subi	r16, 0xC1	; 193
    2d06:	1f 4f       	sbci	r17, 0xFF	; 255
    2d08:	fe 01       	movw	r30, r28
    2d0a:	ed 5b       	subi	r30, 0xBD	; 189
    2d0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0e:	60 81       	ld	r22, Z
    2d10:	71 81       	ldd	r23, Z+1	; 0x01
    2d12:	82 81       	ldd	r24, Z+2	; 0x02
    2d14:	93 81       	ldd	r25, Z+3	; 0x03
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	30 e0       	ldi	r19, 0x00	; 0
    2d1a:	4a ef       	ldi	r20, 0xFA	; 250
    2d1c:	54 e4       	ldi	r21, 0x44	; 68
    2d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	f8 01       	movw	r30, r16
    2d28:	80 83       	st	Z, r24
    2d2a:	91 83       	std	Z+1, r25	; 0x01
    2d2c:	a2 83       	std	Z+2, r26	; 0x02
    2d2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d30:	fe 01       	movw	r30, r28
    2d32:	ff 96       	adiw	r30, 0x3f	; 63
    2d34:	60 81       	ld	r22, Z
    2d36:	71 81       	ldd	r23, Z+1	; 0x01
    2d38:	82 81       	ldd	r24, Z+2	; 0x02
    2d3a:	93 81       	ldd	r25, Z+3	; 0x03
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e8       	ldi	r20, 0x80	; 128
    2d42:	5f e3       	ldi	r21, 0x3F	; 63
    2d44:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d48:	88 23       	and	r24, r24
    2d4a:	2c f4       	brge	.+10     	; 0x2d56 <setup_password+0xd4>
		__ticks = 1;
    2d4c:	81 e0       	ldi	r24, 0x01	; 1
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	9e af       	std	Y+62, r25	; 0x3e
    2d52:	8d af       	std	Y+61, r24	; 0x3d
    2d54:	46 c0       	rjmp	.+140    	; 0x2de2 <setup_password+0x160>
	else if (__tmp > 65535)
    2d56:	fe 01       	movw	r30, r28
    2d58:	ff 96       	adiw	r30, 0x3f	; 63
    2d5a:	60 81       	ld	r22, Z
    2d5c:	71 81       	ldd	r23, Z+1	; 0x01
    2d5e:	82 81       	ldd	r24, Z+2	; 0x02
    2d60:	93 81       	ldd	r25, Z+3	; 0x03
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	3f ef       	ldi	r19, 0xFF	; 255
    2d66:	4f e7       	ldi	r20, 0x7F	; 127
    2d68:	57 e4       	ldi	r21, 0x47	; 71
    2d6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d6e:	18 16       	cp	r1, r24
    2d70:	64 f5       	brge	.+88     	; 0x2dca <setup_password+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d72:	fe 01       	movw	r30, r28
    2d74:	ed 5b       	subi	r30, 0xBD	; 189
    2d76:	ff 4f       	sbci	r31, 0xFF	; 255
    2d78:	60 81       	ld	r22, Z
    2d7a:	71 81       	ldd	r23, Z+1	; 0x01
    2d7c:	82 81       	ldd	r24, Z+2	; 0x02
    2d7e:	93 81       	ldd	r25, Z+3	; 0x03
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	40 e2       	ldi	r20, 0x20	; 32
    2d86:	51 e4       	ldi	r21, 0x41	; 65
    2d88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	bc 01       	movw	r22, r24
    2d92:	cd 01       	movw	r24, r26
    2d94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d98:	dc 01       	movw	r26, r24
    2d9a:	cb 01       	movw	r24, r22
    2d9c:	9e af       	std	Y+62, r25	; 0x3e
    2d9e:	8d af       	std	Y+61, r24	; 0x3d
    2da0:	0f c0       	rjmp	.+30     	; 0x2dc0 <setup_password+0x13e>
    2da2:	88 ec       	ldi	r24, 0xC8	; 200
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	9c af       	std	Y+60, r25	; 0x3c
    2da8:	8b af       	std	Y+59, r24	; 0x3b
    2daa:	8b ad       	ldd	r24, Y+59	; 0x3b
    2dac:	9c ad       	ldd	r25, Y+60	; 0x3c
    2dae:	01 97       	sbiw	r24, 0x01	; 1
    2db0:	f1 f7       	brne	.-4      	; 0x2dae <setup_password+0x12c>
    2db2:	9c af       	std	Y+60, r25	; 0x3c
    2db4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2db8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dba:	01 97       	sbiw	r24, 0x01	; 1
    2dbc:	9e af       	std	Y+62, r25	; 0x3e
    2dbe:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dc0:	8d ad       	ldd	r24, Y+61	; 0x3d
    2dc2:	9e ad       	ldd	r25, Y+62	; 0x3e
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	69 f7       	brne	.-38     	; 0x2da2 <setup_password+0x120>
    2dc8:	16 c0       	rjmp	.+44     	; 0x2df6 <setup_password+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dca:	fe 01       	movw	r30, r28
    2dcc:	ff 96       	adiw	r30, 0x3f	; 63
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	82 81       	ldd	r24, Z+2	; 0x02
    2dd4:	93 81       	ldd	r25, Z+3	; 0x03
    2dd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dda:	dc 01       	movw	r26, r24
    2ddc:	cb 01       	movw	r24, r22
    2dde:	9e af       	std	Y+62, r25	; 0x3e
    2de0:	8d af       	std	Y+61, r24	; 0x3d
    2de2:	8d ad       	ldd	r24, Y+61	; 0x3d
    2de4:	9e ad       	ldd	r25, Y+62	; 0x3e
    2de6:	9a af       	std	Y+58, r25	; 0x3a
    2de8:	89 af       	std	Y+57, r24	; 0x39
    2dea:	89 ad       	ldd	r24, Y+57	; 0x39
    2dec:	9a ad       	ldd	r25, Y+58	; 0x3a
    2dee:	01 97       	sbiw	r24, 0x01	; 1
    2df0:	f1 f7       	brne	.-4      	; 0x2dee <setup_password+0x16c>
    2df2:	9a af       	std	Y+58, r25	; 0x3a
    2df4:	89 af       	std	Y+57, r24	; 0x39
	LCD_clearScreen();
	LCD_moveCursor(0,0);
	LCD_displayString("plz enter pass: ");
	LCD_moveCursor(1, 0);

	for(i=0;i<5;i++)
    2df6:	de 01       	movw	r26, r28
    2df8:	a8 5b       	subi	r26, 0xB8	; 184
    2dfa:	bf 4f       	sbci	r27, 0xFF	; 255
    2dfc:	fe 01       	movw	r30, r28
    2dfe:	e8 5b       	subi	r30, 0xB8	; 184
    2e00:	ff 4f       	sbci	r31, 0xFF	; 255
    2e02:	80 81       	ld	r24, Z
    2e04:	8f 5f       	subi	r24, 0xFF	; 255
    2e06:	8c 93       	st	X, r24
    2e08:	fe 01       	movw	r30, r28
    2e0a:	e8 5b       	subi	r30, 0xB8	; 184
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	80 81       	ld	r24, Z
    2e10:	85 30       	cpi	r24, 0x05	; 5
    2e12:	08 f4       	brcc	.+2      	; 0x2e16 <setup_password+0x194>
    2e14:	58 cf       	rjmp	.-336    	; 0x2cc6 <setup_password+0x44>
	{
		arr1[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(400);
	}
	while(KEYPAD_getPressedKey() != '=') {}
    2e16:	0e 94 b0 09 	call	0x1360	; 0x1360 <KEYPAD_getPressedKey>
    2e1a:	8d 33       	cpi	r24, 0x3D	; 61
    2e1c:	e1 f7       	brne	.-8      	; 0x2e16 <setup_password+0x194>
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	a8 e4       	ldi	r26, 0x48	; 72
    2e24:	b3 e4       	ldi	r27, 0x43	; 67
    2e26:	8d ab       	std	Y+53, r24	; 0x35
    2e28:	9e ab       	std	Y+54, r25	; 0x36
    2e2a:	af ab       	std	Y+55, r26	; 0x37
    2e2c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e2e:	6d a9       	ldd	r22, Y+53	; 0x35
    2e30:	7e a9       	ldd	r23, Y+54	; 0x36
    2e32:	8f a9       	ldd	r24, Y+55	; 0x37
    2e34:	98 ad       	ldd	r25, Y+56	; 0x38
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	30 e0       	ldi	r19, 0x00	; 0
    2e3a:	4a ef       	ldi	r20, 0xFA	; 250
    2e3c:	54 e4       	ldi	r21, 0x44	; 68
    2e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e42:	dc 01       	movw	r26, r24
    2e44:	cb 01       	movw	r24, r22
    2e46:	89 ab       	std	Y+49, r24	; 0x31
    2e48:	9a ab       	std	Y+50, r25	; 0x32
    2e4a:	ab ab       	std	Y+51, r26	; 0x33
    2e4c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2e4e:	69 a9       	ldd	r22, Y+49	; 0x31
    2e50:	7a a9       	ldd	r23, Y+50	; 0x32
    2e52:	8b a9       	ldd	r24, Y+51	; 0x33
    2e54:	9c a9       	ldd	r25, Y+52	; 0x34
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	40 e8       	ldi	r20, 0x80	; 128
    2e5c:	5f e3       	ldi	r21, 0x3F	; 63
    2e5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e62:	88 23       	and	r24, r24
    2e64:	2c f4       	brge	.+10     	; 0x2e70 <setup_password+0x1ee>
		__ticks = 1;
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	90 e0       	ldi	r25, 0x00	; 0
    2e6a:	98 ab       	std	Y+48, r25	; 0x30
    2e6c:	8f a7       	std	Y+47, r24	; 0x2f
    2e6e:	3f c0       	rjmp	.+126    	; 0x2eee <setup_password+0x26c>
	else if (__tmp > 65535)
    2e70:	69 a9       	ldd	r22, Y+49	; 0x31
    2e72:	7a a9       	ldd	r23, Y+50	; 0x32
    2e74:	8b a9       	ldd	r24, Y+51	; 0x33
    2e76:	9c a9       	ldd	r25, Y+52	; 0x34
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	3f ef       	ldi	r19, 0xFF	; 255
    2e7c:	4f e7       	ldi	r20, 0x7F	; 127
    2e7e:	57 e4       	ldi	r21, 0x47	; 71
    2e80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e84:	18 16       	cp	r1, r24
    2e86:	4c f5       	brge	.+82     	; 0x2eda <setup_password+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e88:	6d a9       	ldd	r22, Y+53	; 0x35
    2e8a:	7e a9       	ldd	r23, Y+54	; 0x36
    2e8c:	8f a9       	ldd	r24, Y+55	; 0x37
    2e8e:	98 ad       	ldd	r25, Y+56	; 0x38
    2e90:	20 e0       	ldi	r18, 0x00	; 0
    2e92:	30 e0       	ldi	r19, 0x00	; 0
    2e94:	40 e2       	ldi	r20, 0x20	; 32
    2e96:	51 e4       	ldi	r21, 0x41	; 65
    2e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9c:	dc 01       	movw	r26, r24
    2e9e:	cb 01       	movw	r24, r22
    2ea0:	bc 01       	movw	r22, r24
    2ea2:	cd 01       	movw	r24, r26
    2ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	98 ab       	std	Y+48, r25	; 0x30
    2eae:	8f a7       	std	Y+47, r24	; 0x2f
    2eb0:	0f c0       	rjmp	.+30     	; 0x2ed0 <setup_password+0x24e>
    2eb2:	88 ec       	ldi	r24, 0xC8	; 200
    2eb4:	90 e0       	ldi	r25, 0x00	; 0
    2eb6:	9e a7       	std	Y+46, r25	; 0x2e
    2eb8:	8d a7       	std	Y+45, r24	; 0x2d
    2eba:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ebc:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	f1 f7       	brne	.-4      	; 0x2ebe <setup_password+0x23c>
    2ec2:	9e a7       	std	Y+46, r25	; 0x2e
    2ec4:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ec8:	98 a9       	ldd	r25, Y+48	; 0x30
    2eca:	01 97       	sbiw	r24, 0x01	; 1
    2ecc:	98 ab       	std	Y+48, r25	; 0x30
    2ece:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed0:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ed2:	98 a9       	ldd	r25, Y+48	; 0x30
    2ed4:	00 97       	sbiw	r24, 0x00	; 0
    2ed6:	69 f7       	brne	.-38     	; 0x2eb2 <setup_password+0x230>
    2ed8:	14 c0       	rjmp	.+40     	; 0x2f02 <setup_password+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eda:	69 a9       	ldd	r22, Y+49	; 0x31
    2edc:	7a a9       	ldd	r23, Y+50	; 0x32
    2ede:	8b a9       	ldd	r24, Y+51	; 0x33
    2ee0:	9c a9       	ldd	r25, Y+52	; 0x34
    2ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee6:	dc 01       	movw	r26, r24
    2ee8:	cb 01       	movw	r24, r22
    2eea:	98 ab       	std	Y+48, r25	; 0x30
    2eec:	8f a7       	std	Y+47, r24	; 0x2f
    2eee:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ef0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ef2:	9c a7       	std	Y+44, r25	; 0x2c
    2ef4:	8b a7       	std	Y+43, r24	; 0x2b
    2ef6:	8b a5       	ldd	r24, Y+43	; 0x2b
    2ef8:	9c a5       	ldd	r25, Y+44	; 0x2c
    2efa:	01 97       	sbiw	r24, 0x01	; 1
    2efc:	f1 f7       	brne	.-4      	; 0x2efa <setup_password+0x278>
    2efe:	9c a7       	std	Y+44, r25	; 0x2c
    2f00:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(200);

	arr1[i] = '#';
    2f02:	fe 01       	movw	r30, r28
    2f04:	e8 5b       	subi	r30, 0xB8	; 184
    2f06:	ff 4f       	sbci	r31, 0xFF	; 255
    2f08:	80 81       	ld	r24, Z
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	30 e0       	ldi	r19, 0x00	; 0
    2f0e:	ce 01       	movw	r24, r28
    2f10:	87 5b       	subi	r24, 0xB7	; 183
    2f12:	9f 4f       	sbci	r25, 0xFF	; 255
    2f14:	fc 01       	movw	r30, r24
    2f16:	e2 0f       	add	r30, r18
    2f18:	f3 1f       	adc	r31, r19
    2f1a:	83 e2       	ldi	r24, 0x23	; 35
    2f1c:	80 83       	st	Z, r24
	arr1[i+1] = '\0';
    2f1e:	fe 01       	movw	r30, r28
    2f20:	e8 5b       	subi	r30, 0xB8	; 184
    2f22:	ff 4f       	sbci	r31, 0xFF	; 255
    2f24:	80 81       	ld	r24, Z
    2f26:	88 2f       	mov	r24, r24
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	9c 01       	movw	r18, r24
    2f2c:	2f 5f       	subi	r18, 0xFF	; 255
    2f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f30:	ce 01       	movw	r24, r28
    2f32:	87 5b       	subi	r24, 0xB7	; 183
    2f34:	9f 4f       	sbci	r25, 0xFF	; 255
    2f36:	fc 01       	movw	r30, r24
    2f38:	e2 0f       	add	r30, r18
    2f3a:	f3 1f       	adc	r31, r19
    2f3c:	10 82       	st	Z, r1

	LCD_clearScreen();
    2f3e:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0, "plz re-enter the");
    2f42:	2f eb       	ldi	r18, 0xBF	; 191
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	60 e0       	ldi	r22, 0x00	; 0
    2f4a:	a9 01       	movw	r20, r18
    2f4c:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0, "same pass:");
    2f50:	20 ed       	ldi	r18, 0xD0	; 208
    2f52:	30 e0       	ldi	r19, 0x00	; 0
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	60 e0       	ldi	r22, 0x00	; 0
    2f58:	a9 01       	movw	r20, r18
    2f5a:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_displayStringRowColumn>

	for(i=0;i<5;i++)
    2f5e:	fe 01       	movw	r30, r28
    2f60:	e8 5b       	subi	r30, 0xB8	; 184
    2f62:	ff 4f       	sbci	r31, 0xFF	; 255
    2f64:	10 82       	st	Z, r1
    2f66:	8e c0       	rjmp	.+284    	; 0x3084 <setup_password+0x402>
	{
		arr2[i] = KEYPAD_getPressedKey();
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e8 5b       	subi	r30, 0xB8	; 184
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	80 81       	ld	r24, Z
    2f70:	08 2f       	mov	r16, r24
    2f72:	10 e0       	ldi	r17, 0x00	; 0
    2f74:	0e 94 b0 09 	call	0x1360	; 0x1360 <KEYPAD_getPressedKey>
    2f78:	28 2f       	mov	r18, r24
    2f7a:	ce 01       	movw	r24, r28
    2f7c:	8d 5a       	subi	r24, 0xAD	; 173
    2f7e:	9f 4f       	sbci	r25, 0xFF	; 255
    2f80:	fc 01       	movw	r30, r24
    2f82:	e0 0f       	add	r30, r16
    2f84:	f1 1f       	adc	r31, r17
    2f86:	20 83       	st	Z, r18
		LCD_displayCharacter('*');
    2f88:	8a e2       	ldi	r24, 0x2A	; 42
    2f8a:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <LCD_displayCharacter>
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	90 e0       	ldi	r25, 0x00	; 0
    2f92:	a8 ec       	ldi	r26, 0xC8	; 200
    2f94:	b3 e4       	ldi	r27, 0x43	; 67
    2f96:	8f a3       	std	Y+39, r24	; 0x27
    2f98:	98 a7       	std	Y+40, r25	; 0x28
    2f9a:	a9 a7       	std	Y+41, r26	; 0x29
    2f9c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9e:	6f a1       	ldd	r22, Y+39	; 0x27
    2fa0:	78 a5       	ldd	r23, Y+40	; 0x28
    2fa2:	89 a5       	ldd	r24, Y+41	; 0x29
    2fa4:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fa6:	20 e0       	ldi	r18, 0x00	; 0
    2fa8:	30 e0       	ldi	r19, 0x00	; 0
    2faa:	4a ef       	ldi	r20, 0xFA	; 250
    2fac:	54 e4       	ldi	r21, 0x44	; 68
    2fae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	8b a3       	std	Y+35, r24	; 0x23
    2fb8:	9c a3       	std	Y+36, r25	; 0x24
    2fba:	ad a3       	std	Y+37, r26	; 0x25
    2fbc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2fbe:	6b a1       	ldd	r22, Y+35	; 0x23
    2fc0:	7c a1       	ldd	r23, Y+36	; 0x24
    2fc2:	8d a1       	ldd	r24, Y+37	; 0x25
    2fc4:	9e a1       	ldd	r25, Y+38	; 0x26
    2fc6:	20 e0       	ldi	r18, 0x00	; 0
    2fc8:	30 e0       	ldi	r19, 0x00	; 0
    2fca:	40 e8       	ldi	r20, 0x80	; 128
    2fcc:	5f e3       	ldi	r21, 0x3F	; 63
    2fce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fd2:	88 23       	and	r24, r24
    2fd4:	2c f4       	brge	.+10     	; 0x2fe0 <setup_password+0x35e>
		__ticks = 1;
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	9a a3       	std	Y+34, r25	; 0x22
    2fdc:	89 a3       	std	Y+33, r24	; 0x21
    2fde:	3f c0       	rjmp	.+126    	; 0x305e <setup_password+0x3dc>
	else if (__tmp > 65535)
    2fe0:	6b a1       	ldd	r22, Y+35	; 0x23
    2fe2:	7c a1       	ldd	r23, Y+36	; 0x24
    2fe4:	8d a1       	ldd	r24, Y+37	; 0x25
    2fe6:	9e a1       	ldd	r25, Y+38	; 0x26
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	3f ef       	ldi	r19, 0xFF	; 255
    2fec:	4f e7       	ldi	r20, 0x7F	; 127
    2fee:	57 e4       	ldi	r21, 0x47	; 71
    2ff0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ff4:	18 16       	cp	r1, r24
    2ff6:	4c f5       	brge	.+82     	; 0x304a <setup_password+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff8:	6f a1       	ldd	r22, Y+39	; 0x27
    2ffa:	78 a5       	ldd	r23, Y+40	; 0x28
    2ffc:	89 a5       	ldd	r24, Y+41	; 0x29
    2ffe:	9a a5       	ldd	r25, Y+42	; 0x2a
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e2       	ldi	r20, 0x20	; 32
    3006:	51 e4       	ldi	r21, 0x41	; 65
    3008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    300c:	dc 01       	movw	r26, r24
    300e:	cb 01       	movw	r24, r22
    3010:	bc 01       	movw	r22, r24
    3012:	cd 01       	movw	r24, r26
    3014:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3018:	dc 01       	movw	r26, r24
    301a:	cb 01       	movw	r24, r22
    301c:	9a a3       	std	Y+34, r25	; 0x22
    301e:	89 a3       	std	Y+33, r24	; 0x21
    3020:	0f c0       	rjmp	.+30     	; 0x3040 <setup_password+0x3be>
    3022:	88 ec       	ldi	r24, 0xC8	; 200
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	98 a3       	std	Y+32, r25	; 0x20
    3028:	8f 8f       	std	Y+31, r24	; 0x1f
    302a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    302c:	98 a1       	ldd	r25, Y+32	; 0x20
    302e:	01 97       	sbiw	r24, 0x01	; 1
    3030:	f1 f7       	brne	.-4      	; 0x302e <setup_password+0x3ac>
    3032:	98 a3       	std	Y+32, r25	; 0x20
    3034:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3036:	89 a1       	ldd	r24, Y+33	; 0x21
    3038:	9a a1       	ldd	r25, Y+34	; 0x22
    303a:	01 97       	sbiw	r24, 0x01	; 1
    303c:	9a a3       	std	Y+34, r25	; 0x22
    303e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3040:	89 a1       	ldd	r24, Y+33	; 0x21
    3042:	9a a1       	ldd	r25, Y+34	; 0x22
    3044:	00 97       	sbiw	r24, 0x00	; 0
    3046:	69 f7       	brne	.-38     	; 0x3022 <setup_password+0x3a0>
    3048:	14 c0       	rjmp	.+40     	; 0x3072 <setup_password+0x3f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    304a:	6b a1       	ldd	r22, Y+35	; 0x23
    304c:	7c a1       	ldd	r23, Y+36	; 0x24
    304e:	8d a1       	ldd	r24, Y+37	; 0x25
    3050:	9e a1       	ldd	r25, Y+38	; 0x26
    3052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3056:	dc 01       	movw	r26, r24
    3058:	cb 01       	movw	r24, r22
    305a:	9a a3       	std	Y+34, r25	; 0x22
    305c:	89 a3       	std	Y+33, r24	; 0x21
    305e:	89 a1       	ldd	r24, Y+33	; 0x21
    3060:	9a a1       	ldd	r25, Y+34	; 0x22
    3062:	9e 8f       	std	Y+30, r25	; 0x1e
    3064:	8d 8f       	std	Y+29, r24	; 0x1d
    3066:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3068:	9e 8d       	ldd	r25, Y+30	; 0x1e
    306a:	01 97       	sbiw	r24, 0x01	; 1
    306c:	f1 f7       	brne	.-4      	; 0x306a <setup_password+0x3e8>
    306e:	9e 8f       	std	Y+30, r25	; 0x1e
    3070:	8d 8f       	std	Y+29, r24	; 0x1d

	LCD_clearScreen();
	LCD_displayStringRowColumn(0, 0, "plz re-enter the");
	LCD_displayStringRowColumn(1, 0, "same pass:");

	for(i=0;i<5;i++)
    3072:	de 01       	movw	r26, r28
    3074:	a8 5b       	subi	r26, 0xB8	; 184
    3076:	bf 4f       	sbci	r27, 0xFF	; 255
    3078:	fe 01       	movw	r30, r28
    307a:	e8 5b       	subi	r30, 0xB8	; 184
    307c:	ff 4f       	sbci	r31, 0xFF	; 255
    307e:	80 81       	ld	r24, Z
    3080:	8f 5f       	subi	r24, 0xFF	; 255
    3082:	8c 93       	st	X, r24
    3084:	fe 01       	movw	r30, r28
    3086:	e8 5b       	subi	r30, 0xB8	; 184
    3088:	ff 4f       	sbci	r31, 0xFF	; 255
    308a:	80 81       	ld	r24, Z
    308c:	85 30       	cpi	r24, 0x05	; 5
    308e:	08 f4       	brcc	.+2      	; 0x3092 <setup_password+0x410>
    3090:	6b cf       	rjmp	.-298    	; 0x2f68 <setup_password+0x2e6>
	{
		arr2[i] = KEYPAD_getPressedKey();
		LCD_displayCharacter('*');
		_delay_ms(400);
	}
	while(KEYPAD_getPressedKey()!= '=') {}
    3092:	0e 94 b0 09 	call	0x1360	; 0x1360 <KEYPAD_getPressedKey>
    3096:	8d 33       	cpi	r24, 0x3D	; 61
    3098:	e1 f7       	brne	.-8      	; 0x3092 <setup_password+0x410>
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	a8 e4       	ldi	r26, 0x48	; 72
    30a0:	b3 e4       	ldi	r27, 0x43	; 67
    30a2:	89 8f       	std	Y+25, r24	; 0x19
    30a4:	9a 8f       	std	Y+26, r25	; 0x1a
    30a6:	ab 8f       	std	Y+27, r26	; 0x1b
    30a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30aa:	69 8d       	ldd	r22, Y+25	; 0x19
    30ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	4a ef       	ldi	r20, 0xFA	; 250
    30b8:	54 e4       	ldi	r21, 0x44	; 68
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	8d 8b       	std	Y+21, r24	; 0x15
    30c4:	9e 8b       	std	Y+22, r25	; 0x16
    30c6:	af 8b       	std	Y+23, r26	; 0x17
    30c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    30ca:	6d 89       	ldd	r22, Y+21	; 0x15
    30cc:	7e 89       	ldd	r23, Y+22	; 0x16
    30ce:	8f 89       	ldd	r24, Y+23	; 0x17
    30d0:	98 8d       	ldd	r25, Y+24	; 0x18
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e8       	ldi	r20, 0x80	; 128
    30d8:	5f e3       	ldi	r21, 0x3F	; 63
    30da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30de:	88 23       	and	r24, r24
    30e0:	2c f4       	brge	.+10     	; 0x30ec <setup_password+0x46a>
		__ticks = 1;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	9c 8b       	std	Y+20, r25	; 0x14
    30e8:	8b 8b       	std	Y+19, r24	; 0x13
    30ea:	3f c0       	rjmp	.+126    	; 0x316a <setup_password+0x4e8>
	else if (__tmp > 65535)
    30ec:	6d 89       	ldd	r22, Y+21	; 0x15
    30ee:	7e 89       	ldd	r23, Y+22	; 0x16
    30f0:	8f 89       	ldd	r24, Y+23	; 0x17
    30f2:	98 8d       	ldd	r25, Y+24	; 0x18
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	3f ef       	ldi	r19, 0xFF	; 255
    30f8:	4f e7       	ldi	r20, 0x7F	; 127
    30fa:	57 e4       	ldi	r21, 0x47	; 71
    30fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3100:	18 16       	cp	r1, r24
    3102:	4c f5       	brge	.+82     	; 0x3156 <setup_password+0x4d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3104:	69 8d       	ldd	r22, Y+25	; 0x19
    3106:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3108:	8b 8d       	ldd	r24, Y+27	; 0x1b
    310a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	40 e2       	ldi	r20, 0x20	; 32
    3112:	51 e4       	ldi	r21, 0x41	; 65
    3114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	bc 01       	movw	r22, r24
    311e:	cd 01       	movw	r24, r26
    3120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	9c 8b       	std	Y+20, r25	; 0x14
    312a:	8b 8b       	std	Y+19, r24	; 0x13
    312c:	0f c0       	rjmp	.+30     	; 0x314c <setup_password+0x4ca>
    312e:	88 ec       	ldi	r24, 0xC8	; 200
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	9a 8b       	std	Y+18, r25	; 0x12
    3134:	89 8b       	std	Y+17, r24	; 0x11
    3136:	89 89       	ldd	r24, Y+17	; 0x11
    3138:	9a 89       	ldd	r25, Y+18	; 0x12
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <setup_password+0x4b8>
    313e:	9a 8b       	std	Y+18, r25	; 0x12
    3140:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3142:	8b 89       	ldd	r24, Y+19	; 0x13
    3144:	9c 89       	ldd	r25, Y+20	; 0x14
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	9c 8b       	std	Y+20, r25	; 0x14
    314a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314c:	8b 89       	ldd	r24, Y+19	; 0x13
    314e:	9c 89       	ldd	r25, Y+20	; 0x14
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	69 f7       	brne	.-38     	; 0x312e <setup_password+0x4ac>
    3154:	14 c0       	rjmp	.+40     	; 0x317e <setup_password+0x4fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3156:	6d 89       	ldd	r22, Y+21	; 0x15
    3158:	7e 89       	ldd	r23, Y+22	; 0x16
    315a:	8f 89       	ldd	r24, Y+23	; 0x17
    315c:	98 8d       	ldd	r25, Y+24	; 0x18
    315e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	9c 8b       	std	Y+20, r25	; 0x14
    3168:	8b 8b       	std	Y+19, r24	; 0x13
    316a:	8b 89       	ldd	r24, Y+19	; 0x13
    316c:	9c 89       	ldd	r25, Y+20	; 0x14
    316e:	98 8b       	std	Y+16, r25	; 0x10
    3170:	8f 87       	std	Y+15, r24	; 0x0f
    3172:	8f 85       	ldd	r24, Y+15	; 0x0f
    3174:	98 89       	ldd	r25, Y+16	; 0x10
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	f1 f7       	brne	.-4      	; 0x3176 <setup_password+0x4f4>
    317a:	98 8b       	std	Y+16, r25	; 0x10
    317c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(200);

	arr2[i] = '#';
    317e:	fe 01       	movw	r30, r28
    3180:	e8 5b       	subi	r30, 0xB8	; 184
    3182:	ff 4f       	sbci	r31, 0xFF	; 255
    3184:	80 81       	ld	r24, Z
    3186:	28 2f       	mov	r18, r24
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	ce 01       	movw	r24, r28
    318c:	8d 5a       	subi	r24, 0xAD	; 173
    318e:	9f 4f       	sbci	r25, 0xFF	; 255
    3190:	fc 01       	movw	r30, r24
    3192:	e2 0f       	add	r30, r18
    3194:	f3 1f       	adc	r31, r19
    3196:	83 e2       	ldi	r24, 0x23	; 35
    3198:	80 83       	st	Z, r24
	arr2[i+1] = '\0';
    319a:	fe 01       	movw	r30, r28
    319c:	e8 5b       	subi	r30, 0xB8	; 184
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	80 81       	ld	r24, Z
    31a2:	88 2f       	mov	r24, r24
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	9c 01       	movw	r18, r24
    31a8:	2f 5f       	subi	r18, 0xFF	; 255
    31aa:	3f 4f       	sbci	r19, 0xFF	; 255
    31ac:	ce 01       	movw	r24, r28
    31ae:	8d 5a       	subi	r24, 0xAD	; 173
    31b0:	9f 4f       	sbci	r25, 0xFF	; 255
    31b2:	fc 01       	movw	r30, r24
    31b4:	e2 0f       	add	r30, r18
    31b6:	f3 1f       	adc	r31, r19
    31b8:	10 82       	st	Z, r1

	while(UART_recieveByte() != MC2_READY) {}
    31ba:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
    31be:	80 31       	cpi	r24, 0x10	; 16
    31c0:	e1 f7       	brne	.-8      	; 0x31ba <setup_password+0x538>

	UART_sendString(arr1);   /* send the two strings to MC2 and compare the, there*/
    31c2:	ce 01       	movw	r24, r28
    31c4:	87 5b       	subi	r24, 0xB7	; 183
    31c6:	9f 4f       	sbci	r25, 0xFF	; 255
    31c8:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <UART_sendString>
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	a0 ea       	ldi	r26, 0xA0	; 160
    31d2:	b0 e4       	ldi	r27, 0x40	; 64
    31d4:	8b 87       	std	Y+11, r24	; 0x0b
    31d6:	9c 87       	std	Y+12, r25	; 0x0c
    31d8:	ad 87       	std	Y+13, r26	; 0x0d
    31da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    31de:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	4a ef       	ldi	r20, 0xFA	; 250
    31ea:	54 e4       	ldi	r21, 0x44	; 68
    31ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	8f 83       	std	Y+7, r24	; 0x07
    31f6:	98 87       	std	Y+8, r25	; 0x08
    31f8:	a9 87       	std	Y+9, r26	; 0x09
    31fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31fc:	6f 81       	ldd	r22, Y+7	; 0x07
    31fe:	78 85       	ldd	r23, Y+8	; 0x08
    3200:	89 85       	ldd	r24, Y+9	; 0x09
    3202:	9a 85       	ldd	r25, Y+10	; 0x0a
    3204:	20 e0       	ldi	r18, 0x00	; 0
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	40 e8       	ldi	r20, 0x80	; 128
    320a:	5f e3       	ldi	r21, 0x3F	; 63
    320c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3210:	88 23       	and	r24, r24
    3212:	2c f4       	brge	.+10     	; 0x321e <setup_password+0x59c>
		__ticks = 1;
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	9e 83       	std	Y+6, r25	; 0x06
    321a:	8d 83       	std	Y+5, r24	; 0x05
    321c:	3f c0       	rjmp	.+126    	; 0x329c <setup_password+0x61a>
	else if (__tmp > 65535)
    321e:	6f 81       	ldd	r22, Y+7	; 0x07
    3220:	78 85       	ldd	r23, Y+8	; 0x08
    3222:	89 85       	ldd	r24, Y+9	; 0x09
    3224:	9a 85       	ldd	r25, Y+10	; 0x0a
    3226:	20 e0       	ldi	r18, 0x00	; 0
    3228:	3f ef       	ldi	r19, 0xFF	; 255
    322a:	4f e7       	ldi	r20, 0x7F	; 127
    322c:	57 e4       	ldi	r21, 0x47	; 71
    322e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3232:	18 16       	cp	r1, r24
    3234:	4c f5       	brge	.+82     	; 0x3288 <setup_password+0x606>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3236:	6b 85       	ldd	r22, Y+11	; 0x0b
    3238:	7c 85       	ldd	r23, Y+12	; 0x0c
    323a:	8d 85       	ldd	r24, Y+13	; 0x0d
    323c:	9e 85       	ldd	r25, Y+14	; 0x0e
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e2       	ldi	r20, 0x20	; 32
    3244:	51 e4       	ldi	r21, 0x41	; 65
    3246:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    324a:	dc 01       	movw	r26, r24
    324c:	cb 01       	movw	r24, r22
    324e:	bc 01       	movw	r22, r24
    3250:	cd 01       	movw	r24, r26
    3252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3256:	dc 01       	movw	r26, r24
    3258:	cb 01       	movw	r24, r22
    325a:	9e 83       	std	Y+6, r25	; 0x06
    325c:	8d 83       	std	Y+5, r24	; 0x05
    325e:	0f c0       	rjmp	.+30     	; 0x327e <setup_password+0x5fc>
    3260:	88 ec       	ldi	r24, 0xC8	; 200
    3262:	90 e0       	ldi	r25, 0x00	; 0
    3264:	9c 83       	std	Y+4, r25	; 0x04
    3266:	8b 83       	std	Y+3, r24	; 0x03
    3268:	8b 81       	ldd	r24, Y+3	; 0x03
    326a:	9c 81       	ldd	r25, Y+4	; 0x04
    326c:	01 97       	sbiw	r24, 0x01	; 1
    326e:	f1 f7       	brne	.-4      	; 0x326c <setup_password+0x5ea>
    3270:	9c 83       	std	Y+4, r25	; 0x04
    3272:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3274:	8d 81       	ldd	r24, Y+5	; 0x05
    3276:	9e 81       	ldd	r25, Y+6	; 0x06
    3278:	01 97       	sbiw	r24, 0x01	; 1
    327a:	9e 83       	std	Y+6, r25	; 0x06
    327c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327e:	8d 81       	ldd	r24, Y+5	; 0x05
    3280:	9e 81       	ldd	r25, Y+6	; 0x06
    3282:	00 97       	sbiw	r24, 0x00	; 0
    3284:	69 f7       	brne	.-38     	; 0x3260 <setup_password+0x5de>
    3286:	14 c0       	rjmp	.+40     	; 0x32b0 <setup_password+0x62e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3288:	6f 81       	ldd	r22, Y+7	; 0x07
    328a:	78 85       	ldd	r23, Y+8	; 0x08
    328c:	89 85       	ldd	r24, Y+9	; 0x09
    328e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3290:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3294:	dc 01       	movw	r26, r24
    3296:	cb 01       	movw	r24, r22
    3298:	9e 83       	std	Y+6, r25	; 0x06
    329a:	8d 83       	std	Y+5, r24	; 0x05
    329c:	8d 81       	ldd	r24, Y+5	; 0x05
    329e:	9e 81       	ldd	r25, Y+6	; 0x06
    32a0:	9a 83       	std	Y+2, r25	; 0x02
    32a2:	89 83       	std	Y+1, r24	; 0x01
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	9a 81       	ldd	r25, Y+2	; 0x02
    32a8:	01 97       	sbiw	r24, 0x01	; 1
    32aa:	f1 f7       	brne	.-4      	; 0x32a8 <setup_password+0x626>
    32ac:	9a 83       	std	Y+2, r25	; 0x02
    32ae:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	UART_sendString(arr2);
    32b0:	ce 01       	movw	r24, r28
    32b2:	8d 5a       	subi	r24, 0xAD	; 173
    32b4:	9f 4f       	sbci	r25, 0xFF	; 255
    32b6:	0e 94 fd 1a 	call	0x35fa	; 0x35fa <UART_sendString>

	status = UART_recieveByte();
    32ba:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
    32be:	fe 01       	movw	r30, r28
    32c0:	e9 5b       	subi	r30, 0xB9	; 185
    32c2:	ff 4f       	sbci	r31, 0xFF	; 255
    32c4:	80 83       	st	Z, r24

	if(status == PASSWORD_FAIL)
    32c6:	fe 01       	movw	r30, r28
    32c8:	e9 5b       	subi	r30, 0xB9	; 185
    32ca:	ff 4f       	sbci	r31, 0xFF	; 255
    32cc:	80 81       	ld	r24, Z
    32ce:	88 23       	and	r24, r24
    32d0:	19 f4       	brne	.+6      	; 0x32d8 <setup_password+0x656>
	{
		setup_password();
    32d2:	0e 94 41 16 	call	0x2c82	; 0x2c82 <setup_password>
    32d6:	02 c0       	rjmp	.+4      	; 0x32dc <setup_password+0x65a>
	}
	else
	{
		open_door();
    32d8:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <open_door>
	}
}
    32dc:	c4 5a       	subi	r28, 0xA4	; 164
    32de:	df 4f       	sbci	r29, 0xFF	; 255
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	1f 91       	pop	r17
    32f0:	0f 91       	pop	r16
    32f2:	08 95       	ret

000032f4 <Error>:
/*
 * Function that display on the screen Error message if the user entered wrong
 * pass for three consecutive times.
 */
void Error()
{
    32f4:	df 93       	push	r29
    32f6:	cf 93       	push	r28
    32f8:	cd b7       	in	r28, 0x3d	; 61
    32fa:	de b7       	in	r29, 0x3e	; 62
    32fc:	2f 97       	sbiw	r28, 0x0f	; 15
    32fe:	0f b6       	in	r0, 0x3f	; 63
    3300:	f8 94       	cli
    3302:	de bf       	out	0x3e, r29	; 62
    3304:	0f be       	out	0x3f, r0	; 63
    3306:	cd bf       	out	0x3d, r28	; 61
	LCD_clearScreen();
    3308:	0e 94 5b 10 	call	0x20b6	; 0x20b6 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0,"Wrong password");
    330c:	2b ed       	ldi	r18, 0xDB	; 219
    330e:	30 e0       	ldi	r19, 0x00	; 0
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	60 e0       	ldi	r22, 0x00	; 0
    3314:	a9 01       	movw	r20, r18
    3316:	0e 94 1f 10 	call	0x203e	; 0x203e <LCD_displayStringRowColumn>

	for(uint8 i=0;i<60;i++)
    331a:	1f 86       	std	Y+15, r1	; 0x0f
    331c:	75 c0       	rjmp	.+234    	; 0x3408 <Error+0x114>
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	aa e7       	ldi	r26, 0x7A	; 122
    3324:	b4 e4       	ldi	r27, 0x44	; 68
    3326:	8b 87       	std	Y+11, r24	; 0x0b
    3328:	9c 87       	std	Y+12, r25	; 0x0c
    332a:	ad 87       	std	Y+13, r26	; 0x0d
    332c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3330:	7c 85       	ldd	r23, Y+12	; 0x0c
    3332:	8d 85       	ldd	r24, Y+13	; 0x0d
    3334:	9e 85       	ldd	r25, Y+14	; 0x0e
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	4a ef       	ldi	r20, 0xFA	; 250
    333c:	54 e4       	ldi	r21, 0x44	; 68
    333e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	8f 83       	std	Y+7, r24	; 0x07
    3348:	98 87       	std	Y+8, r25	; 0x08
    334a:	a9 87       	std	Y+9, r26	; 0x09
    334c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    334e:	6f 81       	ldd	r22, Y+7	; 0x07
    3350:	78 85       	ldd	r23, Y+8	; 0x08
    3352:	89 85       	ldd	r24, Y+9	; 0x09
    3354:	9a 85       	ldd	r25, Y+10	; 0x0a
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e8       	ldi	r20, 0x80	; 128
    335c:	5f e3       	ldi	r21, 0x3F	; 63
    335e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3362:	88 23       	and	r24, r24
    3364:	2c f4       	brge	.+10     	; 0x3370 <Error+0x7c>
		__ticks = 1;
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	9e 83       	std	Y+6, r25	; 0x06
    336c:	8d 83       	std	Y+5, r24	; 0x05
    336e:	3f c0       	rjmp	.+126    	; 0x33ee <Error+0xfa>
	else if (__tmp > 65535)
    3370:	6f 81       	ldd	r22, Y+7	; 0x07
    3372:	78 85       	ldd	r23, Y+8	; 0x08
    3374:	89 85       	ldd	r24, Y+9	; 0x09
    3376:	9a 85       	ldd	r25, Y+10	; 0x0a
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	3f ef       	ldi	r19, 0xFF	; 255
    337c:	4f e7       	ldi	r20, 0x7F	; 127
    337e:	57 e4       	ldi	r21, 0x47	; 71
    3380:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3384:	18 16       	cp	r1, r24
    3386:	4c f5       	brge	.+82     	; 0x33da <Error+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3388:	6b 85       	ldd	r22, Y+11	; 0x0b
    338a:	7c 85       	ldd	r23, Y+12	; 0x0c
    338c:	8d 85       	ldd	r24, Y+13	; 0x0d
    338e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e2       	ldi	r20, 0x20	; 32
    3396:	51 e4       	ldi	r21, 0x41	; 65
    3398:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	bc 01       	movw	r22, r24
    33a2:	cd 01       	movw	r24, r26
    33a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	9e 83       	std	Y+6, r25	; 0x06
    33ae:	8d 83       	std	Y+5, r24	; 0x05
    33b0:	0f c0       	rjmp	.+30     	; 0x33d0 <Error+0xdc>
    33b2:	88 ec       	ldi	r24, 0xC8	; 200
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9c 83       	std	Y+4, r25	; 0x04
    33b8:	8b 83       	std	Y+3, r24	; 0x03
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	9c 81       	ldd	r25, Y+4	; 0x04
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	f1 f7       	brne	.-4      	; 0x33be <Error+0xca>
    33c2:	9c 83       	std	Y+4, r25	; 0x04
    33c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c6:	8d 81       	ldd	r24, Y+5	; 0x05
    33c8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	9e 83       	std	Y+6, r25	; 0x06
    33ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d0:	8d 81       	ldd	r24, Y+5	; 0x05
    33d2:	9e 81       	ldd	r25, Y+6	; 0x06
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	69 f7       	brne	.-38     	; 0x33b2 <Error+0xbe>
    33d8:	14 c0       	rjmp	.+40     	; 0x3402 <Error+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33da:	6f 81       	ldd	r22, Y+7	; 0x07
    33dc:	78 85       	ldd	r23, Y+8	; 0x08
    33de:	89 85       	ldd	r24, Y+9	; 0x09
    33e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	9e 83       	std	Y+6, r25	; 0x06
    33ec:	8d 83       	std	Y+5, r24	; 0x05
    33ee:	8d 81       	ldd	r24, Y+5	; 0x05
    33f0:	9e 81       	ldd	r25, Y+6	; 0x06
    33f2:	9a 83       	std	Y+2, r25	; 0x02
    33f4:	89 83       	std	Y+1, r24	; 0x01
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	9a 81       	ldd	r25, Y+2	; 0x02
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	f1 f7       	brne	.-4      	; 0x33fa <Error+0x106>
    33fe:	9a 83       	std	Y+2, r25	; 0x02
    3400:	89 83       	std	Y+1, r24	; 0x01
    3402:	8f 85       	ldd	r24, Y+15	; 0x0f
    3404:	8f 5f       	subi	r24, 0xFF	; 255
    3406:	8f 87       	std	Y+15, r24	; 0x0f
    3408:	8f 85       	ldd	r24, Y+15	; 0x0f
    340a:	8c 33       	cpi	r24, 0x3C	; 60
    340c:	08 f4       	brcc	.+2      	; 0x3410 <Error+0x11c>
    340e:	87 cf       	rjmp	.-242    	; 0x331e <Error+0x2a>
		_delay_ms(1000);

	open_door();
    3410:	0e 94 f1 11 	call	0x23e2	; 0x23e2 <open_door>
}
    3414:	2f 96       	adiw	r28, 0x0f	; 15
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	f8 94       	cli
    341a:	de bf       	out	0x3e, r29	; 62
    341c:	0f be       	out	0x3f, r0	; 63
    341e:	cd bf       	out	0x3d, r28	; 61
    3420:	cf 91       	pop	r28
    3422:	df 91       	pop	r29
    3424:	08 95       	ret

00003426 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_configtype* config_ptr)
{
    3426:	df 93       	push	r29
    3428:	cf 93       	push	r28
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
    342e:	28 97       	sbiw	r28, 0x08	; 8
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	98 87       	std	Y+8, r25	; 0x08
    343c:	8f 83       	std	Y+7, r24	; 0x07
	uint16 ubrr_value = 0;
    343e:	1e 82       	std	Y+6, r1	; 0x06
    3440:	1d 82       	std	Y+5, r1	; 0x05
	uint32 baud_rate = config_ptr -> BAUDRATE;
    3442:	ef 81       	ldd	r30, Y+7	; 0x07
    3444:	f8 85       	ldd	r31, Y+8	; 0x08
    3446:	80 81       	ld	r24, Z
    3448:	91 81       	ldd	r25, Z+1	; 0x01
    344a:	a2 81       	ldd	r26, Z+2	; 0x02
    344c:	b3 81       	ldd	r27, Z+3	; 0x03
    344e:	89 83       	std	Y+1, r24	; 0x01
    3450:	9a 83       	std	Y+2, r25	; 0x02
    3452:	ab 83       	std	Y+3, r26	; 0x03
    3454:	bc 83       	std	Y+4, r27	; 0x04

	/* U2X = 1 for double transmission speed */
#ifdef double_speed_mode
	UCSRA = (1<<U2X);
    3456:	eb e2       	ldi	r30, 0x2B	; 43
    3458:	f0 e0       	ldi	r31, 0x00	; 0
    345a:	82 e0       	ldi	r24, 0x02	; 2
    345c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    345e:	ea e2       	ldi	r30, 0x2A	; 42
    3460:	f0 e0       	ldi	r31, 0x00	; 0
    3462:	88 e1       	ldi	r24, 0x18	; 24
    3464:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL);
    3466:	e0 e4       	ldi	r30, 0x40	; 64
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 e8       	ldi	r24, 0x80	; 128
    346c:	80 83       	st	Z, r24

	UCSRC = (UCSRC & 0xBF) | ( (config_ptr -> mode) << 6 );
    346e:	a0 e4       	ldi	r26, 0x40	; 64
    3470:	b0 e0       	ldi	r27, 0x00	; 0
    3472:	e0 e4       	ldi	r30, 0x40	; 64
    3474:	f0 e0       	ldi	r31, 0x00	; 0
    3476:	80 81       	ld	r24, Z
    3478:	28 2f       	mov	r18, r24
    347a:	2f 7b       	andi	r18, 0xBF	; 191
    347c:	ef 81       	ldd	r30, Y+7	; 0x07
    347e:	f8 85       	ldd	r31, Y+8	; 0x08
    3480:	84 81       	ldd	r24, Z+4	; 0x04
    3482:	88 2f       	mov	r24, r24
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	00 24       	eor	r0, r0
    3488:	96 95       	lsr	r25
    348a:	87 95       	ror	r24
    348c:	07 94       	ror	r0
    348e:	96 95       	lsr	r25
    3490:	87 95       	ror	r24
    3492:	07 94       	ror	r0
    3494:	98 2f       	mov	r25, r24
    3496:	80 2d       	mov	r24, r0
    3498:	82 2b       	or	r24, r18
    349a:	8c 93       	st	X, r24
	
	UCSRC = (UCSRC & 0xCF) | ( (config_ptr -> parity) << 4 );
    349c:	a0 e4       	ldi	r26, 0x40	; 64
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	e0 e4       	ldi	r30, 0x40	; 64
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	80 81       	ld	r24, Z
    34a6:	28 2f       	mov	r18, r24
    34a8:	2f 7c       	andi	r18, 0xCF	; 207
    34aa:	ef 81       	ldd	r30, Y+7	; 0x07
    34ac:	f8 85       	ldd	r31, Y+8	; 0x08
    34ae:	85 81       	ldd	r24, Z+5	; 0x05
    34b0:	88 2f       	mov	r24, r24
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	82 95       	swap	r24
    34b6:	92 95       	swap	r25
    34b8:	90 7f       	andi	r25, 0xF0	; 240
    34ba:	98 27       	eor	r25, r24
    34bc:	80 7f       	andi	r24, 0xF0	; 240
    34be:	98 27       	eor	r25, r24
    34c0:	82 2b       	or	r24, r18
    34c2:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF7) | ( (config_ptr -> bit) << 3 );
    34c4:	a0 e4       	ldi	r26, 0x40	; 64
    34c6:	b0 e0       	ldi	r27, 0x00	; 0
    34c8:	e0 e4       	ldi	r30, 0x40	; 64
    34ca:	f0 e0       	ldi	r31, 0x00	; 0
    34cc:	80 81       	ld	r24, Z
    34ce:	28 2f       	mov	r18, r24
    34d0:	27 7f       	andi	r18, 0xF7	; 247
    34d2:	ef 81       	ldd	r30, Y+7	; 0x07
    34d4:	f8 85       	ldd	r31, Y+8	; 0x08
    34d6:	86 81       	ldd	r24, Z+6	; 0x06
    34d8:	88 2f       	mov	r24, r24
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	88 0f       	add	r24, r24
    34de:	99 1f       	adc	r25, r25
    34e0:	88 0f       	add	r24, r24
    34e2:	99 1f       	adc	r25, r25
    34e4:	88 0f       	add	r24, r24
    34e6:	99 1f       	adc	r25, r25
    34e8:	82 2b       	or	r24, r18
    34ea:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xF9) | ( (config_ptr -> size) << 1 );
    34ec:	a0 e4       	ldi	r26, 0x40	; 64
    34ee:	b0 e0       	ldi	r27, 0x00	; 0
    34f0:	e0 e4       	ldi	r30, 0x40	; 64
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	80 81       	ld	r24, Z
    34f6:	28 2f       	mov	r18, r24
    34f8:	29 7f       	andi	r18, 0xF9	; 249
    34fa:	ef 81       	ldd	r30, Y+7	; 0x07
    34fc:	f8 85       	ldd	r31, Y+8	; 0x08
    34fe:	87 81       	ldd	r24, Z+7	; 0x07
    3500:	88 2f       	mov	r24, r24
    3502:	90 e0       	ldi	r25, 0x00	; 0
    3504:	88 0f       	add	r24, r24
    3506:	99 1f       	adc	r25, r25
    3508:	82 2b       	or	r24, r18
    350a:	8c 93       	st	X, r24

	if(config_ptr -> polarity == Ignored) {}
    350c:	ef 81       	ldd	r30, Y+7	; 0x07
    350e:	f8 85       	ldd	r31, Y+8	; 0x08
    3510:	80 85       	ldd	r24, Z+8	; 0x08
    3512:	88 30       	cpi	r24, 0x08	; 8
    3514:	c9 f0       	breq	.+50     	; 0x3548 <UART_init+0x122>

	else
	{
		if(config_ptr -> polarity == Falling_edge)
    3516:	ef 81       	ldd	r30, Y+7	; 0x07
    3518:	f8 85       	ldd	r31, Y+8	; 0x08
    351a:	80 85       	ldd	r24, Z+8	; 0x08
    351c:	88 23       	and	r24, r24
    351e:	41 f4       	brne	.+16     	; 0x3530 <UART_init+0x10a>
		{
			SET_BIT(UCSRC,UCPOL);
    3520:	a0 e4       	ldi	r26, 0x40	; 64
    3522:	b0 e0       	ldi	r27, 0x00	; 0
    3524:	e0 e4       	ldi	r30, 0x40	; 64
    3526:	f0 e0       	ldi	r31, 0x00	; 0
    3528:	80 81       	ld	r24, Z
    352a:	81 60       	ori	r24, 0x01	; 1
    352c:	8c 93       	st	X, r24
    352e:	0c c0       	rjmp	.+24     	; 0x3548 <UART_init+0x122>
		}
		else if(config_ptr -> polarity == Rising_edge)
    3530:	ef 81       	ldd	r30, Y+7	; 0x07
    3532:	f8 85       	ldd	r31, Y+8	; 0x08
    3534:	80 85       	ldd	r24, Z+8	; 0x08
    3536:	81 30       	cpi	r24, 0x01	; 1
    3538:	39 f4       	brne	.+14     	; 0x3548 <UART_init+0x122>
		{
			CLEAR_BIT(UCSRC,UCPOL);
    353a:	a0 e4       	ldi	r26, 0x40	; 64
    353c:	b0 e0       	ldi	r27, 0x00	; 0
    353e:	e0 e4       	ldi	r30, 0x40	; 64
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	80 81       	ld	r24, Z
    3544:	8e 7f       	andi	r24, 0xFE	; 254
    3546:	8c 93       	st	X, r24
		}
	}

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (baud_rate * 8UL))) - 1);
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	9a 81       	ldd	r25, Y+2	; 0x02
    354c:	ab 81       	ldd	r26, Y+3	; 0x03
    354e:	bc 81       	ldd	r27, Y+4	; 0x04
    3550:	88 0f       	add	r24, r24
    3552:	99 1f       	adc	r25, r25
    3554:	aa 1f       	adc	r26, r26
    3556:	bb 1f       	adc	r27, r27
    3558:	88 0f       	add	r24, r24
    355a:	99 1f       	adc	r25, r25
    355c:	aa 1f       	adc	r26, r26
    355e:	bb 1f       	adc	r27, r27
    3560:	88 0f       	add	r24, r24
    3562:	99 1f       	adc	r25, r25
    3564:	aa 1f       	adc	r26, r26
    3566:	bb 1f       	adc	r27, r27
    3568:	9c 01       	movw	r18, r24
    356a:	ad 01       	movw	r20, r26
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	92 e1       	ldi	r25, 0x12	; 18
    3570:	aa e7       	ldi	r26, 0x7A	; 122
    3572:	b0 e0       	ldi	r27, 0x00	; 0
    3574:	bc 01       	movw	r22, r24
    3576:	cd 01       	movw	r24, r26
    3578:	0e 94 69 1b 	call	0x36d2	; 0x36d2 <__udivmodsi4>
    357c:	da 01       	movw	r26, r20
    357e:	c9 01       	movw	r24, r18
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	9e 83       	std	Y+6, r25	; 0x06
    3584:	8d 83       	std	Y+5, r24	; 0x05

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3586:	e0 e4       	ldi	r30, 0x40	; 64
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	8d 81       	ldd	r24, Y+5	; 0x05
    358c:	9e 81       	ldd	r25, Y+6	; 0x06
    358e:	89 2f       	mov	r24, r25
    3590:	99 27       	eor	r25, r25
    3592:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3594:	e9 e2       	ldi	r30, 0x29	; 41
    3596:	f0 e0       	ldi	r31, 0x00	; 0
    3598:	8d 81       	ldd	r24, Y+5	; 0x05
    359a:	80 83       	st	Z, r24
}
    359c:	28 96       	adiw	r28, 0x08	; 8
    359e:	0f b6       	in	r0, 0x3f	; 63
    35a0:	f8 94       	cli
    35a2:	de bf       	out	0x3e, r29	; 62
    35a4:	0f be       	out	0x3f, r0	; 63
    35a6:	cd bf       	out	0x3d, r28	; 61
    35a8:	cf 91       	pop	r28
    35aa:	df 91       	pop	r29
    35ac:	08 95       	ret

000035ae <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    35ae:	df 93       	push	r29
    35b0:	cf 93       	push	r28
    35b2:	0f 92       	push	r0
    35b4:	cd b7       	in	r28, 0x3d	; 61
    35b6:	de b7       	in	r29, 0x3e	; 62
    35b8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    35ba:	eb e2       	ldi	r30, 0x2B	; 43
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	80 81       	ld	r24, Z
    35c0:	88 2f       	mov	r24, r24
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	80 72       	andi	r24, 0x20	; 32
    35c6:	90 70       	andi	r25, 0x00	; 0
    35c8:	00 97       	sbiw	r24, 0x00	; 0
    35ca:	b9 f3       	breq	.-18     	; 0x35ba <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    35cc:	ec e2       	ldi	r30, 0x2C	; 44
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    35d4:	0f 90       	pop	r0
    35d6:	cf 91       	pop	r28
    35d8:	df 91       	pop	r29
    35da:	08 95       	ret

000035dc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    35dc:	df 93       	push	r29
    35de:	cf 93       	push	r28
    35e0:	cd b7       	in	r28, 0x3d	; 61
    35e2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    35e4:	eb e2       	ldi	r30, 0x2B	; 43
    35e6:	f0 e0       	ldi	r31, 0x00	; 0
    35e8:	80 81       	ld	r24, Z
    35ea:	88 23       	and	r24, r24
    35ec:	dc f7       	brge	.-10     	; 0x35e4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    35ee:	ec e2       	ldi	r30, 0x2C	; 44
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
}
    35f4:	cf 91       	pop	r28
    35f6:	df 91       	pop	r29
    35f8:	08 95       	ret

000035fa <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    35fa:	df 93       	push	r29
    35fc:	cf 93       	push	r28
    35fe:	00 d0       	rcall	.+0      	; 0x3600 <UART_sendString+0x6>
    3600:	0f 92       	push	r0
    3602:	cd b7       	in	r28, 0x3d	; 61
    3604:	de b7       	in	r29, 0x3e	; 62
    3606:	9b 83       	std	Y+3, r25	; 0x03
    3608:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    360a:	19 82       	std	Y+1, r1	; 0x01
    360c:	0e c0       	rjmp	.+28     	; 0x362a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    360e:	89 81       	ldd	r24, Y+1	; 0x01
    3610:	28 2f       	mov	r18, r24
    3612:	30 e0       	ldi	r19, 0x00	; 0
    3614:	8a 81       	ldd	r24, Y+2	; 0x02
    3616:	9b 81       	ldd	r25, Y+3	; 0x03
    3618:	fc 01       	movw	r30, r24
    361a:	e2 0f       	add	r30, r18
    361c:	f3 1f       	adc	r31, r19
    361e:	80 81       	ld	r24, Z
    3620:	0e 94 d7 1a 	call	0x35ae	; 0x35ae <UART_sendByte>
		i++;
    3624:	89 81       	ldd	r24, Y+1	; 0x01
    3626:	8f 5f       	subi	r24, 0xFF	; 255
    3628:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	28 2f       	mov	r18, r24
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	8a 81       	ldd	r24, Y+2	; 0x02
    3632:	9b 81       	ldd	r25, Y+3	; 0x03
    3634:	fc 01       	movw	r30, r24
    3636:	e2 0f       	add	r30, r18
    3638:	f3 1f       	adc	r31, r19
    363a:	80 81       	ld	r24, Z
    363c:	88 23       	and	r24, r24
    363e:	39 f7       	brne	.-50     	; 0x360e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	cf 91       	pop	r28
    3648:	df 91       	pop	r29
    364a:	08 95       	ret

0000364c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    364c:	0f 93       	push	r16
    364e:	1f 93       	push	r17
    3650:	df 93       	push	r29
    3652:	cf 93       	push	r28
    3654:	00 d0       	rcall	.+0      	; 0x3656 <UART_receiveString+0xa>
    3656:	0f 92       	push	r0
    3658:	cd b7       	in	r28, 0x3d	; 61
    365a:	de b7       	in	r29, 0x3e	; 62
    365c:	9b 83       	std	Y+3, r25	; 0x03
    365e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3660:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3662:	89 81       	ldd	r24, Y+1	; 0x01
    3664:	28 2f       	mov	r18, r24
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	8a 81       	ldd	r24, Y+2	; 0x02
    366a:	9b 81       	ldd	r25, Y+3	; 0x03
    366c:	8c 01       	movw	r16, r24
    366e:	02 0f       	add	r16, r18
    3670:	13 1f       	adc	r17, r19
    3672:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
    3676:	f8 01       	movw	r30, r16
    3678:	80 83       	st	Z, r24
    367a:	0f c0       	rjmp	.+30     	; 0x369a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    367c:	89 81       	ldd	r24, Y+1	; 0x01
    367e:	8f 5f       	subi	r24, 0xFF	; 255
    3680:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	28 2f       	mov	r18, r24
    3686:	30 e0       	ldi	r19, 0x00	; 0
    3688:	8a 81       	ldd	r24, Y+2	; 0x02
    368a:	9b 81       	ldd	r25, Y+3	; 0x03
    368c:	8c 01       	movw	r16, r24
    368e:	02 0f       	add	r16, r18
    3690:	13 1f       	adc	r17, r19
    3692:	0e 94 ee 1a 	call	0x35dc	; 0x35dc <UART_recieveByte>
    3696:	f8 01       	movw	r30, r16
    3698:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	28 2f       	mov	r18, r24
    369e:	30 e0       	ldi	r19, 0x00	; 0
    36a0:	8a 81       	ldd	r24, Y+2	; 0x02
    36a2:	9b 81       	ldd	r25, Y+3	; 0x03
    36a4:	fc 01       	movw	r30, r24
    36a6:	e2 0f       	add	r30, r18
    36a8:	f3 1f       	adc	r31, r19
    36aa:	80 81       	ld	r24, Z
    36ac:	83 32       	cpi	r24, 0x23	; 35
    36ae:	31 f7       	brne	.-52     	; 0x367c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    36b0:	89 81       	ldd	r24, Y+1	; 0x01
    36b2:	28 2f       	mov	r18, r24
    36b4:	30 e0       	ldi	r19, 0x00	; 0
    36b6:	8a 81       	ldd	r24, Y+2	; 0x02
    36b8:	9b 81       	ldd	r25, Y+3	; 0x03
    36ba:	fc 01       	movw	r30, r24
    36bc:	e2 0f       	add	r30, r18
    36be:	f3 1f       	adc	r31, r19
    36c0:	10 82       	st	Z, r1
}
    36c2:	0f 90       	pop	r0
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	cf 91       	pop	r28
    36ca:	df 91       	pop	r29
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
    36d0:	08 95       	ret

000036d2 <__udivmodsi4>:
    36d2:	a1 e2       	ldi	r26, 0x21	; 33
    36d4:	1a 2e       	mov	r1, r26
    36d6:	aa 1b       	sub	r26, r26
    36d8:	bb 1b       	sub	r27, r27
    36da:	fd 01       	movw	r30, r26
    36dc:	0d c0       	rjmp	.+26     	; 0x36f8 <__udivmodsi4_ep>

000036de <__udivmodsi4_loop>:
    36de:	aa 1f       	adc	r26, r26
    36e0:	bb 1f       	adc	r27, r27
    36e2:	ee 1f       	adc	r30, r30
    36e4:	ff 1f       	adc	r31, r31
    36e6:	a2 17       	cp	r26, r18
    36e8:	b3 07       	cpc	r27, r19
    36ea:	e4 07       	cpc	r30, r20
    36ec:	f5 07       	cpc	r31, r21
    36ee:	20 f0       	brcs	.+8      	; 0x36f8 <__udivmodsi4_ep>
    36f0:	a2 1b       	sub	r26, r18
    36f2:	b3 0b       	sbc	r27, r19
    36f4:	e4 0b       	sbc	r30, r20
    36f6:	f5 0b       	sbc	r31, r21

000036f8 <__udivmodsi4_ep>:
    36f8:	66 1f       	adc	r22, r22
    36fa:	77 1f       	adc	r23, r23
    36fc:	88 1f       	adc	r24, r24
    36fe:	99 1f       	adc	r25, r25
    3700:	1a 94       	dec	r1
    3702:	69 f7       	brne	.-38     	; 0x36de <__udivmodsi4_loop>
    3704:	60 95       	com	r22
    3706:	70 95       	com	r23
    3708:	80 95       	com	r24
    370a:	90 95       	com	r25
    370c:	9b 01       	movw	r18, r22
    370e:	ac 01       	movw	r20, r24
    3710:	bd 01       	movw	r22, r26
    3712:	cf 01       	movw	r24, r30
    3714:	08 95       	ret

00003716 <__prologue_saves__>:
    3716:	2f 92       	push	r2
    3718:	3f 92       	push	r3
    371a:	4f 92       	push	r4
    371c:	5f 92       	push	r5
    371e:	6f 92       	push	r6
    3720:	7f 92       	push	r7
    3722:	8f 92       	push	r8
    3724:	9f 92       	push	r9
    3726:	af 92       	push	r10
    3728:	bf 92       	push	r11
    372a:	cf 92       	push	r12
    372c:	df 92       	push	r13
    372e:	ef 92       	push	r14
    3730:	ff 92       	push	r15
    3732:	0f 93       	push	r16
    3734:	1f 93       	push	r17
    3736:	cf 93       	push	r28
    3738:	df 93       	push	r29
    373a:	cd b7       	in	r28, 0x3d	; 61
    373c:	de b7       	in	r29, 0x3e	; 62
    373e:	ca 1b       	sub	r28, r26
    3740:	db 0b       	sbc	r29, r27
    3742:	0f b6       	in	r0, 0x3f	; 63
    3744:	f8 94       	cli
    3746:	de bf       	out	0x3e, r29	; 62
    3748:	0f be       	out	0x3f, r0	; 63
    374a:	cd bf       	out	0x3d, r28	; 61
    374c:	09 94       	ijmp

0000374e <__epilogue_restores__>:
    374e:	2a 88       	ldd	r2, Y+18	; 0x12
    3750:	39 88       	ldd	r3, Y+17	; 0x11
    3752:	48 88       	ldd	r4, Y+16	; 0x10
    3754:	5f 84       	ldd	r5, Y+15	; 0x0f
    3756:	6e 84       	ldd	r6, Y+14	; 0x0e
    3758:	7d 84       	ldd	r7, Y+13	; 0x0d
    375a:	8c 84       	ldd	r8, Y+12	; 0x0c
    375c:	9b 84       	ldd	r9, Y+11	; 0x0b
    375e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3760:	b9 84       	ldd	r11, Y+9	; 0x09
    3762:	c8 84       	ldd	r12, Y+8	; 0x08
    3764:	df 80       	ldd	r13, Y+7	; 0x07
    3766:	ee 80       	ldd	r14, Y+6	; 0x06
    3768:	fd 80       	ldd	r15, Y+5	; 0x05
    376a:	0c 81       	ldd	r16, Y+4	; 0x04
    376c:	1b 81       	ldd	r17, Y+3	; 0x03
    376e:	aa 81       	ldd	r26, Y+2	; 0x02
    3770:	b9 81       	ldd	r27, Y+1	; 0x01
    3772:	ce 0f       	add	r28, r30
    3774:	d1 1d       	adc	r29, r1
    3776:	0f b6       	in	r0, 0x3f	; 63
    3778:	f8 94       	cli
    377a:	de bf       	out	0x3e, r29	; 62
    377c:	0f be       	out	0x3f, r0	; 63
    377e:	cd bf       	out	0x3d, r28	; 61
    3780:	ed 01       	movw	r28, r26
    3782:	08 95       	ret

00003784 <itoa>:
    3784:	fb 01       	movw	r30, r22
    3786:	9f 01       	movw	r18, r30
    3788:	e8 94       	clt
    378a:	42 30       	cpi	r20, 0x02	; 2
    378c:	c4 f0       	brlt	.+48     	; 0x37be <itoa+0x3a>
    378e:	45 32       	cpi	r20, 0x25	; 37
    3790:	b4 f4       	brge	.+44     	; 0x37be <itoa+0x3a>
    3792:	4a 30       	cpi	r20, 0x0A	; 10
    3794:	29 f4       	brne	.+10     	; 0x37a0 <itoa+0x1c>
    3796:	97 fb       	bst	r25, 7
    3798:	1e f4       	brtc	.+6      	; 0x37a0 <itoa+0x1c>
    379a:	90 95       	com	r25
    379c:	81 95       	neg	r24
    379e:	9f 4f       	sbci	r25, 0xFF	; 255
    37a0:	64 2f       	mov	r22, r20
    37a2:	77 27       	eor	r23, r23
    37a4:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <__udivmodhi4>
    37a8:	80 5d       	subi	r24, 0xD0	; 208
    37aa:	8a 33       	cpi	r24, 0x3A	; 58
    37ac:	0c f0       	brlt	.+2      	; 0x37b0 <itoa+0x2c>
    37ae:	89 5d       	subi	r24, 0xD9	; 217
    37b0:	81 93       	st	Z+, r24
    37b2:	cb 01       	movw	r24, r22
    37b4:	00 97       	sbiw	r24, 0x00	; 0
    37b6:	a1 f7       	brne	.-24     	; 0x37a0 <itoa+0x1c>
    37b8:	16 f4       	brtc	.+4      	; 0x37be <itoa+0x3a>
    37ba:	5d e2       	ldi	r21, 0x2D	; 45
    37bc:	51 93       	st	Z+, r21
    37be:	10 82       	st	Z, r1
    37c0:	c9 01       	movw	r24, r18
    37c2:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <strrev>

000037c6 <strrev>:
    37c6:	dc 01       	movw	r26, r24
    37c8:	fc 01       	movw	r30, r24
    37ca:	67 2f       	mov	r22, r23
    37cc:	71 91       	ld	r23, Z+
    37ce:	77 23       	and	r23, r23
    37d0:	e1 f7       	brne	.-8      	; 0x37ca <strrev+0x4>
    37d2:	32 97       	sbiw	r30, 0x02	; 2
    37d4:	04 c0       	rjmp	.+8      	; 0x37de <strrev+0x18>
    37d6:	7c 91       	ld	r23, X
    37d8:	6d 93       	st	X+, r22
    37da:	70 83       	st	Z, r23
    37dc:	62 91       	ld	r22, -Z
    37de:	ae 17       	cp	r26, r30
    37e0:	bf 07       	cpc	r27, r31
    37e2:	c8 f3       	brcs	.-14     	; 0x37d6 <strrev+0x10>
    37e4:	08 95       	ret

000037e6 <__udivmodhi4>:
    37e6:	aa 1b       	sub	r26, r26
    37e8:	bb 1b       	sub	r27, r27
    37ea:	51 e1       	ldi	r21, 0x11	; 17
    37ec:	07 c0       	rjmp	.+14     	; 0x37fc <__udivmodhi4_ep>

000037ee <__udivmodhi4_loop>:
    37ee:	aa 1f       	adc	r26, r26
    37f0:	bb 1f       	adc	r27, r27
    37f2:	a6 17       	cp	r26, r22
    37f4:	b7 07       	cpc	r27, r23
    37f6:	10 f0       	brcs	.+4      	; 0x37fc <__udivmodhi4_ep>
    37f8:	a6 1b       	sub	r26, r22
    37fa:	b7 0b       	sbc	r27, r23

000037fc <__udivmodhi4_ep>:
    37fc:	88 1f       	adc	r24, r24
    37fe:	99 1f       	adc	r25, r25
    3800:	5a 95       	dec	r21
    3802:	a9 f7       	brne	.-22     	; 0x37ee <__udivmodhi4_loop>
    3804:	80 95       	com	r24
    3806:	90 95       	com	r25
    3808:	bc 01       	movw	r22, r24
    380a:	cd 01       	movw	r24, r26
    380c:	08 95       	ret

0000380e <_exit>:
    380e:	f8 94       	cli

00003810 <__stop_program>:
    3810:	ff cf       	rjmp	.-2      	; 0x3810 <__stop_program>
